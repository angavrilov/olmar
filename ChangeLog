2006-05-03  Hendrik Tews  <tews@ithif59.inf.tu-dresden.de>

	ELSA:
	* use TRACE env var in regrtest 
	* add another 13 nullable's
	* regression test pass now with ocaml serialization !!

2006-05-03  Hendrik Tews  <tews@debian>

	AST:
	* pointerType option to register nullable pointer types like
	  StringRef; all these pointer types are stored in the 
	  new global StringSet pointerTypes 
	* configured OCAMLC to avoid perl warning

	ELSA:
	* fixed null pointer problem in PQ_qualifier, FullExpression
	

2006-05-02  Hendrik Tews  <tews@penguin.cs.kun.nl>

	SMBASE:
	* deleted to nullable define
	
	AST: 
	* added nullable flag to contructor arguments
	  + ast syntax: astclass(nullable ... )
	  + checked for in parseCtorArg (together with owner)
	* ocaml marshalling translates nullable into option types
	* assertion checks for nullable fields in constructors are
	  disabled for the moment (seems some fields are filled in later)
	* astgen: new assertNonNullCtorArgs to emit assertion checks in
	  constructors (not used at the moment)
	* astgen: new ocaml_arg_list simplifies code for marshalling
	  childs
	* configure detects ocaml (for ocamlhelp.cc)
	* added option_some_constr for (Some x) to ocamlhelp.{h,cc}

	ELSA:
	* successfully run regression tests
	* added -ocaml option to regrtest to run test with ocaml
	  marshalling
	* started nullable debugging with regrtest -ocaml (9 nullable
	  added so far, one undocumented)

2006-05-01  Hendrik Tews  <tews@penguin.cs.kun.nl>

	* renamed Type into CType

	* fixed bug in elkhound grammar: Tok_ARROW for "->"
	* astgen: generated ml does not register callbacks during module
	init
	* fixed caml include problem: extern "C"
	* added ocaml things to configure/sm_config and elsa/Makefile.in
	* invoke caml marshalling for sysTrace marshallToOcaml
	* does segfault deep in the ast

2006-04-30  Hendrik Tews  <tews@debian>

	* small fixes in astgen
	* modified elsa ast for ocaml serialization
	* started elsa configuration for ocaml

	* changed list allocation in ..._from_list functions, use
	  caml_alloc and Store_field now

2006-04-28  Hendrik Tews  <tews@debian>

	* added ocaml_from_SourceLoc

2006-04-28  Hendrik Tews  <tews@penguin.cs.kun.nl>

	* ocaml serialization almost finished: only ocaml_from_SourceLoc
	  is missing
	* added getPtrBase to astgen.cc to extract pointer base type
	* simplified ocaml_from_function
	* treat FakeList pointers correcly
	* new file ocamlhelp.cc as implementation of ocamlhelp.h
	* new files cc_ocaml.* in test to support elsa's enum types
	* added ocaml_from_ functions for all those enum types 
	  (this includes lots of callbacks and huge switches)

	* finish the commit message less hack started on April 24:
	  most of ocaml serialization is done, still missing: functions for
	  basis types, list functions for non-class elements,
	  serialization of enums.
	* added TAGS goal to ast/Makefile.in
	* permit ast files with ``-'' in the name
	* restructured callback name generation in ocaml_node_callback
	* simplified is_cyclic
	* put ocaml helpers in separate file: ocamlhelp.h
	* ocaml serialization (aka converting the ast into an ocaml
	variant type)
	  - all the changes describes in the following are only visible if
	    the ast requests the ocamlVisitor (which switches wantOcaml
	    on)

	  - ocaml serialization can't be done with one of the visitors for
	    two reasons:
	    (1) all the visitors return void (instead of a template T)
	    (2) the post visit methods do not have access to the return
	    values of the post visit methods of the child nodes.

	    I therfore decided to add another tree traversal method
	    "toOcaml" solely for the purpose of ocaml serialization. All
	    toOcaml methods have a parameter ToOcamlData (which is passed
	    down during traversal) that contains a SObjSet<const void *>
	    of ast nodes to detect cycles in the ast.
	    [ I plan to use the ToOcamlData for some statistics as well ]

	    The general approach is as follows: first convert all direct
	    childs into ocaml values, then take these and call a ocaml
	    function that builds the right ocaml ast node. One could build
	    the value without calling into ocaml, however, this requires
	    to fiddle with the not-so-trivial encoding of ocaml
	    constructors. For basic types like int's and strings I'll use
	    extra utility functions.

	    The declaration of toOcaml is emited in emitCommonFuncs.

	    For classes with children toOcaml is virtual and pure in the
	    super class.

	    For list classes there is one function per element class name
	    that converts such a list into an ocaml list. This function
	    starts at the end of the list, converts its contents and
	    builds up an ocaml list in parallel. Lists are not shared in
	    the ast, so no provisions to reflect sharing is necessary.
	
	  - additional includes and common utility functions come from
	    ocamlhelp.h (in the spirit of asthelp.h)
	
	  - to reflect sharing all ast nodes save their ocaml value in the
	    private "ocaml_val", which of course must be properly
	    initialized and recored as global root as soon it gets a
	    non-zero value. The ocaml_val sits only in subclass nodes or
	    in super classes that don't have children.
	    [ If there is not much sharing in the C++ ast's I might remove
	    this later. If it stays will eventually need a visitor
	    clearing ocaml_val and unregistering as global root. ]

	  - new methods emitToOcamlChilds, emitToOcaml, emitOcamlFromList
	    in CGen to emit the serialisation code.

	    emitToOcamlChilds converts a CtorArg list in to recursive
	                      serialization calls
	    emitToOcaml       emits the def of toOcaml
	    emitOcamlFromList emits the serialization function for a list
	                      class

	  - list conversion function are put first into the cc file,
	    because they are called from the toOcaml methods.

	  - toOcaml is emitted after clone.
	
2006-04-22  Hendrik Tews  <tews@debian>

	* moved topicComment from OTGen to Gen
	* added support for multiline comments
	* declare a toOcaml traversal function in data classes
	* add necessary ocaml includes and util types
	* added simingly missing XMLPRINT_CSTRING

2006-04-14  Hendrik Tews  <tews@debian>

	* use fixed translate

	* fix strutil/translate bugs, add test frame test/translate.cc

	* added callback registration

2006-04-13  Hendrik Tews  <tews@debian>

	* added constructor callback definitions

2006-04-11  Hendrik Tews  <tews@debian>

	* fixed problem with cyclic classes like AttributeSpecifier and
	  AttributeSpecifierList; I generate a variant type now instead of
	  an type equation. 

	* generate ocaml type defs for ast's:
	  - ast changes:
	    + ocaml_type_verbatim section to be included in the ocaml type
	      def file
	    + option ocamlVisitor to request the generation of the ocaml
	      interface 
	  - new subclass TF_ocaml_type_verbatim for ocaml_type_verbatim
	  - adopted parser/lexer for TF_ocaml_type_verbatim
	  - factor out comment syntax in Gen, to produce ocaml comments 
	  - new class OTGen to generate the ocaml code 
	  - added one assertion to extractListType

