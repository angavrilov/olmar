#  Copyright 2006-2007, Hendrik Tews, All rights reserved.            #
#  See file license.txt for terms of use                              #
#######################################################################

# Makefile.in
# this is the Makefile for the ocaml ast tools

# use the first goal for development, for release put it in comment and use all

#first: uplinks.cmo
#first: astmatch.cmo
#first: check_oast_byte
#first: check_oast
#first: astiter.cmo
#first: astiternodes.cmo
#first: count-ast-new count-ast
#first: ast_graph
#first: hashloc
#first: test_ast
#first: path_to_node.cmo

# eventually add astmap.$(OCAML_OBJ_EXT)  to all again
# eventually add hashloc to all

# directories of other software; 
SMBASE   := @SMBASE@
AST      := @AST@
ELSA     := @ELSA@
MEMCHECK :=@MEMCHECK@


# external tools
OCAMLC   := @OCAMLC@
OCAMLOPT := @OCAMLOPT@
OCAMLCC  := @OCAMLCC@
CAMLP4O  := camlp4o

OCAML_OBJ_EXT := @OCAML_OBJ_EXT@
OCAML_LIB_EXT := @OCAML_LIB_EXT@
OCAML_FLAGS := -w Ae
OCAML_BYTE_FLAGS := -g

OCAMLDEBUG=0
ifeq ($(OCAMLDEBUG),1)
  OCAMLOPT := $(OCAMLC) -g
  OCAMLCC  := $(OCAMLC) -g
  OCAMLC   := $(OCAMLC) -g
  OCAML_OBJ_EXT := cmo
  OCAML_LIB_EXT := cma
endif

ifeq ($(MEMCHECK),)
  CHECKOAST_GOAL=
else
  CHECKOAST_GOAL=check_oast
endif

.PHONY: all
all: 	$(CHECKOAST_GOAL) \
	astmatch.$(OCAML_OBJ_EXT) \
	astiter.$(OCAML_OBJ_EXT) \
	astiternodes.$(OCAML_OBJ_EXT) \
	count-ast count-ast-new \
	ast_graph \
	dumpast


# list of files to clean in 'clean' (etc.) targets
# (these get added to below)
TOCLEAN =
TODISTCLEAN =

# re-create the Makefile if Makefile.in has changed
TODISTCLEAN += Makefile
Makefile: Makefile.in config.status
	./config.status

# reconfigure if the configure script has changed
config.status: configure.pl $(SMBASE)/sm_config.pm
	./config.status -reconfigure

COUNTAST_ML=\
	dense_set.ml \
	$(ELSA)/ast_annotation.ml \
	$(ELSA)/oast_header_version.ml \
	$(ELSA)/oast_header.ml \
	ast_util.ml \
	count-ast.ml

TOCLEAN += count-ast
count-ast: $(COUNTAST_ML:.ml=.$(OCAML_OBJ_EXT))
	$(OCAMLCC) $(OCAML_FLAGS) -o $@ $^


COUNTASTNEW_ML=\
	dense_set.ml \
	$(ELSA)/ast_annotation.ml \
	$(ELSA)/oast_header_version.ml \
	$(ELSA)/oast_header.ml \
	ast_util.ml \
	superast.ml \
	count-ast-new.ml

TOCLEAN += count-ast-new
count-ast-new: $(COUNTASTNEW_ML:.ml=.$(OCAML_OBJ_EXT))
	$(OCAMLCC) $(OCAML_FLAGS) -o $@ $^


ASTGRAPH_ML=\
	dense_set.ml \
	$(ELSA)/elsa_util.ml \
	$(ELSA)/cc_ml_types.ml \
	$(ELSA)/ml_ctype.ml \
	$(ELSA)/ast_annotation.ml \
	$(ELSA)/oast_header_version.ml \
	$(ELSA)/oast_header.ml \
	ast_util.ml \
	superast.ml \
	uplinks.ml \
	ast_graph.ml

TOCLEAN += ast_graph
ast_graph: $(ASTGRAPH_ML:.ml=.$(OCAML_OBJ_EXT))
	$(OCAMLCC) $(OCAML_FLAGS) -o $@ $^


OLMAR_LIB_FILES=\
	dense_set.ml \
	$(ELSA)/elsa_util.ml \
	$(ELSA)/cc_ml_types.ml \
	$(ELSA)/ml_ctype.ml \
	$(ELSA)/ast_annotation.ml \
	$(ELSA)/cc_ast_gen_type.ml \
	$(ELSA)/oast_header_version.ml \
	$(ELSA)/oast_header.ml \
	ast_util.ml \
	ast_meta.ml

olmar.cma: $(OLMAR_LIB_FILES:.ml=.cmo)
	$(OCAMLC) $(OCAML_FLAGS) -a -o $@ $^

olmar.cmxa: $(OLMAR_LIB_FILES:.ml=.cmx)
	$(OCAMLOPT) $(OCAML_FLAGS) -a -o $@ $^

.PHONY: libs
TOCLEAN += olmar.cma olmar.cmxa olmar.a
libs: olmar.cma olmar.cmxa olmar.a $(OLMAR_LIB_FILES:.ml=.cmi)
	mkdir -p lib
	cp -f $^ lib/


ast_browser.$(OCAML_OBJ_EXT): ast_browser.ml
	$(OCAMLCC) $(OCAML_FLAGS) -I $(ELSA) -I +lablgtk2 -c $<

TOCLEAN += ast_browser
ast_browser:  olmar.$(OCAML_LIB_EXT) ast_browser.$(OCAML_OBJ_EXT)
	$(OCAMLCC) $(OCAML_FLAGS) -I $(ELSA) -I +lablgtk2 -o $@ lablgtk.$(OCAML_LIB_EXT) $^


.PHONY: install
install: META olmar.cma olmar.cmxa olmar.a $(OLMAR_LIB_FILES:.ml=.cmi)
	ocamlfind install olmar $^
	test ! -f ast_browser || install ast_browser /usr/local/bin

.PHONY: uninstall
	ocamlfind remove olmar


TOCLEAN += dumpast
dumpast: dumpast.ml
	$(OCAMLCC) $(OCAML_FLAGS) -o $@ -I $(ELSA) unix.$(OCAML_LIB_EXT) $^

# hashloc is not working currently
HASHLOC_ML=\
	dense_set.ml \
	$(ELSA)/ast_annotation.ml \
	ast_util.ml \
	hashloc.ml

TOCLEAN += hashloc
hashloc: $(HASHLOC_ML:.ml=.$(OCAML_OBJ_EXT))
	$(OCAMLCC) $(OCAML_FLAGS) -o $@ $^



ELSA_AST_TYPE_DEF=\
	/usr/local/lib/ocaml/hashtbl.ml \
	$(ELSA)/cc_ml_types.ml \
	$(ELSA)/ml_ctype.ml \
	$(ELSA)/ast_annotation.ml \
	$(ELSA)/cc_ast_gen_type.ml

ELSA_AST_TYPE_DESCR=\
	elsa_ast_type_descr_header.ml\
	$(MEMCHECK)/generate_type_descr.cmo

TOCLEAN += elsa_ast_type_descr.ml
elsa_ast_type_descr.ml: $(ELSA_AST_TYPE_DEF) $(ELSA_AST_TYPE_DESCR) Makefile
	cat elsa_ast_type_descr_header.ml > $@
	for f in $(ELSA_AST_TYPE_DEF) ; do \
		$(CAMLP4O) $(MEMCHECK)/generate_type_descr.cmo $$f >> $@; \
	done

elsa_ast_type_descr.cmo: elsa_ast_type_descr.ml $(MEMCHECK)/memcheck.cmi
	$(OCAMLC) $(OCAML_BYTE_FLAGS) $(OCAML_FLAGS) -I $(MEMCHECK) -c $<

elsa_ast_type_descr.cmx: elsa_ast_type_descr.ml $(MEMCHECK)/memcheck.cmx
	$(OCAMLOPT) $(OCAML_FLAGS) -I $(MEMCHECK) -c $<


#	$(MEMCHECK)/myhashtbl.ml \

CHECKTREE_ML=\
	$(MEMCHECK)/memcheck.ml \
	$(ELSA)/ast_annotation.ml \
	$(ELSA)/oast_header_version.ml \
	$(ELSA)/oast_header.ml \
	elsa_ast_type_descr.ml \
	check_oast.ml

check_oast.cmo: check_oast.ml elsa_ast_type_descr.cmo
	$(OCAMLC) $(OCAML_BYTE_FLAGS) $(OCAML_FLAGS) \
		-I $(ELSA) -I $(MEMCHECK) -c $<

check_oast.cmx: check_oast.ml elsa_ast_type_descr.cmx
	$(OCAMLOPT) $(OCAML_FLAGS) -I $(ELSA) -I $(MEMCHECK) -c $<

TOCLEAN += check_oast
check_oast: $(CHECKTREE_ML:.ml=.$(OCAML_OBJ_EXT))
	$(OCAMLCC) $(OCAML_FLAGS) -o $@ -I $(ELSA) -I $(MEMCHECK) \
		unix.$(OCAML_LIB_EXT) $^

TOCLEAN += check_oast_byte
check_oast_byte: $(CHECKTREE_ML:.ml=.cmo)
	$(OCAMLC) $(OCAML_BYTE_FLAGS) $(OCAML_FLAGS) -o $@ \
		-I $(ELSA) -I $(MEMCHECK) unix.cma $^


#.PHONY: $(MEMCHECK)/generate_type_descr.cmo $(MEMCHECK)/memcheck.cmo
#.PHONY: $(MEMCHECK)/memcheck.cmx

$(MEMCHECK)/generate_type_descr.cmo:
	$(MAKE) -C $(MEMCHECK) all

$(MEMCHECK)/memcheck.cmo:
	$(MAKE) -C $(MEMCHECK) all

$(MEMCHECK)/memcheck.cmx:
	$(MAKE) -C $(MEMCHECK) all



UNMARSHAL_ML =\
	$(ELSA)/ast_annotation.ml \
	$(ELSA)/elsa_util.ml \
	$(ELSA)/cc_ml_types.ml \
	$(ELSA)/ml_ctype.ml \
	$(ELSA)/cc_ast_gen_type.ml \
	unmarshal.ml

TOCLEAN += unmarshal
unmarshal: $(UNMARSHAL_ML:.ml=.$(OCAML_OBJ_EXT))
	$(OCAMLCC) $(OCAML_FLAGS) -o $@ -I $(ELSA) safeUnmarshal.$(OCAML_LIB_EXT) $^

.PHONY: doc docclean
doc:
	$(MAKE) -C doc prepare-snapshot-doc
docclean:
	$(MAKE) -C doc docclean

# target for testing one file
TOCLEAN += nodes.dot nodes.ps
.PHONY: test_ast
# -skip 840
test_ast: ast_graph
	./ast_graph $(ELSA)/in/gnu/g0010.cc.oast
	dot -Tps nodes.dot > nodes.ps


$(ELSA)/%.cmo: $(ELSA)/%.ml
	$(MAKE) \
		OCAMLOPT="$(OCAMLOPT)" OCAMLCC="$(OCAMLC)" \
		OCAMLC="$(OCAMLC)" OCAML_OBJ_EXT="cmo" \
		OCAML_LIB_EXT="$(OCAML_LIB_EXT)" \
		-C $(ELSA) elsa_ml_objects

$(ELSA)/%.cmx: $(ELSA)/%.ml
	$(MAKE) \
		OCAMLOPT="$(OCAMLOPT)" OCAMLCC="$(OCAMLOPT)" \
		OCAMLC="$(OCAMLC)" OCAML_OBJ_EXT="cmx" \
		OCAML_LIB_EXT="$(OCAML_LIB_EXT)" \
		-C $(ELSA) elsa_ml_objects

$(ELSA)/%.cmi: $(ELSA)/%.mli
	$(MAKE) \
		OCAMLOPT="$(OCAMLOPT)" OCAMLCC="$(OCAMLCC)" \
		OCAMLC="$(OCAMLC)" OCAML_OBJ_EXT="$(OCAML_OBJ_EXT)" \
		OCAML_LIB_EXT="$(OCAML_LIB_EXT)" \
		-C $(ELSA) elsa_ml_objects


.PHONY: clean
clean:
	rm -f $(TOCLEAN)

.PHONY: tyclean
tyclean:
	(cd $(ELSA); rm -f *.cmi *.cmo *.cmx)
	(cd $(AST); rm -f *.cmi *.cmo *.cmx)
	rm -f *.cmi *.cmo *.cmx

.PHONY: distclean
distclean: clean
	rm -f Makefile config.status config.summary
	rm -f astmapfuns.mli


TOCLEAN += *.cmo

astmatch.cmo: astmatch.ml
	$(OCAMLC) $(OCAML_BYTE_FLAGS) $(OCAML_FLAGS) -w zy -I $(ELSA) -c $<

astiter.cmo: astiter.ml
	$(OCAMLC) $(OCAML_BYTE_FLAGS) $(OCAML_FLAGS) -w zy -I $(ELSA) -c $<

astmap.cmo: astmap.ml
	$(OCAMLC) $(OCAML_BYTE_FLAGS) $(OCAML_FLAGS) -w zy -I $(ELSA) -c $<

astiternodes.cmo: astiternodes.ml
	$(OCAMLC) $(OCAML_BYTE_FLAGS) $(OCAML_FLAGS) -w zy -I $(ELSA) -c $<

astmatch.cmx: astmatch.ml
	$(OCAMLOPT) $(OCAML_FLAGS) -w zy -I $(ELSA) -c $<

astiter.cmx: astiter.ml
	$(OCAMLOPT) $(OCAML_FLAGS) -w zy -I $(ELSA) -c $<

astmap.cmx: astmap.ml
	$(OCAMLOPT) $(OCAML_FLAGS) -w zy -I $(ELSA) -c $<

astiternodes.cmx: astiternodes.ml
	$(OCAMLOPT) $(OCAML_FLAGS) -w zy -I $(ELSA) -c $<


%.cmo: %.ml
	$(OCAMLC) $(OCAML_BYTE_FLAGS) $(OCAML_FLAGS) -I $(ELSA) -c $<

TOCLEAN += *.cmx *.o
%.cmx: %.ml
	$(OCAMLOPT) $(OCAML_FLAGS) -I $(ELSA) -c $<

TOCLEAN += *.cmi
%.cmi: %.mli
	$(OCAMLC) $(OCAML_FLAGS) -I $(ELSA) -c $<


-include mldeps.mk

.PHONY: mldeps
depend: mldeps
mldeps:
	ocamldep -I $(ELSA) *ml *mli > mldeps.mk
