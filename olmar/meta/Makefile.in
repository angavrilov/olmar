# Makefile.in for olmar/meta
#
#  Copyright 2006-2007 Hendrik Tews, All rights reserved. #
#  See file license.txt for terms of use                  #
###########################################################

# use the first goal for development, for release put it in comment and use all
first: stage_1 stage_2
#first: gen_reflection
#first: ast_reflection diff_ast_reflection
#first: check_oast

# directories of other software
CONFMEMCHECK:=@MEMCHECK@
MEMCHECK :=$(if $(patsubst /%,,$(CONFMEMCHECK))\
	,../$(CONFMEMCHECK), $(CONFMEMCHECK))

UTIL:= ../util
GENERAL:=  ../build/general
ASTGEN_OR:= ../build/astgen
ELSA_OR:= ../build/elsa

# configure section
OCC := @OCC@
OCCC := @OCCC@
OCOPT := @OCOPT@
OCP4O  := @OCP4O@
OC_OBJ_EXT := @OC_OBJ_EXT@
OC_LIB_EXT := @OC_LIB_EXT@
OC_NATIVE := @OC_NATIVE@
OCDIR := @OCDIR@


OC_COMP_FLAGS := -w Ae
OC_INC_FLAGS := -I $(UTIL) -I $(GENERAL) -I $(ASTGEN_OR) -I $(ELSA_OR)
OC_FLAGS := $(OC_COMP_FLAGS) $(OC_INC_FLAGS)
OC_BYTE_FLAGS := -g
ifeq ($(OC_NATIVE),1)
  OCDEPOPTS := -native
else
  OCDEPOPTS :=
endif

OCDEBUG=0
ifeq ($(OCDEBUG),1)
  OCOPT := $(OCC) -g
  OCCC  := $(OCC) -g
  OCC   := $(OCC) -g
  OC_OBJ_EXT := cmo
  OC_LIB_EXT := cma
  OCDEPOPTS :=
endif

STAGE1_PROGRAMMS := ast_type_graph gen_reflection gen_superast \
		gen_accessors gen_uplinks gen_graph 

.PHONY: stage_1
stage1: stage_1
stage_1: $(STAGE1_PROGRAMMS)
	$(MAKE) -C generated_ast all

stage2: stage_2
stage_2: check_oast $(STAGE1_PROGRAMMS)
	$(MAKE) -C generated_elsa all


stage_3:


# list of files to clean in 'clean' (etc.) targets
# (these get added to below)
TOCLEAN =
TODISTCLEAN =

# # re-create the Makefile if Makefile.in has changed
# TODISTCLEAN += Makefile
# Makefile: Makefile.in config.status
# 	./config.status

# # reconfigure if the configure script has changed
# config.status: configure.pl $(SMBASE)/sm_config.pm
# 	./config.status -reconfigure


############################################################################
#### memcheck type def generation
#### 
#### for astgen asts

AST_AST_TYPE_DEF=\
	$(GENERAL)/ast_annotation.ml \
	$(ASTGEN_OR)/ast_ml_types.ml \
	$(ASTGEN_OR)/ast_reflect_type.ml

AST_AST_TYPE_DESCR=\
	ast_type_descr_header.ml \
	$(MEMCHECK)/generate_type_descr.cmo

TOCLEAN += ast_ast_type_descr.ml
ast_ast_type_descr.ml: $(AST_AST_TYPE_DEF) $(AST_AST_TYPE_DESCR) Makefile
	cat ast_type_descr_header.ml > $@
	for f in $(AST_AST_TYPE_DEF) ; do \
		$(OCP4O) $(MEMCHECK)/generate_type_descr.cmo $$f >> $@; \
	done

ast_ast_type_descr.cmo: ast_ast_type_descr.ml $(MEMCHECK)/memcheck.cmi
	$(OCC) $(OC_BYTE_FLAGS) $(OC_FLAGS) -I $(MEMCHECK) -c $<

ast_ast_type_descr.cmx: ast_ast_type_descr.ml $(MEMCHECK)/memcheck.cmx
	$(OCOPT) $(OC_FLAGS) -I $(MEMCHECK) -c $<


#### for elsa asts


ELSA_AST_TYPE_DEF=\
	$(OCDIR)/hashtbl.ml \
	$(ELSA_OR)/elsa_ml_base_types.ml \
	$(ELSA_OR)/elsa_ml_flag_types.ml \
	$(ELSA_OR)/elsa_reflect_type.ml

ELSA_AST_TYPE_DESCR=\
	elsa_type_descr_header.ml\
	$(MEMCHECK)/generate_type_descr.cmo

TOCLEAN += elsa_ast_type_descr.ml
elsa_ast_type_descr.ml: $(ELSA_AST_TYPE_DEF) $(ELSA_AST_TYPE_DESCR) Makefile
	cat elsa_type_descr_header.ml > $@
	for f in $(ELSA_AST_TYPE_DEF) ; do \
		$(OCP4O) $(MEMCHECK)/generate_type_descr.cmo $$f >> $@; \
	done

elsa_ast_type_descr.cmo: elsa_ast_type_descr.ml $(MEMCHECK)/memcheck.cmi
	$(OCC) $(OC_BYTE_FLAGS) $(OC_FLAGS) -I $(MEMCHECK) -c $<

elsa_ast_type_descr.cmx: elsa_ast_type_descr.ml $(MEMCHECK)/memcheck.cmx
	$(OCOPT) $(OC_FLAGS) -I $(MEMCHECK) -c $<


############################################################################
#### check_oast
#### 

CHECKTREE_ML=\
	$(MEMCHECK)/memcheck.ml \
	$(GENERAL)/astgen_general.$(OC_LIB_EXT) \
	$(ASTGEN_OR)/astgen_lib.$(OC_LIB_EXT) \
	$(ELSA_OR)/elsa_lib.$(OC_LIB_EXT) \
	ast_ast_type_descr.ml \
	elsa_ast_type_descr.ml \
	check_oast.ml

check_oast.cmo: check_oast.ml ast_ast_type_descr.cmo
	$(OCC) $(OC_BYTE_FLAGS) $(OC_FLAGS) -I $(MEMCHECK) -c $<

check_oast.cmx: check_oast.ml ast_ast_type_descr.cmx
	$(OCOPT) $(OC_FLAGS) -I $(MEMCHECK) -c $<

TOCLEAN += check_oast
check_oast: $(CHECKTREE_ML:.ml=.$(OC_OBJ_EXT))
	$(OCCC) $(OC_FLAGS) -o $@ -I $(MEMCHECK) unix.$(OC_LIB_EXT) $^

TOCLEAN += check_oast_byte
check_oast_byte: $(CHECKTREE_ML:.ml=.cmo)
	$(OCC) $(OC_BYTE_FLAGS) $(OC_FLAGS) -o $@ -I $(MEMCHECK) unix.cma $^


$(MEMCHECK)/generate_type_descr.cmo:
	$(MAKE) -C $(MEMCHECK) all

$(MEMCHECK)/memcheck.cmo:
	$(MAKE) -C $(MEMCHECK) all

$(MEMCHECK)/memcheck.cmx:
	$(MAKE) -C $(MEMCHECK) all


#############################################################################
#####
##### meta_ast_lib

META_AST_LIB_ML := \
  ast_config.ml \
  meta_ast.ml


TOCLEAN += meta_ast_lib.cmxa
meta_ast_lib.cmxa: $(META_AST_LIB_ML:.ml=.cmx)
	$(OCCC) $(OC_FLAGS) -o $@ -a $^

TOCLEAN += meta_ast_lib.cma
meta_ast_lib.cma: $(META_AST_LIB_ML:.ml=.cmo)
	$(OCC) $(OC_FLAGS) -o $@ -a $^


#############################################################################
#####
##### gen_reflection


GEN_REFLECTION_ML=\
	$(UTIL)/olmar_utils.$(OC_LIB_EXT) \
	$(GENERAL)/astgen_general.$(OC_LIB_EXT) \
	$(ASTGEN_OR)/astgen_lib.$(OC_LIB_EXT) \
	meta_ast_lib.$(OC_LIB_EXT) \
	gen_reflection.ml

TOCLEAN += gen_reflection
gen_reflection: $(GEN_REFLECTION_ML:.ml=.$(OC_OBJ_EXT))
	$(OCCC) $(OC_FLAGS) -o $@ $^


.PHONY: ast_reflection
ast_reflection: gen_reflection
	rm -rf $(ASTGEN_OR)/new
	mkdir $(ASTGEN_OR)/new
	./gen_reflection $(ASTGEN_OR)/ast.ast.oast \
		-tr ast_reflection_control.txt \
		-o $(ASTGEN_OR)/new/ast_reflect

.PHONY: diff_ast_reflection
diff_ast_reflection:
	$(MAKE) -C $(ASTGEN_OR) diff-reflection


#############################################################################
#####
##### gen_superast

GEN_SUPERAST_ML=\
	$(UTIL)/olmar_utils.$(OC_LIB_EXT) \
	$(GENERAL)/astgen_general.$(OC_LIB_EXT) \
	$(ASTGEN_OR)/astgen_lib.$(OC_LIB_EXT) \
	meta_ast_lib.$(OC_LIB_EXT) \
	gen_superast.ml


TOCLEAN += gen_superast
gen_superast: $(GEN_SUPERAST_ML:.ml=.$(OC_OBJ_EXT))
	$(OCCC) $(OC_FLAGS) -o $@ $^


#############################################################################
#####
##### gen_accessors

GEN_ACCESSORS_ML=\
	$(UTIL)/olmar_utils.$(OC_LIB_EXT) \
	$(GENERAL)/astgen_general.$(OC_LIB_EXT) \
	$(ASTGEN_OR)/astgen_lib.$(OC_LIB_EXT) \
	meta_ast_lib.$(OC_LIB_EXT) \
	gen_accessors.ml


TOCLEAN += gen_accessors
gen_accessors: $(GEN_ACCESSORS_ML:.ml=.$(OC_OBJ_EXT))
	$(OCCC) $(OC_FLAGS) -o $@ $^


#############################################################################
#####
##### gen_uplinks

GEN_UPLINKS_ML=\
	$(UTIL)/olmar_utils.$(OC_LIB_EXT) \
	$(GENERAL)/astgen_general.$(OC_LIB_EXT) \
	$(ASTGEN_OR)/astgen_lib.$(OC_LIB_EXT) \
	meta_ast_lib.$(OC_LIB_EXT) \
	gen_uplinks.ml


TOCLEAN += gen_uplinks
gen_uplinks: $(GEN_UPLINKS_ML:.ml=.$(OC_OBJ_EXT))
	$(OCCC) $(OC_FLAGS) -o $@ $^


#############################################################################
#####
##### gen_graph

GEN_GRAPH_ML=\
	$(UTIL)/olmar_utils.$(OC_LIB_EXT) \
	$(GENERAL)/astgen_general.$(OC_LIB_EXT) \
	$(ASTGEN_OR)/astgen_lib.$(OC_LIB_EXT) \
	meta_ast_lib.$(OC_LIB_EXT) \
	gen_graph.ml


TOCLEAN += gen_graph
gen_graph: $(GEN_GRAPH_ML:.ml=.$(OC_OBJ_EXT))
	$(OCCC) $(OC_FLAGS) -o $@ $^

TOCLEAN += ast.ast.dot
ast.ast.dot: $(ASTGEN_OR)/ast.ast.oast generated_ast/ast_graph \
		ast_reflection_control.txt
	generated_ast/ast_graph -tr ast_reflection_control.txt \
		-o ast.ast.dot $(ASTGEN_OR)/ast.ast.oast 


#############################################################################
#####
##### ast_type_graph

AST_TYPE_GRAPH_ML=\
	$(UTIL)/olmar_utils.$(OC_LIB_EXT) \
	$(GENERAL)/astgen_general.$(OC_LIB_EXT) \
	$(ASTGEN_OR)/astgen_lib.$(OC_LIB_EXT) \
	meta_ast_lib.$(OC_LIB_EXT) \
	ast_type_graph.ml


TOCLEAN += ast_type_graph
ast_type_graph: $(AST_TYPE_GRAPH_ML:.ml=.$(OC_OBJ_EXT))
	$(OCCC) $(OC_FLAGS) -o $@ $^

TOCLEAN += ast.type.dot
ast.type.dot: $(ASTGEN_OR)/ast.ast.oast ast_type_graph \
		ast_reflection_control.txt
	./ast_type_graph -tr ast_reflection_control.txt \
		-o ast.type.dot $(ASTGEN_OR)/ast.ast.oast 

TOCLEAN += elsa.type.dot
elsa.type.dot: ast_type_graph $(ELSA_OR)/elsa.ast.oast \
		$(ELSA_OR)/elsa_reflection_control.txt
	./ast_type_graph -tr $(ELSA_OR)/elsa_reflection_control.txt \
		-o elsa.type.dot $(ELSA_OR)/elsa.ast.oast


############################################################################
#### Misc
#### 

.PHONY: clean
clean:
	rm -f $(TOCLEAN)
	$(MAKE) -C generated_ast clean
	$(MAKE) -C generated_elsa clean

.PHONY: distclean
distclean: clean
	rm -f Makefile config.status config.summary
	rm -f astmapfuns.mli


TOCLEAN += *.cmo *.cmxa *.cma *.a
%.cmo: %.ml
	$(OCC) $(OC_BYTE_FLAGS) $(OC_FLAGS) -c $<

TOCLEAN += *.cmx *.o
%.cmx: %.ml
	$(OCOPT) $(OC_FLAGS) -c $<

TOCLEAN += *.cmi
%.cmi: %.mli
	$(OCC) $(OC_FLAGS) -c $<


-include mldeps.mk

.PHONY: mldeps
depend: mldeps
	for d in generated_ast generated_elsa ; do $(MAKE) -C $$d $@; \
		if [ $$? -ne 0 ] ; then exit 1; fi; \
	done

mldeps:
	ocamldep $(OCDEPOPTS) $(OC_INC_FLAGS) *ml *mli > mldeps.mk


# re-create Makefile if Makefile.in has changed
TODISTCLEAN += Makefile
Makefile: Makefile.in ../config.status
	(cd ..; ./config.status -only meta)

