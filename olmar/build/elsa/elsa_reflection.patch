--- ../../../elsa/main.cc	2007-08-22 11:51:48.000000000 +0200
+++ main_or.cc	2007-10-20 12:50:00.000000000 +0200
@@ -1,17 +1,19 @@
 // main.cc            see license.txt for copyright and terms of use
 // entry-point module for a program that parses C++
 
 #include <iostream.h>     // cout
 #include <stdlib.h>       // exit, getenv, abort
 #include <fstream.h>      // ofstream
 
+#include "elsa_additions.h" // reflect_into_ocaml
+
 #include "trace.h"        // traceAddSys
 #include "parssppt.h"     // ParseTreeAndTokens, treeMain
 #include "srcloc.h"       // SourceLocManager
 #include "ckheap.h"       // malloc_stats
 #include "cc_env.h"       // Env
 #include "cc_ast.h"       // C++ AST (r)
 #include "cc_ast_aux.h"   // class LoweredASTVisitor
 #include "cc_lang.h"      // CCLang
 #include "parsetables.h"  // ParseTables
 #include "cc_print.h"     // PrintEnv
@@ -21,27 +23,24 @@
 #include "ptreeact.h"     // ParseTreeLexer, ParseTreeActions
 #include "sprint.h"       // structurePrint
 #include "strtokp.h"      // StrtokParse
 #include "smregexp.h"     // regexpMatch
 #include "cc_elaborate.h" // ElabVisitor
 #include "integrity.h"    // IntegrityVisitor
 #include "xml_file_writer.h" // XmlFileWriter
 #include "xml_reader.h"   // xmlDanglingPointersAllowed
 #include "xml_do_read.h"  // xmlDoRead()
 #include "xml_type_writer.h" // XmlTypeWriter
-extern "C" {
-#include <caml/memory.h>
-#include <caml/callback.h>// ocaml callbacks
-};
+
 
 bool caml_start_up_done = false;
-string ocamlAstFname;
+
 
 // little check: is it true that only global declarators
 // ever have Declarator::type != Declarator::var->type?
 // .. no, because it's true for class members too ..
 // .. it's also true of arrays declared [] but then inited ..
 // .. finally, it's true of parameters whose types get
 //    normalized as per cppstd 8.3.5 para 3; I didn't include
 //    that case below because there's no easy way to test for it ..
 // Intended to be used with LoweredASTVisitor
 class DeclTypeChecker : private ASTVisitor {
@@ -205,69 +204,20 @@
     cout << "usage: " << progName << " [options] input-file\n"
             "  options:\n"
             "    -tr <flags>:       turn on given tracing flags (comma-separated)\n"
          << (additionalInfo? additionalInfo : "");
     exit(argc==1? 0 : 2);    // error if any args supplied
   }
 
   return argv[1];
 }
 
-void marshal_to_ocaml(char ** argv, const char * inputFname, 
-		      TranslationUnit *unit){
-  CAMLparam0();
-  CAMLlocal2(ocaml_unit, of);
-  // Put the translation unit into a compilation unit.
-  CompilationUnit cu(inputFname);
-  cu.unit = unit;
-
-  if (!caml_start_up_done){
-    caml_startup(argv);
-
-    value * register_closure = caml_named_value("register_caml_callbacks");
-    xassert(register_closure);
-    caml_callback(*register_closure, Val_unit);
-    caml_start_up_done = true;
-  }
-  
-  { // start a block here to limit the livetime of ocaml_data
-    ToOcamlData ocaml_data;
-
-    ocaml_unit = cu.toOcaml(&ocaml_data);
-    xassert(ocaml_data.stack.size() == 0);
-    finish_circular_pointers(&ocaml_data);
-    cu.detachOcaml();
-  }
-#ifdef DEBUG_CAML_GLOBAL_ROOTS
-  check_caml_root_status();
-#endif
-
-  static value * marshal_callback = NULL;
-  if(marshal_callback == NULL)
-    marshal_callback = caml_named_value("marshal_translation_unit_callback");
-  xassert(marshal_callback);
-
-  if(ocamlAstFname.length() != 0)
-    of = caml_copy_string(toCStr(ocamlAstFname));
-  else
-    of = caml_copy_string(stringc << inputFname << ".oast");
-
-  // cerr << "call marshal_translation_unit_callback(...., " 
-  //      << String_val(of) << ")\n";
-  caml_callback2(*marshal_callback, ocaml_unit, of);
-
-  // cout << "wrote " 
-  //      << get_max_annotation() 
-  //      << " ocaml ast nodes" << endl << flush;
-  CAMLreturn0;
-}
-
 
 void doit(int argc, char **argv)
 {
   // I think this is more noise than signal at this point
   xBase::logExceptions = false;
 
   traceAddSys("progress");
   //traceAddSys("parse-tree");
 
   if_malloc_stats();
@@ -773,26 +723,24 @@
         vis = &loweredXmlVis;
       }
       unit->traverse(*vis);
     }
 
     cout << endl;
     cout << "---- STOP ----" << endl;
     traceProgress() << "dsw xml print... done\n";
   }
 
-  // HT: marshal to ocaml
   long ocamlTime = 0;
-  if (tracingSys("marshalToOcaml")) {
+  {
     SectionTimer timer(ocamlTime);
-
-    marshal_to_ocaml(argv, inputFname, unit);
+    reflect_into_ocaml(argv, inputFname, unit);
   }
 
   // test AST cloning
   if (tracingSys("testClone")) {
     TranslationUnit *u2 = unit->clone();
 
     if (tracingSys("cloneAST")) {
       cout << "------- cloned AST --------\n";
       u2->debugPrint(cout, 0);
     }
