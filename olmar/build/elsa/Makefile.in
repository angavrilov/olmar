# Makefile for build/elsa
# see license.txt for copyright and terms of use


# directories of other software
ELSA_BASE_BASE :=@ELSA_BASE_BASE@
ELSA_BASE :=$(if $(patsubst /%,,$(ELSA_BASE_BASE))\
	,../../$(ELSA_BASE_BASE), $(ELSA_BASE_BASE))

SMBASE := $(ELSA_BASE)/smbase
AST := $(ELSA_BASE)/ast
ELKHOUND := $(ELSA_BASE)/elkhound
ELSA := $(ELSA_BASE)/elsa
GENERAL := ../general
ASTGEN := ../astgen
META := ../../meta

LIBSMBASE := $(SMBASE)/libsmbase.a
LIBAST      := $(AST)/libast.a
LIBELKHOUND := $(ELKHOUND)/libelkhound.a

# configure section
CXX := @CXX@
CONFCCFLAGS := @CCFLAGS@
OCC := @OCC@
OCCC := @OCCC@
OCOPT := @OCOPT@
OC_OBJ_EXT := @OC_OBJ_EXT@
OC_LIB_EXT := @OC_LIB_EXT@
OC_NATIVE := @OC_NATIVE@
OCDIR := @OCDIR@


# external tools
PERL := perl
DEP := $(PERL) $(SMBASE)/depend.pl


# flags for the C++ compiler (and preprocessor)
CCFLAGS := $(CONFCCFLAGS) -Woverloaded-virtual -I$(SMBASE) -I$(AST) -I$(ELKHOUND) -I$(ELSA) -I$(OCDIR) -I$(GENERAL)

# flags for the linker
libraries := $(LIBELKHOUND) $(LIBAST) $(LIBSMBASE)
LDFLAGS := -g -Wall $(libraries)


OC_OBJ_EXT := cmx
OC_LIB_EXT := cmxa
OC_COMP_FLAGS := -w Ae
OC_INC_FLAGS := -I $(GENERAL)
OC_FLAGS := $(OC_COMP_FLAGS) $(OC_INC_FLAGS)
OC_BYTE_FLAGS := -g
OCLIBS := -L $(OCDIR) -lasmrun -ldl
OCDEPOPTS := -native

OCDEBUG=0
ifeq ($(OCDEBUG),1)
  OCOPT := $(OCC) -g
  OCCC  := $(OCC) -g
  OCC   := $(OCC) -g
  OC_OBJ_EXT := cmo
  OC_LIB_EXT := cma
  OCLIBS := -L $(OCDIR) -lcamlrun -ldl
  OCDEPOPTS :=
endif


# main targets
first: stage_2
stage_1:
stage_2: quickreflectiontest
stage_3:

stage1: stage_1
stage2: stage_2
stage3: stage_2


# list of files to clean in 'clean' (etc.) targets
# (these get added to below)
TOCLEAN =

# # re-create the Makefile if Makefile.in has changed
# TODISTCLEAN += Makefile
# Makefile: Makefile.in config.status
# 	./config.status

# # reconfigure if the configure script has changed
# config.status: configure.pl $(SMBASE)/sm_config.pm
# 	./config.status -reconfigure


# compile .cc in this directory to a .o
TOCLEAN += *.o
TODEPCLEAN += *.d
%.o: %.cc
	$(CXX) -c -o $@ $< $(if $(findstring $*,$(GCOV_MODS)),$(GCOV_OPTS) )$(CCFLAGS)
	@$(DEP)   -o $@ $< $(if $(findstring $*,$(GCOV_MODS)),$(GCOV_OPTS) )$(CCFLAGS) >$*.d

TOCLEAN += *.cmo *.cmi *.cmx *.o *.cmxa *.cma *.a
%.cmo: %.ml
	$(OCC) $(OC_BYTE_FLAGS) $(OC_FLAGS) -c $<

%.cmx: %.ml
	$(OCOPT) $(OC_FLAGS) -c $<

%.cmi: %.mli
	$(OCC) $(OC_FLAGS) -c $<

-include mldeps.mk


MLDISCARD := \
	oast_header_start.ml

.PHONY: mldeps
depend: mldeps
mldeps:
	ocamldep $(OCDEPOPTS) $(OC_INC_FLAGS) \
		`find . -name \*.ml -o -name \*.mli |\
			egrep -v $(MLDISCARD)` > mldeps.mk


#############################################################################
#####
##### elsa oast generation
#####
#############################################################################


.PHONY: cc_ast_patch
cc_ast_patch:
	diff -U 10 $(ELSA)/cc.ast cc.ast > cc.ast.patch; true

TOCLEAN += cc.ast
cc.ast: $(ELSA)/cc.ast cc.ast.patch
	patch -i cc.ast.patch -o cc.ast $(ELSA)/cc.ast

.PHONY: cc_tcheck_ast_patch
cc_tcheck_ast_patch:
	diff -U 10 $(ELSA)/cc_tcheck.ast cc_tcheck.ast > cc_tcheck.ast.patch; \
		true

cc_tcheck.ast: $(ELSA)/cc_tcheck.ast cc_tcheck.ast.patch
	patch -i cc_tcheck.ast.patch -o cc_tcheck.ast $(ELSA)/cc_tcheck.ast


ELSA_AST_FILES :=\
	cc.ast \
	cc_tcheck.ast \
	$(ELSA)/cc_print.ast \
	$(ELSA)/cfg.ast \
	$(ELSA)/cc_elaborate.ast \
	$(ELSA)/gnu.ast \
	$(ELSA)/kandr.ast \
	./cc_type.ast


# run astgen_or to get the elsa.ast syntaxtree in ocaml
ELSA_AST_GEN_FILES := elsa.ast.oast
TOCLEAN += elsa.ast.oast
elsa.ast.oast: $(ELSA_AST_FILES) $(ASTGEN)/astgen_or
	$(ASTGEN)/astgen_or -oelsa.ast $(ELSA_AST_FILES)
	rm elsa.ast.h elsa.ast.cc


#############################################################################
#####
#####  check elsa oast
#####
#############################################################################


.PHONY: check_elsa_oast
check_elsa_oast: elsa.ast.oast $(META)/check_oast
	$(META)/check_oast -ast elsa.ast.oast


elsa.type.dot: elsa.ast.oast elsa_reflection_control.txt $(META)/ast_type_graph
	$(META)/ast_type_graph -o elsa.type.dot \
		-tr elsa_reflection_control.txt elsa.ast.oast


#############################################################################
#####
#####  all.ast
#####
#############################################################################


all.ast: $(ELSA_AST_FILES) 
	if [ -f all.ast ] ; then \
		line1=$$(head -1 all.ast); echo $$line1 > all.ast; \
	else \
		echo "// all.ast \$$Revision$$" >> all.ast; \
	fi
	for f in $^ ; do \
		echo "//=========================== start of $$f" >> all.ast; \
		cat $$f >> all.ast; \
		echo "//=========================== end  of  $$f" >> all.ast; \
	done



#############################################################################
#####
##### elsa reflection code
#####
#############################################################################

ELSA_REFLECTION_FILES := \
	elsa_reflect_type.ml \
	elsa_reflect_ocaml_reflect.cc \
	elsa_reflect_ocaml_reflect.h

TOCLEAN += $(ELSA_REFLECTION_FILES)
$(ELSA_REFLECTION_FILES): elsa.ast.oast elsa_reflection_control.txt \
		$(META)/gen_reflection 
	$(META)/gen_reflection elsa.ast.oast \
		-tr elsa_reflection_control.txt \
		-o elsa_reflect


TOCLEAN += elsa_oast_header.ml
elsa_oast_header.ml: elsa_oast_header_start.ml \
		$(GENERAL)/oast_header_trailer.ml all.ast
	rm -f $@
	cat elsa_oast_header_start.ml >> $@
	head -1 all.ast | tr "." " " | \
		(read -a aa; echo -n $${aa[5]}) >> $@
	echo -e '\n#1' "\"$(realpath $(GENERAL)/oast_header_trailer.ml)\"" >> $@
	cat $(GENERAL)/oast_header_trailer.ml >> $@




# List of ml modules needed by astgen. They are all combined 
# into one elsa_ml_object.o file.

ELSA_ML := \
	elsa_ml_base_types.ml \
	elsa_ml_flag_types.ml \
	elsa_reflect_type.ml \
	elsa_ast_util.ml \
	elsa_oast_header.ml

elsa_lib.cmxa: $(ELSA_ML:.ml=.cmx)
	$(OCOPT) -o $@ -a $^

elsa_lib.cma: $(ELSA_ML:.ml=.cmo)
	$(OCC) -o $@ -a $^

ELSA_ML_OBJECT := \
	$(GENERAL)/astgen_general.$(OC_LIB_EXT) \
	elsa_lib.$(OC_LIB_EXT) \
	elsa_ml_base_reflection.ml \
	elsa_ml_flag_constructors.ml \
	elsa_caml_callbacks.ml


elsa_ml_object.o: $(ELSA_ML_OBJECT:.ml=.$(OC_OBJ_EXT))
	$(OCCC) -output-obj -o $@ $(OC_INC_FLAGS) $^


elsa_reflect_type.cmx: elsa_ml_base_types.cmx elsa_ml_flag_types.cmx
elsa_reflect_type.cmo: elsa_ml_base_types.cmo elsa_ml_flag_types.cmo


.PHONY: elsa_patch
elsa_patch:
	diff -U 10 $(ELSA)/main.cc main_or.cc > elsa_reflection.patch; true

TOCLEAN += main_or.cc
main_or.cc: $(ELSA)/main.cc elsa_reflection.patch
	patch -i elsa_reflection.patch -o main_or.cc $(ELSA)/main.cc


LEXER_OBJS := \
  $(ELSA)/cc_lang.o \
  $(ELSA)/baselexer.o \
  $(ELSA)/lexer.o \
  $(ELSA)/lexer.yy.o \
  $(ELSA)/cc_tokens.o

XML_OBJS := \
  $(ELSA)/xml_lexer.yy.o \
  $(ELSA)/xml_lexer.o \
  $(ELSA)/xml_reader.o \
  $(ELSA)/xml_writer.o \
  $(ELSA)/xml_file_reader.o \
  $(ELSA)/xml_file_writer.o \
  $(ELSA)/xml_type_reader.o \
  $(ELSA)/xml_type_writer.o \
  $(ELSA)/xml_ast_reader.o \
  $(ELSA)/id_obj_dict.o \
  $(ELSA)/xml_do_read.o

EXT_OBJS := \
  $(ELSA)/gnu.o \
  $(ELSA)/kandr.o


LEGACY_OBJ := \
  elsa_ml_object.o \
  $(AST)/ocamlhelp.o


CCPARSE_OBJS := \
  $(LEGACY_OBJ) \
  $(GENERAL)/ocaml_reflection_base.o \
  elsa_base_types.o \
  elsa_flag_types.o \
  elsa_reflect_ocaml_reflect.o \
  elsa_additions.o \
  $(ELSA)/cc_ocaml.o \
  $(ELSA)/variable.o \
  $(ELSA)/cc_type.o \
  $(ELSA)/cc.ast.gen.o \
  $(ELSA)/mtype.o \
  $(ELSA)/integrity.o \
  $(ELSA)/astvisit.o \
  $(ELSA)/template.o \
  $(ELSA)/notopt.o \
  $(ELSA)/cc_env.o \
  $(ELSA)/cc_tcheck.o \
  $(ELSA)/const_eval.o \
  $(ELSA)/implint.o \
  $(ELSA)/serialno.o \
  $(ELSA)/cc_scope.o \
  $(ELSA)/cc_elaborate.o \
  $(ELSA)/ast_build.o \
  $(LEXER_OBJS) \
  $(XML_OBJS) \
  $(EXT_OBJS) \
  $(ELSA)/builtinops.o \
  $(ELSA)/cfg.o \
  $(ELSA)/sprint.o \
  $(ELSA)/mangle.o \
  $(ELSA)/cc_err.o \
  $(ELSA)/stdconv.o \
  $(ELSA)/implconv.o \
  $(ELSA)/overload.o \
  $(ELSA)/typelistiter.o \
  $(ELSA)/cc.gr.gen.o \
  $(ELSA)/parssppt.o \
  $(ELSA)/cc_flags.o \
  $(ELSA)/cc_print.o \
  $(ELSA)/cc_ast_aux.o \
  $(ELSA)/lookupset.o \
  $(ELSA)/ccparse.o

-include $(CCPARSE_OBJS:.o=.d) main_or.d


# parser binary
TOCLEAN += ccparse_or
ccparse_or: $(CCPARSE_OBJS) main_or.o $(libraries)
	$(CXX) -o $@ $(CCPARSE_OBJS) main_or.o $(LDFLAGS) $(OCLIBS)


TOCLEAN += quickreflectiontest
quickreflectiontest: ccparse_or
	./ccparse_or $(ELSA)/in/t0001.cc
	touch quickreflectiontest
	@echo BUILD FINISHED


#############################################################################
#####
##### Misc
#####
#############################################################################

# delete regrtest files too
TOCLEAN += ccparse multitest.pl five-errors idemcheck chop_out
TOCLEAN += config.summary

clean:
	rm -f core
	rm -f $(TOCLEAN)
	find -L . -name \*.oast -exec rm {} \;
	find -L . -name \*.oast.dot -exec rm {} \;
	find -L . -name \*.oast.ps -exec rm {} \;

# return to pristine checked-out state
distclean: clean
	rm -f $(TODISTCLEAN)


# re-create Makefile if Makefile.in has changed
TODISTCLEAN += Makefile
Makefile: Makefile.in ../../config.status
	(cd ../..; ./config.status -only build/elsa)

