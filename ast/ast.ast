// ast.ast
// ast definition for an ast definition

verbatim {
  #include "str.h"         // string
}

// the entire specification
class ASTSpecFile (ASTList<ToplevelForm> forms);

class ToplevelForm {
  // code to be copied verbatim into the generated .h file
  -> TF_verbatim(string code);
                                    
  // a superclass, and a list of subclasses ("constructors")
  -> TF_class(ASTClass super,
              ASTList<ASTClass> ctors) {
       public bool hasChildren() const { return ctors.isNotEmpty(); };
     }
}

// a definition of a grammar terminal or nonterminal
class ASTClass (string name,
                ASTList<CtorArg> args,
                ASTList<UserDecl> decls) {
  // the name of the enum constant denoting this ctor, as distinguished
  // from its sibling ctors
  public string kindName() const;
}

verbatim {
  // specifies what kind of userdecl this is; pub/priv/prot are uninterpreted
  // class members with the associated access control; ctor and dtor are
  // code to be inserted into the ctor or dtor, respectively
  enum AccessCtl { AC_PUBLIC, AC_PRIVATE, AC_PROTECTED, AC_CTOR, AC_DTOR };

  // map the enum value to a string like "AC_PUBLIC"
  string toString(AccessCtl acc);      // defined in ast.cc
}

// verbatim declarations, plus an access qualifier, to be
// copied into the a class declaration
class UserDecl (AccessCtl access, string code);

// something that has to be passed to create a constructor
class CtorArg (bool owner, string type, string name);




