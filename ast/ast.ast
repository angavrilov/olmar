// ast.ast
// ast definition for an ast definition

verbatim {
  #include "astlist.h"     // ASTList
  #include "str.h"         // string
}

// the entire specification
class ASTSpecFile (ASTList<ToplevelForm> forms);

class ToplevelForm {
  // code to be copied verbatim into the generated .h file
  -> TF_verbatim(string code);

  // a definition of a grammar nonterminal
  -> ASTClass(string name,
              ASTList<CtorArg> superCtor,
              ASTList<UserDecl> decls,
              ASTList<ASTCtor> ctors) {
       public bool hasChildren() const { return ctors.isNotEmpty(); };
     }
}

verbatim {
  enum AccessCtl { AC_PUBLIC, AC_PRIVATE, AC_PROTECTED };
  string toString(AccessCtl acc);      // defined in ast.cc
}

// verbatim declarations, plus an access qualifier, to be
// copied into the a class declaration
class UserDecl (AccessCtl access, string code);

// one of possibly several alternatives for the enclosing class
class ASTCtor (string name,
               ASTList<CtorArg> args,
               ASTList<UserDecl> decls) {
  // the name of the enum constant denoting this ctor, as distinguished
  // from its sibling ctors
  public string kindName() const;
}

// something that has to be passed to create a constructor
class CtorArg (bool owner, string type, string name);




