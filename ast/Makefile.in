# Makefile.in for ast
# see license.txt for copyright and terms of use

# main targets
all: astgen libast.a example.o ext1.o


# directories of other software
SMBASE := @SMBASE@
LIBSMBASE := $(SMBASE)/libsmbase.a


# C++ compiler, etc.
CXX := g++

# flags for the C and C++ compilers (and preprocessor)
CCFLAGS := @CCFLAGS@ -I$(SMBASE)

# flags for the linker
LDFLAGS := -g -Wall $(LIBSMBASE)


# some other tools
AR     := ar
RANLIB := ranlib


# compile .cc to .o
%.o: %.cc
	$(CXX) -c -o $@ $< $(CCFLAGS)
	@$(SMBASE)/depend.pl -o $@ $< $(CCFLAGS) > $*.d


# remake the generated Makefile if its inputs have changed
Makefile: Makefile.in
	./config.status


# ---------------------- intermediate files -------------------
# unfortunately, the way bison.simple declares YYSTYPE precludes a proper
# declaration of yylex(), unless I modify it as below; the 'grep' is so
# I have a .h file without the union, since the union refers to types
# whose declarations I'd like to avoid spreading everywhere
agrampar.tab.cc agrampar.tab.h agrampar.codes.h: agrampar.y ast.hand.h ast.ast.h agrampar.h
	bison -d -v agrampar.y
	mv -f agrampar.tab.c tmp
	sed 's/typedef union {/typedef union YYSTYPE {/' < tmp > agrampar.tab.cc
	mv -f agrampar.tab.h tmp
	sed 's/typedef union {/typedef union YYSTYPE {/' < tmp > agrampar.tab.h
	rm tmp
	grep '# *define' agrampar.tab.h > agrampar.codes.h

# have to use sed to change the forward declaration of 'istream'
# into an #include, so the std:: namespace doesn't cause a problem
agramlex.yy.cc: gramlex.h agramlex.lex agrampar.codes.h
	flex -o$@ agramlex.lex
	mv $@ agramlex.tmp
	sed 's/class istream;/#include <iostream.h>/' <agramlex.tmp >$@
	rm agramlex.tmp


# ------------------------- astgen ---------------------
ASTGEN_OBJS := \
  gramlex.o \
  agrampar.tab.o \
  ccsstr.o \
  agramlex.yy.o \
  embedded.o \
  ast.hand.o \
  asthelp.o \
  strtable.o \
  agrampar.o  \
  astgen.o

# ast.ast.cc is a dependency here but not explicitly in the command
# line because ast.hand.cc #includes it
astgen: $(ASTGEN_OBJS) ast.ast.cc $(LIBSMBASE) 
	$(CXX) -o astgen $(ASTGEN_OBJS) $(LDFLAGS)


# ---------------------- run astgen ----------------------
# simple ast spec file
example.cc: astgen example.ast
	./astgen example.ast

exampletest: exampletest.o example.o asthelp.o locstr.o strtable.o $(LIBSMBASE)
	$(LINK) -o $@ $^

# simple extension
ext1.cc: astgen example.ast ext1.ast
	./astgen -oext1 example.ast ext1.ast

# If you want to regenerate astgen's own ast file, you do
#   ./astgen -oast.ast ast.ast
#
# This rule is *not* in the Makefile because if you do it
# without thinking you can break the self-bootstrapping
# (and be forced to restore your ast.ast.{cc,h} from the
# distribution tarball or from CVS).


# ------------------------ libast.a -------------------
# this library is the set of support modules required for
# using astgen-generated code, or are simply useful generally
# but don't belong in smbase
LIB_OBJS := \
  gramlex.o \
  ccsstr.o \
  embedded.o \
  asthelp.o \
  strtable.o

libast.a: $(LIB_OBJS)
	$(AR) -r $@ $(LIB_OBJS)
	$(RANLIB) $@


# ------------------------ misc ---------------------
check:
	@echo "ast doesn't have a useful 'make check' at this time"

clean:
	rm -f *.o agrampar.tab.* tmp *.d
	rm -f agrampar astgen ccsstr towner exampletest libast.a
	rm -f agrampar.{codes.h,output} agramlex.yy.cc

distclean: clean
	rm -f Makefile config.status config.summary

# test for owner
towner: owner.h towner.cc
	$(COMPILE) towner.cc
	$(LINK) -o towner towner.o


