// ast.hand.cc
// hand-generated form of what I want to be autogenerated later

#include "ast.hand.h"      // this module
#include "strutil.h"       // quoted


// ----------- debugPrint helpers -----------------------
ostream &ind(ostream &os, int indent)
{
  while (indent--) {
    os << " ";
  }
  return os;
}


#define HEADER(clsname)               \
  ind(os, indent) << #clsname ":\n";  \
  indent += 2   /* user ; */


#define PRINT_STRING(var) \
  debugPrintStr(var, #var, os, indent)    /* user ; */

void debugPrintStr(string const &s, char const *name,
                   ostream &os, int indent)
{
  ind(os, indent) << name << " = " << quoted(s) << "\n";
}


#define PRINT_LIST(T, list) \
  debugPrintList(list, #list, os, indent)     /* user ; */

template <class T>
void debugPrintList(ASTList<T> const &list, char const *name,
                    ostream &os, int indent)
{
  ind(os, indent) << name << ":\n";
  {
    FOREACH_ASTLIST(T, list, iter) {
      iter.data()->debugPrint(os, indent+2);
    }
  }
}


#define PRINT_GENERIC(var) \
  ind(os, indent) << #var << " = " << toString(var) << "\n"   /* user ; */


#define PRINT_BOOL(var) \
  ind(os, indent) << #var << " = " << (var? "true" : "false") << "\n"   /* user ; */


// ------------------- ASTSpecFile ----------------------
void ASTSpecFile::debugPrint(ostream &os, int indent) const
{
  HEADER(ASTSpecFile);

  PRINT_LIST(ToplevelForm, forms);
}


// ----------------- ToplevelForm -------------------
void ToplevelForm::debugPrint(ostream &os, int indent) const
{}

#if 0
TF_verbatim::TF_verbatim(string _code)
  : code(_code)
{}
#endif // 0

void TF_verbatim::debugPrint(ostream &os, int indent) const
{
  HEADER(TF_verbatim);

  ToplevelForm::debugPrint(os, indent);

  PRINT_STRING(code);
}

void ASTClass::debugPrint(ostream &os, int indent) const
{
  HEADER(ASTClass);

  ToplevelForm::debugPrint(os, indent);

  PRINT_STRING(name);
  PRINT_LIST(CtorArg, superCtor);
  PRINT_LIST(UserDecl, decls);
  PRINT_LIST(ASTCtor, ctors);
}


// ------------------ UserDecl --------------------
void UserDecl::debugPrint(ostream &os, int indent) const
{
  HEADER(UserDecl);

  PRINT_GENERIC(access);
  PRINT_STRING(code);
}


// -------------------- ASTCtor -----------------
void ASTCtor::debugPrint(ostream &os, int indent) const
{
  HEADER(ASTCtor);

  PRINT_STRING(name);
  PRINT_LIST(CtorArg, args);
  PRINT_LIST(UserDecl, decls);
}


// ------------------ CtorArg -------------------
void CtorArg::debugPrint(ostream &os, int indent) const
{
  HEADER(CtorArg);

  PRINT_BOOL(owner);
  PRINT_STRING(type);
  PRINT_STRING(name);
}








