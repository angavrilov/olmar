// cexp2.gr
// subgrammar for C expressions; experimental syntax

// ------ tokens -------
terminals {
  // grab the lexer's token list
  include("cc.tok")
}
// ------ end of tokens ------


nonterm Input -> Expr L2_EOF;


// primary expressions
nonterm Expr {
  attr prec;              // precedence of binding (topmost) operator in expression

  -> L2_NAME {
    action  prec := 100;      // higher precedence than anything else
  }

  -> left:Expr op:Binop right:Expr {
    action  prec := op.prec;

    condition  this.prec <= left.prec;             // precedence
    condition  this.prec <= right.prec;            // more precedence
    condition  op.leftAssoc == 1 ?
                 this.prec < right.prec :          // left associative
                 this.prec < left.prec;            // right associative
  }
}


// an operator in a binary expression
nonterm Binop {
  attr prec;             // precedence of operator; higher value binds more tightly
  attr leftAssoc;        // 1 means left-associative, 0 means right-associative

  // I wanted to say it in one place, but my implementation wasn't
  // right, and I don't want to fix it just now
  //action  prec := sequence(60 /*start value*/, -4 /*increment*/);

  // all have left precedence by default; can override individually
  action  leftAssoc := 1;


  // highest precedence
  formGroup { action prec:=60;   -> "*" | "/" | "%"           ;   }
  formGroup { action prec:=56;   -> "+" | "-"                 ;   }
  formGroup { action prec:=52;   -> "<<"| ">>"                ;   }
  formGroup { action prec:=48;   -> "<" | ">" | "<="| ">="    ;   }
  // alternative syntax
  formGroup { action prec:=44;   -> "=="; -> "!=";                      }
  formGroup { action prec:=40;   -> "&";                                }
  formGroup { action prec:=36;   -> "^";                                }
  formGroup { action prec:=32;   -> "|";                                }
  formGroup { action prec:=28;   -> "&&";                               }
  formGroup { action prec:=24;   -> "||";                               }
  // lowest precedence

// alternative syntax
//    // highest precedence
//    -> "*" | "/" | "%"             ;
//    -> "+" | "-"                   ;
//    -> "<<" | ">>"                 ;
//    -> "<" | ">" | "<=" | ">="     ;
//    -> "==" | "!="                 ;
//    -> "&"                         ;
//    -> "^"                         ;
//    -> "|"                         ;
//    -> "&&"                        ;
//    -> "||"                        ;
//    // lowest precedence
}
