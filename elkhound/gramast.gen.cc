// gramast.gen.cc
// *** DO NOT EDIT ***
// automatically generated by astgen, from gramast.ast

#include "ast.gen.h"      // this module


// ------------------ GrammarAST -------------------
// *** DO NOT EDIT ***
GrammarAST::~GrammarAST()
{
  forms.deleteAll();
}

void GrammarAST::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(GrammarAST);

  PRINT_LIST(ToplevelForm, forms);
}


// ------------------ ToplevelForm -------------------
// *** DO NOT EDIT ***
ToplevelForm::~ToplevelForm()
{
}

void ToplevelForm::debugPrint(ostream &os, int indent) const
{
}

DEFN_AST_DOWNCASTS(ToplevelForm, TF_terminals, TF_TERMINALS)

TF_terminals::~TF_terminals()
{
  terms.deleteAll();
}

void TF_terminals::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(TF_terminals);

  ToplevelForm::debugPrint(os, indent);

  PRINT_LIST(TermDecl, terms);
}

DEFN_AST_DOWNCASTS(ToplevelForm, TF_nonterminal, TF_NONTERMINAL)

TF_nonterminal::~TF_nonterminal()
{
  baseClasses.deleteAll();
  elts.deleteAll();
}

void TF_nonterminal::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(TF_nonterminal);

  ToplevelForm::debugPrint(os, indent);

  PRINT_STRING(name);
  PRINT_LIST(string, baseClasses);
  PRINT_LIST(NTBodyElt, elts);
}

DEFN_AST_DOWNCASTS(ToplevelForm, TF_lit, TF_LIT)

TF_lit::~TF_lit()
{
  delete lit;
}

void TF_lit::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(TF_lit);

  ToplevelForm::debugPrint(os, indent);

  PRINT_SUBTREE(lit);
}

DEFN_AST_DOWNCASTS(ToplevelForm, TF_treeNodeBase, TF_TREENODEBASE)

TF_treeNodeBase::~TF_treeNodeBase()
{
}

void TF_treeNodeBase::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(TF_treeNodeBase);

  ToplevelForm::debugPrint(os, indent);

  PRINT_STRING(baseClassName);
}


// ------------------ TermDecl -------------------
// *** DO NOT EDIT ***
TermDecl::~TermDecl()
{
}

void TermDecl::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(TermDecl);

  PRINT_GENERIC(code);
  PRINT_STRING(name);
  PRINT_STRING(alias);
}


// ------------------ NTBodyElt -------------------
// *** DO NOT EDIT ***
NTBodyElt::~NTBodyElt()
{
}

void NTBodyElt::debugPrint(ostream &os, int indent) const
{
}

DEFN_AST_DOWNCASTS(NTBodyElt, NT_attr, NT_ATTR)

NT_attr::~NT_attr()
{
}

void NT_attr::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(NT_attr);

  NTBodyElt::debugPrint(os, indent);

  PRINT_STRING(name);
}

DEFN_AST_DOWNCASTS(NTBodyElt, NT_decl, NT_DECL)

NT_decl::~NT_decl()
{
}

void NT_decl::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(NT_decl);

  NTBodyElt::debugPrint(os, indent);

  PRINT_STRING(declBody);
}

DEFN_AST_DOWNCASTS(NTBodyElt, NT_elt, NT_ELT)

NT_elt::~NT_elt()
{
  delete elt;
}

void NT_elt::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(NT_elt);

  NTBodyElt::debugPrint(os, indent);

  PRINT_SUBTREE(elt);
}

DEFN_AST_DOWNCASTS(NTBodyElt, NT_lit, NT_LIT)

NT_lit::~NT_lit()
{
  delete lit;
}

void NT_lit::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(NT_lit);

  NTBodyElt::debugPrint(os, indent);

  PRINT_SUBTREE(lit);
}


// ------------------ GroupElement -------------------
// *** DO NOT EDIT ***
GroupElement::~GroupElement()
{
}

void GroupElement::debugPrint(ostream &os, int indent) const
{
}

DEFN_AST_DOWNCASTS(GroupElement, GE_form, GE_FORM)

GE_form::~GE_form()
{
  rhs.deleteAll();
  elts.deleteAll();
}

void GE_form::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(GE_form);

  GroupElement::debugPrint(os, indent);

  PRINT_LIST(RHSElt, rhs);
  PRINT_LIST(FormBodyElt, elts);
}

DEFN_AST_DOWNCASTS(GroupElement, GE_formGroup, GE_FORMGROUP)

GE_formGroup::~GE_formGroup()
{
  elts.deleteAll();
}

void GE_formGroup::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(GE_formGroup);

  GroupElement::debugPrint(os, indent);

  PRINT_LIST(GroupElements, elts);
}

DEFN_AST_DOWNCASTS(GroupElement, GE_fbe, GE_FBE)

GE_fbe::~GE_fbe()
{
  delete e;
}

void GE_fbe::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(GE_fbe);

  GroupElement::debugPrint(os, indent);

  PRINT_SUBTREE(e);
}


// ------------------ FormBodyElement -------------------
// *** DO NOT EDIT ***
FormBodyElement::~FormBodyElement()
{
}

void FormBodyElement::debugPrint(ostream &os, int indent) const
{
}

DEFN_AST_DOWNCASTS(FormBodyElement, FB_action, FB_ACTION)

FB_action::~FB_action()
{
  delete expr;
}

void FB_action::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(FB_action);

  FormBodyElement::debugPrint(os, indent);

  PRINT_STRING(name);
  PRINT_GENERIC(expr);
}

DEFN_AST_DOWNCASTS(FormBodyElement, FB_condition, FB_CONDITION)

FB_condition::~FB_condition()
{
  delete condExpr;
}

void FB_condition::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(FB_condition);

  FormBodyElement::debugPrint(os, indent);

  PRINT_GENERIC(condExpr);
}

DEFN_AST_DOWNCASTS(FormBodyElement, FB_treeCompare, FB_TREECOMPARE)

FB_treeCompare::~FB_treeCompare()
{
  delete decideExpr;
}

void FB_treeCompare::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(FB_treeCompare);

  FormBodyElement::debugPrint(os, indent);

  PRINT_STRING(leftName);
  PRINT_STRING(rightName);
  PRINT_GENERIC(decideExpr);
}

DEFN_AST_DOWNCASTS(FormBodyElement, FB_funDecl, FB_FUNDECL)

FB_funDecl::~FB_funDecl()
{
}

void FB_funDecl::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(FB_funDecl);

  FormBodyElement::debugPrint(os, indent);

  PRINT_STRING(funDeclBody);
}

DEFN_AST_DOWNCASTS(FormBodyElement, FB_funDefn, FB_FUNDEFN)

FB_funDefn::~FB_funDefn()
{
}

void FB_funDefn::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(FB_funDefn);

  FormBodyElement::debugPrint(os, indent);

  PRINT_STRING(name);
  PRINT_STRING(funDefnBody);
}


// ------------------ RHSElt -------------------
// *** DO NOT EDIT ***
RHSElt::~RHSElt()
{
}

void RHSElt::debugPrint(ostream &os, int indent) const
{
}

DEFN_AST_DOWNCASTS(RHSElt, RH_ntref, RH_NTREF)

RH_ntref::~RH_ntref()
{
}

void RH_ntref::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(RH_ntref);

  RHSElt::debugPrint(os, indent);

  PRINT_STRING(tag);
  PRINT_STRING(ntname);
}

DEFN_AST_DOWNCASTS(RHSElt, RH_termref, RH_TERMREF)

RH_termref::~RH_termref()
{
}

void RH_termref::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(RH_termref);

  RHSElt::debugPrint(os, indent);

  PRINT_STRING(tag);
  PRINT_STRING(tokname);
}


// ------------------ LiteralCode -------------------
// *** DO NOT EDIT ***
LiteralCode::~LiteralCode()
{
}

void LiteralCode::debugPrint(ostream &os, int indent) const
{
}

DEFN_AST_DOWNCASTS(LiteralCode, LC_modifier, LC_MODIFIER)

LC_modifier::~LC_modifier()
{
}

void LC_modifier::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(LC_modifier);

  LiteralCode::debugPrint(os, indent);

  PRINT_STRING(codeKindTag);
  PRINT_STRING(funcToModify);
  PRINT_STRING(codeBody);
}

DEFN_AST_DOWNCASTS(LiteralCode, LC_standAlone, LC_STANDALONE)

LC_standAlone::~LC_standAlone()
{
}

void LC_standAlone::debugPrint(ostream &os, int indent) const
{
  PRINT_HEADER(LC_standAlone);

  LiteralCode::debugPrint(os, indent);

  PRINT_STRING(codeKindTag);
  PRINT_STRING(codeBody);
}


