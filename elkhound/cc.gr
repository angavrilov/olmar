// cc.gr
// my attempt to implement a grammar for C++

// I'm actually trying to use this single file for both C and C++;
// the C++ grammar should parse C ok


// grab list generated by lexer
terminals {
  include("cc.tok")
}


// declarations for semantic functions
prologue {
  #include "cc_env.h"    // Env
  #include "cc_tree.h"   // CCTreeNode
  #include "cc_cfg.h"    // CFG, etc.
}
treeNodeBase "CCTreeNode";


// dummy first rule
nonterm StartSymbol -> TranslationUnit L2_EOF;


// ------------- identifier ambiguity -------------------
// identifiers can play a number of roles, and this is the
// source of problems parsing C and C++
// (here, "variable" means variable or function; it names
// an object that exists at runtime)
nonterm HasName {
  fundecl string getName() const;
  fun getName = n.nameValue;
}
nonterm TypedefName : HasName -> n:L2_NAME   ;
nonterm EnumName : HasName -> n:L2_NAME      ;
nonterm EnumValueName : HasName -> n:L2_NAME ;     // called 'enumerator' in spec
nonterm ClassName : HasName -> n:L2_NAME     ;
nonterm TemplateName : HasName -> n:L2_NAME  ;
nonterm VariableName : HasName -> n:L2_NAME  ;
nonterm LabelName : HasName -> n:L2_NAME     ;


// ---------------- higher-level syntax -----------------
// the section labels that follow (like "A.3") are from the
// C++ standard document (should track down a proper reference..)

// ------ A.3 Basic Concepts ------
nonterm Checkable {
  // this does several jobs:
  //   - check type consistency, and report errors where
  //     inconsistencies are found
  //   - add new symbols to the environment, with their types
  fundecl void typeCheck();

  // this is the entry point from parents
  fundecl void callTypeCheck(Env *passedEnv);
  fun callTypeCheck {
    env = passedEnv;
    typeCheck();
  }

  // store a pointer to the environment in which this node's
  // names are to be interpreted
  datadecl Env *env;           // (serf)

  constructor {
    env = NULL;
  }

/*
  // the problem is I can't call 'typeCheck' unless I have
  // a C++ class from which they're derived.. I'll put that
  // on hold for now, because it's not perfectly clear just
  // how common it will be to want to automate the walk
  // like this...

  // default behavior is to simply check all (nonterminal) subtrees
  // (ideal would be to check only 'Checkable' ones, but right
  // now I have no runtime way to determine that)
  fun typeCheck {
    // for now, no disambiguation
    Reduction const *red = only();

    FOREACH_OBJLIST(TreeNode, red->children, iter) {
      if (iter.data()->isNonterm()) {
      }
    }
  }
*/

  // so for now default impl is to do nothing
  fun typeCheck {}
}

nonterm TranslationUnit : Checkable { 
  // simple indirection so I can print just the d's
  fundecl void printTree();

  -> empty {
    fun printTree {}      // NOP; never called
  }
  
  -> t:TranslationUnit d:Declaration {
    fun typeCheck {
      t.callTypeCheck(env);

      try {
        d.callTypeCheck(env);
      }
      catch (XSemanticError &x) {
        // error recovery; report and proceed
        env->report(x.err);
      }
      env->flushLocalErrors(cout);
    }

    fun printTree {
      if (tracingSys("parse-tree")) {
        // I really just want a sequence of declarations, so just
        // print d's tree
        d.printParseTree(cout, 2 /*indent*/, true /*asSexp*/);
        cout << endl;
      }
    }
  }

  constructor {
    // inherited ctor ... (hack!)
    env = NULL;

    // if we just constructed the "-> empty" production,
    // do nothing special
    if (red->children.isEmpty()) {
      return;
    }

    // cast context argument
    Env *env = (Env*)(tree.extra);

    // run the analysis on this piece of the tree
    callTypeCheck(env);

    // this is, more or less, the product of the analysis
    printTree();

    // ---- throw away most of the tree now ----
    // grab a pointer to the left child reduction, which should be
    // an instance of "TranslationUnit -> empty"
    NonterminalNode &leftNT = red->children.nth(0)->asNonterm();
    Reduction *leftReduction = leftNT.only();

    // throw away the reduction in this node
    reductions.deleteAll();

    // move the reduction in the left child to here
    leftNT.reductions.removeItem(leftReduction);
    reductions.append(leftReduction);

    // remove this node from the global list of tree nodes
    // except, it hasn't been added yet..
    //tree.treeNodes.removeItem(this);

    // blow away all the other tree nodes
    tree.treeNodes.deleteAll();

    // put back just the saved one
    // don't need to because it hasn't been added yet; it will
    // be once we return ...
    //tree.treeNodes.append(this);
  }
}

// ------ A.4 Expressions ------
nonterm HasVarsDecld {
  // check that all the used variables are declared, and report
  // those that are unused
  fundecl void varsDecld(Env *env);
  fun varsDecld {}
}

// base class for expressions
nonterm ExprBase : HasVarsDecld {
  // return the integer this expression evaluates to at compile time
  fundecl int intEval(Env *env);
  fun intEval { throwError("not a constant integer expression"); }
}


nonterm PrimaryExpression : ExprBase {
  -> e:Literal                  { fun intEval = e.intEval(env); }
  -> "this"                     {}
  
  formGroup {
    fun varsDecld { e.varsDecld(env); }
    -> "(" e:Expression ")"       { fun intEval = e.intEval(env); }
    -> e:PQVarName                {}
  }
  
  // GNU extension
  -> "(" s:CompoundStatement ")"
    { fun varsDecld { s.callTypeCheck(env); } }
}

nonterm Literal : ExprBase {
  -> i:L2_INT_LITERAL    { fun intEval = i.intValue; }
  -> L2_FLOAT_LITERAL | L2_STRING_LITERAL | L2_CHAR_LITERAL ;
}


// base class for nonterminals that yield a part of a
// string that describes a type
nonterm HasTypeName {
  // return either a complete type description, or part
  // of one to be concatenated in context
  fundecl string typeName();

  // default implementation: just yield the original input
  fun typeName = unparseString();
}

nonterm HasDeclName {
  // retrieve the name of the variable being declared
  fundecl string getDeclName();

  // again, for now, take the easy road
  fun getDeclName = unparseString();
}


// possibly-qualified name; essentially spec's id-expression
// missing: template-id because I don't know what that is
nonterm PQVarName : HasTypeName, HasDeclName, HasVarsDecld {
  // 'colonColon' attribute of PQVarName and Qualifier: set to 1 when "::" is
  // the leftmost token in the tree matched; this is important because
  // declarators aren't allowed to have the bare "::" qualifier
  attr colonColon;        // true if a bare "::" is in front

  -> n:VariableName {
    action colonColon := 0;
    fun varsDecld {
      if (!env->isDeclaredVar(n.getName())) {
        SemanticError err(this, SE_UNDECLARED_VAR);
        err.varName = n.getName();
        env->report(err);
      }
    }
  }

  fun varsDecld {
    // each of the remaining rules requires some more sophisticated
    // way of naming symbols
    reportError(env, "varsDecld unimplemented");
  }

  -> OperatorFunctionId     { action colonColon := 0; }
  -> ConversionFunctionId   { action colonColon := 0; }
  -> "~" ClassName          { action colonColon := 0; }
  -> q:Qualifier rhs:PQVarName  {
    // this PQVarName is preceeded by :: if the Qualifier is
    action colonColon := q.colonColon;

    // can't put any more qualifiers on to left of ::
    condition rhs.colonColon == 0;
  }
}

nonterm Qualifier {
  attr colonColon;     // true for leading "::"

  -> "::"              { action colonColon := 1; }
  -> ClassName "::"    { action colonColon := 0; }
}


nonterm PostfixExpression : ExprBase {
  -> e:PrimaryExpression { 
    fun intEval = e.intEval(env);
    fun varsDecld { e.varsDecld(env); }
  }
                                                         
  // array access
  -> p:PostfixExpression "[" e:Expression "]" {
    fun varsDecld {
      p.varsDecld(env);
      e.varsDecld(env);
    }
  }

  // fn call
  -> p:PostfixExpression "(" e:ExpressionListOpt ")" {
    fun varsDecld {
      p.varsDecld(env);
      e.varsDecld(env);
    }
  }

  // field access
  -> p:PostfixExpression "." n:PQVarName {
    fun varsDecld {
      p.varsDecld(env);
      n.varsDecld(env);
    }
  }

  // deref + field access
  -> p:PostfixExpression "->" n:PQVarName {
    fun varsDecld {
      p.varsDecld(env);
      n.varsDecld(env);
    }
  }

  -> p:PostfixExpression "++" | p:PostfixExpression "--" 
    { fun varsDecld { p.varsDecld(env); } }

  // pulled these two because other rules supercede them
  //-> PostfixExpression "." PseudoDestructorName           ; // explicit dtor call
  //-> PostfixExpression "->" PseudoDestructorName          ;

  formGroup {
    fun varsDecld { e.varsDecld(env); }

    -> "dynamic_cast"     "<" TypeId ">" "(" e:Expression ")" ;   // casts
    -> "static_cast"      "<" TypeId ">" "(" e:Expression ")" ;
    -> "reinterpret_cast" "<" TypeId ">" "(" e:Expression ")" ;
    -> "const_cast"       "<" TypeId ">" "(" e:Expression ")" ;
  }

  // removed for now since I don't know much about them
  //-> "typeid" "(" Expression ")"                          ;   // RTTI
  //-> "typeid" "(" TypeId ")"                              ;
}

nonterm ExpressionList : HasVarsDecld {
  -> a:AssignmentExpression
    { fun varsDecld { a.varsDecld(env); } }
  -> e:ExpressionList "," a:AssignmentExpression
    { fun varsDecld { e.varsDecld(env); a.varsDecld(env); } }
}

nonterm ExpressionListOpt : HasVarsDecld {
  -> empty ;
  -> e:ExpressionList
    { fun varsDecld { e.varsDecld(env); } }
}

// I am pulling these out since PQVarName can be ~class
//PseudoDestructorName -> "~" ClassName
//PseudoDestructorName -> Qualifier PseudoDestructorName

nonterm UnaryExpression : ExprBase {
  disamb varsDecld {
    disambiguate(env, (DisambFn)&unamb_varsDecld);
  }

  formGroup {
    fun varsDecld { e.varsDecld(env); }

    -> e:PostfixExpression                 { fun intEval = e.intEval(env); }
    -> "++" e:CastExpression           ;
    -> "--" e:CastExpression           ;
    -> op:UnaryOperator e:CastExpression   { fun intEval = op.intEval(e.intEval(env)); }
    -> "sizeof" e:UnaryExpression      ;       // size of expression
    -> e:DeleteExpression              ;
  }

  -> "sizeof" "(" t:TypeId ")" {               // size of type
    fun varsDecld {
      t.getType(env);     // just make sure it's a valid type, for disambiguation
    }
  }

  -> NewExpression                   ;
}

nonterm UnaryOperator {
  // return this operator's effect on integer value 'val'
  fundecl int intEval(int val);

  -> "*" | "&"     { fun intEval { throwError("can't apply this operator to an integer"); } }
  -> "+"           { fun intEval = val; }
  -> "-"           { fun intEval = -val; }
  -> "!"           { fun intEval = !val; }
  -> "~"           { fun intEval = ~val; }
}

// for now, no new-placement or "::" in front
// I've changed the syntax slightly to correct what I think is a mistake
// (my syntax allows array of ptr to fn, whereas std syntax doesn't -- TOVERIFY)
nonterm NewExpression {
  -> "new" TypeSpecifier NewDeclaratorOpt NewInitializerOpt ;
  -> "new" "(" TypeId ")" NewDeclaratorOpt NewInitializerOpt ;
}

// NewDeclaratorOpt is, as a regular expression:
//   (PtrOperator)*  ("[" Expression "]")?  ("[" ConstExpression "]")*
nonterm NewDeclaratorOpt -> empty |
                            PtrOperator NewDeclaratorOpt |
                            DirectNewDeclarator ;        // commit to at least one "[" ... "]"
nonterm DirectNewDeclarator -> "[" Expression "]" |
                               DirectNewDeclarator "[" ConstantExpression "]" ;

nonterm NewInitializerOpt -> empty | "(" ExpressionListOpt ")" ;

// omitting possibility of initial "::"
nonterm DeleteExpression : HasVarsDecld {
  fun varsDecld { e.varsDecld(env); }

  -> "delete" e:CastExpression ;
  -> "delete" "[" "]" e:CastExpression ;
}

nonterm CastExpression : ExprBase {

  -> e:UnaryExpression { 
    fun intEval = e.intEval(env);
    fun varsDecld { e.varsDecld(env); }
  }

  -> "(" t:TypeId ")" e:CastExpression {
    fun varsDecld {
      t.getType(env);       // ignore return; just verify it is a type
      e.varsDecld(env);
    }
  }
}

// ++++ binary operator expression ++++
// primary expressions
nonterm BinaryExpression : ExprBase {
  attr prec;                  // precedence of binding (topmost) operator in expression

  disamb varsDecld {
    disambiguate(env, (DisambFn)&unamb_varsDecld);
  }

  -> e:CastExpression {
    action  prec := 100;      // higher precedence than anything else

    fun intEval = e.intEval(env);
    fun varsDecld { e.varsDecld(env); }
  }

  -> left:BinaryExpression op:BinaryOperator right:BinaryExpression {
    action  prec := op.prec;

    condition  this.prec <= left.prec;             // precedence
    condition  this.prec <= right.prec;            // more precedence
    condition  op.leftAssoc == 1 ?
                 this.prec < right.prec :          // left associative
                 this.prec < left.prec;            // right associative

    fun intEval = op.intEval(left.intEval(env), right.intEval(env));
    fun varsDecld { 
      left.varsDecld(env); 
      right.varsDecld(env); 
    }
  }
}

// an operator in a binary expression
nonterm BinaryOperator {
  attr prec;             // precedence of operator; higher value binds more tightly
  attr leftAssoc;        // 1 means left-associative, 0 means right-associative

  // all have left precedence by default; can override individually
  action  leftAssoc := 1;
                                                 
  // return this operator's effect on integers
  fundecl int intEval(int left, int right);

  // highest precedence
  formGroup {
    action prec:=64;
    -> ".*" | "->*"     { fun intEval { throwError("can't apply this operator to integers"); } }
  }

  formGroup {
    action prec:=60;
    -> "*"              { fun intEval = left * right; }
    -> "/"              { fun intEval = left / right; }
    -> "%"              { fun intEval = left % right; }
  }

  formGroup {
    action prec:=56;
    -> "+"              { fun intEval = left + right; }
    -> "-"              { fun intEval = left - right; }
  }

  formGroup {
    action prec:=52;
    -> "<<"             { fun intEval = left << right; }
    -> ">>"             { fun intEval = left >> right; }
  }

  formGroup {
    action prec:=48;
    -> "<"              { fun intEval = left < right; }
    -> ">"              { fun intEval = left > right; }
    -> "<="             { fun intEval = left <= right; }
    -> ">="             { fun intEval = left >= right; }
  }

  formGroup {
    action prec:=44;
    -> "=="             { fun intEval = left == right; }
    -> "!="             { fun intEval = left != right; }
  }

  -> "&" {
    action prec:=40;      fun intEval = left & right;
  }

  -> "^" {
    action prec:=36;      fun intEval = left ^ right;
  }

  -> "|" {
    action prec:=32;      fun intEval = left | right;
  }

  -> "&&" {
    action prec:=28;      fun intEval = left && right;
  }

  -> "||" {
    action prec:=24;      fun intEval = left || right;
  }
  // lowest precedence
}
// ---- end of binary operator expression ----


nonterm ConditionalExpression : ExprBase {
  disamb varsDecld {
    disambiguate(env, (DisambFn)&unamb_varsDecld);
  }

  -> e:BinaryExpression {
    fun intEval = e.intEval(env);
    fun varsDecld { e.varsDecld(env); }
  }

  -> cond:BinaryExpression "?" th:Expression ":" el:AssignmentExpression {
    fun intEval {
      // evaluate all of them first, so we get the check for the
      // expression being const regardless of which way the test goes
      // (this may in fact turn out to be wrong, but for now it's what
      // I think it should be)
      int c = cond.intEval(env);
      int t = th.intEval(env);
      int e = el.intEval(env);
      return c ? t : e;
    }

    fun varsDecld { 
      cond.varsDecld(env);
      th.varsDecld(env);
      el.varsDecld(env);
    }
  }
}

// why is conditional not allowed on left side of = ?  can I confirm
// that in another language spec?  clearly both alternatives would have
// to be like-typed lvalues, but...
nonterm AssignmentExpression : ExprBase {
  formGroup {
    fun varsDecld { e.varsDecld(env); }

    -> e:ConditionalExpression   { fun intEval = e.intEval(env); }
    -> e:ThrowExpression ;
  }

  -> e1:BinaryExpression AssignmentOperator e2:AssignmentExpression {
    fun varsDecld {
      e1.varsDecld(env);
      e2.varsDecld(env);
    }
  }
}

nonterm AssignmentOperator -> "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" |
                              "<<=" | "&=" | "^=" | "|=" ;

// this is the same definition as ExpressionList, and perhaps it
// makes sense to collapse them?  the meaning of ',' is quite
// different in the two cases.. does that matter?
nonterm Expression : ExprBase {
  -> ae:AssignmentExpression {
    fun intEval = ae.intEval(env);
    fun varsDecld { ae.varsDecld(env); }
  }
  -> e:Expression "," ae:AssignmentExpression {
    // choosing again to evaluate everything..
    fun intEval = e.intEval(env), ae.intEval(env);
    fun varsDecld { e.varsDecld(env); ae.varsDecld(env); }
  }
}

nonterm ExpressionOpt : HasVarsDecld {
  -> empty ;
  -> e:Expression  { fun varsDecld { e.varsDecld(env); } }
}

// this is an expression with the additional requirement that
// it be entirely evaluable at compile time
// (which is essentially a type property)
nonterm ConstantExpression : ExprBase -> e:ConditionalExpression {
  fun intEval = e.intEval(env);
  fun varsDecld { e.varsDecld(env); }
}

// ------ A.5 Statements ------
nonterm HasCFG {
  // add this node to 'cfg'; 'edge' is the edge to split to insert
  // the CFG nodes; returns the edge that leaves the region
  fundecl CFGEdge *getCFG(CFG &cfg, CFGEdge *edge);
  fun getCFG = edge;
}


// labeled-statement
nonterm Statement : Checkable, HasVarsDecld, HasCFG {
  disamb callTypeCheck {
    // try the general mechanism...
    disambiguate(env, (DisambFn)&unamb_callTypeCheck);
  }

  fun typeCheck { s.callTypeCheck(env); }
  fun getCFG = s.getCFG(cfg, edge);

  fundecl bool isWhileLoop() const;
  fun isWhileLoop = false;

  -> n:LabelName ":" s:Statement {
    fun getCFG {
      // associate the label with the edge 'edge'
      cfg.addLabel(n.getName(), edge);

      // insert statement's CFG
      return s.getCFG(cfg, edge);
    }
  }

  // had to remove the statement because I found linux kernel
  // code that has "case:" immediately followed by "}"
  -> "case" e:ConstantExpression ":" /*s:Statement*/ {
    fun varsDecld { e.varsDecld(env); }
    fun typeCheck {}
    fun getCFG {
      // just associate the expression with the edge, and return
      cfg.addCaseLabel(&e, edge);
      return edge;
    }
  }

  -> "default" ":" s:Statement {
    fun getCFG {
      cfg.addDefaultLabel(edge);
      return s.getCFG(cfg, edge);
    }
  }

  // expression-statement
  -> s:ExpressionStatement ;

  // compound-statement
  -> s:CompoundStatement ;

  formGroup {
    fun varsDecld { e.varsDecld(env); }

    // selection-statement
    -> "if" "(" e:Condition ")" s:Statement {
      fun getCFG {
        // splice a conditional node into 'edge', initially
        // with both targets pointing to a null block that
        // itself points where 'edge' did
        CFGNullNode *join = cfg.makeNullNode(edge->getTarget());
        CFGIfNode *cond = cfg.makeIfNode(&e, join, join);
        edge->setTarget(cond);

        // now insert s's CFG into the "then" branch
        s.getCFG(cfg, cond->getThenEdge());

        return join->getOutgoingEdge();
      }
    }

    // if-then-else preferred over if-then when ambiguous
    // (so far unimplemented!)
    -> "if" "(" e:Condition ")" s1:Statement "else" s2:Statement {
      fun typeCheck {
        s1.callTypeCheck(env);
        s2.callTypeCheck(env);
      }

      fun getCFG {
        // make the conditional structure
        CFGNullNode *join = cfg.makeNullNode(edge->getTarget());
        CFGIfNode *cond = cfg.makeIfNode(&e, join, join);
        edge->setTarget(cond);

        // insert then and else branches
        s1.getCFG(cfg, cond->getThenEdge());
        s2.getCFG(cfg, cond->getElseEdge());

        return join->getOutgoingEdge();
      }
    }

    -> "switch" "(" e:Condition ")" s:Statement {
      fun getCFG {
        // make a switch node where a 'break' statement will go to a
        // null node, which itself points to edge's target, and splice
        // that in
        CFGNullNode *join = cfg.makeNullNode(edge->getTarget());
        CFGSwitchNode *sw = cfg.makeSwitchNode(&e, join);
        edge->setTarget(sw);

        // indicate that this is the current switch node
        cfg.pushSwitch(sw);

        // let the statement, which has the "case:" labels,
        // add their own stuff
        s.getCFG(cfg, NULL /*?*/);

        // restore old switch context, if any
        cfg.popSwitch();

        return join->getOutgoingEdge();
      }
    }

    // iteration-statement
    formGroup {
      fun getCFG {
        // build an empty looping structure, essentially:
        //   cond:        if (e) {
        //   bodyStart:     /* empty */
        //                  /* insert body here */
        //   bodyEnd:       goto cond;     /* target of 'continue' */
        //                }
        //   loopExit:    /* target of 'break' */
        CFGNullNode *loopExit = cfg.makeNullNode(edge->getTarget());
        CFGNullNode *bodyEnd = cfg.makeNullNode(NULL);
        CFGNullNode *bodyStart = cfg.makeNullNode(bodyEnd);
        CFGIfNode *cond = cfg.makeIfNode(&e, bodyStart, loopExit);
        bodyEnd->setTarget(cond);

        // difference between while and do-while
        if (isWhileLoop()) {
          edge->setTarget(cond);
        }
        else {    // do-while
          edge->setTarget(bodyStart);
        }

        // mark the exit targets
        cfg.pushContinue(bodyEnd);
        cfg.pushBreak(loopExit);

        // build loop body
        s.getCFG(cfg, bodyStart->getOutgoingEdge());

        // restore loop context
        cfg.popContinue();
        cfg.popBreak();

        return loopExit->getOutgoingEdge();
      }

      -> "while" "(" e:Condition ")" s:Statement {
        fun isWhileLoop = true;
      }

      -> "do" s:Statement "while" "(" e:Expression ")" ";" {
        fun isWhileLoop = false;
      }
    }

    // this is a special-purpose rule intended for use with (unexpanded)
    // macros that, internally, contain a for loop; it is *not* part of
    // the C or C++ languages!
    -> L2_NAME "(" e:ExpressionList ")" s:CompoundStatement ;
  }

  // I might like to rework this so both semicolons appear here instead
  // of buried in ForInitStatement.  this is also a good rule to use
  // inline alternatives
  -> "for" "(" s1:ForInitStatement c:ConditionOpt ";" e:ExpressionOpt ")" s2:Statement {
    fun typeCheck { s1.callTypeCheck(env); c.callTypeCheck(env); s2.callTypeCheck(env); }
    fun varsDecld { c.varsDecld(env); e.varsDecld(env); }

    fun getCFG {
      // stick in the init code
      edge = s1.getCFG(cfg, edge);

      // build an empty looping structure, essentially:
      //   cond:        if (e) {
      //   bodyStart:     /* empty */
      //                  /* insert body here */
      //   bodyEnd:       goto cond;     /* target of 'continue' */
      //                }
      //   loopExit:    /* target of 'break' */
      CFGNullNode *loopExit = cfg.makeNullNode(edge->getTarget());
      CFGNullNode *bodyEnd = cfg.makeNullNode(NULL);
      CFGNullNode *bodyStart = cfg.makeNullNode(bodyEnd);
      CFGIfNode *cond = cfg.makeIfNode(c.getGuardExpr(), bodyStart, loopExit);
      bodyEnd->setTarget(cond);
      edge->setTarget(cond);

      // mark the exit targets
      cfg.pushContinue(bodyEnd);
      cfg.pushBreak(loopExit);

      // build loop body
      s2.getCFG(cfg, bodyStart->getOutgoingEdge());

      // stick in the increment code
      // TODO
      //e2.getCFG(cfg, bodyEnd->getOutgoingEdge());

      // restore loop context
      cfg.popContinue();
      cfg.popBreak();

      return loopExit->getOutgoingEdge();
    }
  }

  // jump-statement
  formGroup {
    fun typeCheck {}

    -> "break" ";" {
      fun getCFG {
        edge->setTarget(cfg.getBreakTarget());
        return edge;
      }
    }

    -> "continue" ";" {
      fun getCFG {
        edge->setTarget(cfg.getContinueTarget());
        return edge;
      }
    }

    -> "return" e:Expression ";" {
      fun varsDecld { e.varsDecld(env); }

      fun getCFG {
        CFGReturnNode *node = cfg.makeReturnNode(&e,
          cfg.getReturnTarget());
        edge->setTarget(node);
        return edge;
      }
    }

    -> "return" ";" {
      fun getCFG {
        CFGReturnNode *node = cfg.makeReturnNode(NULL,
          cfg.getReturnTarget());
        edge->setTarget(node);
        return edge;
      }
    }

    -> "goto" n:LabelName ";" {
      fun getCFG {
        edge->setTarget(cfg.getLabelTarget(n.getName()));
        return edge;
      }
    }
  }

  // declaration-statement
  -> s:BlockDeclaration ;

  // try-block
  -> s:TryBlock ;

  // GNU extensions
  -> GNUAsmStatement {
    fun typeCheck {}
    fun getCFG = edge;
  }
}

nonterm ExpressionStatement : Checkable, HasCFG {
  -> ";" ;
  -> e:Expression ";" { 
    fun typeCheck { e.varsDecld(env); }
    
    fun getCFG {
      CFGExprNode *node = cfg.makeExprNode(&e);
      return cfg.insertNode(node, edge);
    }
  }
}
                 
// base class for nodes that establish a new scope
nonterm ScopeNode {
  datadecl Owner<Env> localEnv;
}

nonterm CompoundStatement : Checkable, HasCFG, ScopeNode {
  -> "{" seq:StatementSeqOpt "}" {
    fun typeCheck {
      xassert(!localEnv);
      localEnv = new Env(env);    // scope
      //Env newEnv(&env);
      seq.callTypeCheck(localEnv);
    }

    fun getCFG = seq.getCFG(cfg, edge);
  }
}

nonterm StatementSeqOpt : Checkable, HasCFG {
  -> empty ;
  -> seq:StatementSeqOpt s:Statement {
    fun typeCheck {
      try {
        seq.callTypeCheck(env);
      }
      catch (XSemanticError &x) {
        // error recovery; report and proceed
        env->report(x.err);
      }
      env->flushLocalErrors(cout);

      s.callTypeCheck(env);
    }

    fun getCFG {
      return s.getCFG(cfg, seq.getCFG(cfg, edge));
    }
  }
}

nonterm Condition : Checkable, HasVarsDecld {
  fun varsDecld { e.varsDecld(env); }

  -> e:Expression ;
  -> spec:TypeSpecifier decl:Declarator "=" e:AssignmentExpression {
    fun typeCheck {
      declareVariable(env, decl.getDeclName(), DF_NONE,
                      decl.getDeclType(env, spec.getType(env)));
    }
  }
}

nonterm ConditionOpt : Checkable, HasVarsDecld {
  fundecl CCTreeNode *getGuardExpr();
  fun getGuardExpr = NULL;

  -> empty ;
  -> c:Condition {
    fun typeCheck { c.callTypeCheck(env); }
    fun varsDecld { c.varsDecld(env); }
  }
}

nonterm ForInitStatement : Checkable, HasCFG {
  -> s:ExpressionStatement | s:SimpleDeclaration {
     fun typeCheck { s.callTypeCheck(env); } 
  }
}




// ----- A.6 Declarations ------
nonterm DeclarationSeqOpt : Checkable {
  -> empty {
    fun typeCheck {} 
  }
  -> seq:DeclarationSeqOpt d:Declaration {
    fun typeCheck {
      seq.callTypeCheck(env);
      d.callTypeCheck(env);
    }
  } 
}

nonterm Declaration : Checkable {
  fun typeCheck { d.callTypeCheck(env); }

  -> d:BlockDeclaration ;
  -> d:FunctionDefinition ;
  //-> TemplateDeclaration ;
  -> d:LinkageSpecification ;
}

// C++ has other alternatives..
nonterm BlockDeclaration : Checkable, HasCFG {
  -> d:SimpleDeclaration { 
    fun typeCheck { d.callTypeCheck(env); }
  }
}

// is the DeclSpecifierSeq optional for implicit-int??
//   no, it's for constructors, destructors, and conversion operators,
//   all of which are C++ only, so the DeclSpecifierSeq is now mandatory
// ok, why is the InitDeclaratorList optional?
//   for declaring classes and enums
nonterm SimpleDeclaration : Checkable {
  //e.g.: int                x                     ;
  -> spec:DeclSpecifier list:InitDeclaratorListOpt ";" {
    fun typeCheck {
      Type const *type = spec.getType(env);    // a complete type
      DeclFlags flags = spec.getDeclFlags();   // inline, virtual, etc.
      list.declare(env, flags, type);
    }
  }
}


// old:
//DeclSpecifier -> StorageClassOpt CVQualifiersOpt TypeSpecifier
//CVQualifiersOpt -> "const" CVQualifiersOpt | "volatile" CVQualifiersOpt | empty
// now I'm folding CVQualifier into TypeSpecifier; in particular, this allows
// the TypeId in a cast expression to contain a "const"

nonterm HasDeclFlags {
  // return the set of declaration flags present here
  fundecl DeclFlags getDeclFlags();
}

nonterm HasType {
  // return the Type represented by this syntax
  fundecl Type const *getType(Env *env);
}

nonterm DeclSpecifier : HasTypeName, HasType, HasDeclFlags {
  fun typeName = s.typeName();
  fun getType = s.getType(env);

  -> "inline" m:DeclModifierOpt s:TypeSpecifier
   | m:DeclModifierOpt "inline" s:TypeSpecifier {
    fun getDeclFlags = (DeclFlags)(DF_INLINE | m.getDeclFlags());
  }

  -> m:DeclModifierOpt s:TypeSpecifier {
    fun getDeclFlags = m.getDeclFlags();
  }
}

// my analysis (informal and ad-hoc) indicates that none of these can
// be used together; "inline" is pulled out because it can be used
// with "virtual", "static", "friend", and possibly "extern"; I
// consider all this preferable to just allowing a "word soup"
nonterm DeclModifierOpt : HasDeclFlags {
  -> empty         { fun getDeclFlags = DF_NONE; }
  -> "virtual"     { fun getDeclFlags = DF_VIRTUAL; }
  -> "friend"      { fun getDeclFlags = DF_FRIEND; }
  -> "mutable"     { fun getDeclFlags = DF_MUTABLE; }
  -> "typedef"     { fun getDeclFlags = DF_TYPEDEF; }
  -> "auto"        { fun getDeclFlags = DF_AUTO; }
  -> "register"    { fun getDeclFlags = DF_REGISTER; }
  -> "static"      { fun getDeclFlags = DF_STATIC; }
  -> "extern"      { fun getDeclFlags = DF_EXTERN; }
}


nonterm HasCVFlags {
  // return all const/volatile at this level
  fundecl CVFlags getCVFlags();
}

nonterm TypeSpecifier : HasTypeName, HasType, HasCVFlags {
  // generic implementation
  fun getType {
    Type const *baseType = s.getType(env);
    CVFlags cv = getCVFlags();

    // apply the cv flags to what we have
    Type const *ret = env->applyCVToType(cv, baseType);
    if (!ret) {
      // e.g.:
      //   typedef int (*Foo)();
      //   Foo const f;
      reportError(env, "cannot apply const/volatile to this type");
      return baseType;    // error recovery
    }
    return ret;
  }

  // default impls
  fun typeName = s.typeName();
  fun getCVFlags = CV_NONE;

  // these are the atomic types (see types.txt)
  formGroup {
    -> s:SimpleTypeSpecifier ;          // int

    -> s:SimpleCVTypeSpecifier          // unsigned const char  (not good style, IMO)
         { fun getCVFlags = s.getCVFlags(); }

    -> s:ElaboratedTypeSpecifier ;      // class foo  or  enum bar

    -> s:ClassSpecifier                 // class { ... }
         { fun typeName = "class { ... }"; }
    -> s:EnumSpecifier                  // enum { ... }
         { fun typeName = "enum { ... }"; }
  }

  // these are: "CV* atomic-type" or "atomic-type CV*"
  formGroup {
    fun typeName = stringc << s.typeName() << " " << q.typeName();

    fun getCVFlags {
      // get flags from underlying specifier
      CVFlags flags = s.getCVFlags();

      // add the flag at this level
      return (CVFlags)(flags | q.getCVFlags());
    }

    -> q:CVQualifier s:TypeSpecifier ;  // const int
    -> s:TypeSpecifier q:CVQualifier ;  // int const
  }
}


nonterm ElaboratedTypeSpecifier : HasTypeName, HasType {
  -> k:ClassKeyword n:L2_NAME {
    fun getType {
      CompoundType::Keyword keyword = k.getKeyword();
      CompoundType const *type = env->lookupOrMakeCompound(n.nameValue, keyword);
      if (!type) {
        // e.g.:
        //   class Foo;
        //   struct Foo *f;
        throwError("compound kind mismatch");
      }

      return env->makeType(type);
    }
  }

  -> "enum" n:L2_NAME {
    fun getType {
      EnumType const *type = env->lookupEnum(n.nameValue);
      if (!type) {
        throwError("undeclared enum");
      }
      return env->makeType(type);
    }
  }
}


nonterm SimpleTypeBase : HasType {
  // helper to get the simple type spec, to cut down on
  // syntactic verbiage
  fundecl SimpleTypeId getst();
  fun getst { internalError("can't call me"); }

  fun getType {
    return env->getSimpleType(getst());
  }
}


// this list comes from Table 7 (p.109) of the C++ standard
// NOTE: this deviates from the language spec, which allows other
// decl-specifiers to mix with the tokens here; I do not
nonterm SimpleTypeSpecifier : SimpleTypeBase, HasTypeName {
  fun typeName {
    return simpleTypeName(getst());
  }

  // the existence of this production is part of why parsing C is hard
  -> n:PQTypeName {
    fun getType {
      Type const *ret = env->lookupType(n.typeName());
      if (!ret) {
        throwError(stringc << "undefined type: " << n.typeName());
      }
      return ret;
    }
    fun typeName = n.typeName();
  }

  -> "char"                     { fun getst = ST_CHAR; }
  -> "unsigned" "char"          { fun getst = ST_UNSIGNED_CHAR; }
  -> "signed" "char"            { fun getst = ST_SIGNED_CHAR; }
  -> "bool"                     { fun getst = ST_BOOL; }
  -> "unsigned"                 { fun getst = ST_UNSIGNED_INT; }
  -> "unsigned" "int"           { fun getst = ST_UNSIGNED_INT; }
  -> "signed"                   { fun getst = ST_INT; }
  -> "signed" "int"             { fun getst = ST_INT; }
  -> "int"                      { fun getst = ST_INT; }
  -> "unsigned" "short" "int"   { fun getst = ST_UNSIGNED_SHORT_INT; }
  -> "unsigned" "short"         { fun getst = ST_UNSIGNED_SHORT_INT; }
  -> "unsigned" "long" "int"    { fun getst = ST_UNSIGNED_LONG_INT; }
  -> "unsigned" "long"          { fun getst = ST_UNSIGNED_LONG_INT; }
  -> "signed" "long" "int"      { fun getst = ST_LONG_INT; }
  -> "signed" "long"            { fun getst = ST_LONG_INT; }
  -> "long" "int"               { fun getst = ST_LONG_INT; }
  -> "long"                     { fun getst = ST_LONG_INT; }
  -> "signed" "long" "long"     { fun getst = ST_LONG_LONG; }
  -> "long" "long"              { fun getst = ST_LONG_LONG; }
  -> "unsigned" "long" "long"   { fun getst = ST_UNSIGNED_LONG_LONG; }
  -> "signed" "short" "int"     { fun getst = ST_SHORT_INT; }
  -> "signed" "short"           { fun getst = ST_SHORT_INT; }
  -> "short" "int"              { fun getst = ST_SHORT_INT; }
  -> "short"                    { fun getst = ST_SHORT_INT; }
  -> "wchar_t"                  { fun getst = ST_WCHAR_T; }
  -> "float"                    { fun getst = ST_FLOAT; }
  -> "double"                   { fun getst = ST_DOUBLE; }
  -> "long" "double"            { fun getst = ST_LONG_DOUBLE; }
  -> "void"                     { fun getst = ST_VOID; }
}


// I had been separating these into typedef/enum/class names, but
// the parser can never distinguish, so the grammar shouldn't suggest
// that it can
nonterm PQTypeName : HasTypeName {
  -> n:L2_NAME                 { fun typeName = n.nameValue; }
  -> TemplateId                { fun typeName = "(template-id)"; }
  -> Qualifier n:PQTypeName    { fun typeName = stringc << "(qualifier)" << n.typeName(); }
}

// the C++ standard allows "const" and "volatile" to be arbitrarily
// interleaved with the words of a simple-type-specifier.. so I've
// created this set of alternative type specifiers which have at
// least one CV qualifier buried in them
//
// technically, I'm still missing things like
//   unsigned const short volatile int
// but yikes, I pity the fool with such code!
//
// I really should just fold these into the above, but my dislike for
// the interleaving thing makes me try to keep the above decls more
// or less "pure".. but I'll probably merge them at some point
nonterm SimpleCVTypeSpecifier : SimpleTypeBase, HasTypeName, HasCVFlags {
  fun typeName {
    return stringc << simpleTypeName(getst()) << " " << q.typeName();
  }

  fun getCVFlags = q.getCVFlags();

  -> "unsigned" q:CVQualifierSeq "char"         { fun getst = ST_UNSIGNED_CHAR; }
  -> "signed" q:CVQualifierSeq "char"           { fun getst = ST_SIGNED_CHAR; }
  -> "unsigned" q:CVQualifierSeq "int"          { fun getst = ST_UNSIGNED_INT; }
  -> "signed" q:CVQualifierSeq "int"            { fun getst = ST_INT; }
  -> "unsigned" q:CVQualifierSeq "short" "int"  { fun getst = ST_UNSIGNED_SHORT_INT; }
  -> "unsigned" "short" q:CVQualifierSeq "int"  { fun getst = ST_UNSIGNED_SHORT_INT; }
  -> "unsigned" q:CVQualifierSeq "short"        { fun getst = ST_UNSIGNED_SHORT_INT; }
  -> "unsigned" q:CVQualifierSeq "long" "int"   { fun getst = ST_UNSIGNED_LONG_INT; }
  -> "unsigned" "long" q:CVQualifierSeq "int"   { fun getst = ST_UNSIGNED_LONG_INT; }
  -> "unsigned" q:CVQualifierSeq "long"         { fun getst = ST_UNSIGNED_LONG_INT; }
  -> "signed" q:CVQualifierSeq "long" "int"     { fun getst = ST_LONG_INT; }
  -> "signed" "long" q:CVQualifierSeq "int"     { fun getst = ST_LONG_INT; }
  -> "signed" q:CVQualifierSeq "long"           { fun getst = ST_LONG_INT; }
  -> "long" q:CVQualifierSeq "int"              { fun getst = ST_LONG_INT; }
  -> "signed" q:CVQualifierSeq "long" "long"    { fun getst = ST_LONG_LONG; }
  -> "unsigned" q:CVQualifierSeq "long" "long"  { fun getst = ST_UNSIGNED_LONG_LONG; }
  -> "signed" q:CVQualifierSeq "short" "int"    { fun getst = ST_SHORT_INT; }
  -> "signed" "short" q:CVQualifierSeq "int"    { fun getst = ST_SHORT_INT; }
  -> "signed" q:CVQualifierSeq "short"          { fun getst = ST_SHORT_INT; }
  -> "short" q:CVQualifierSeq "int"             { fun getst = ST_SHORT_INT; }
  -> "long" q:CVQualifierSeq "double"           { fun getst = ST_LONG_DOUBLE; }
}


nonterm EnumSpecifier : HasType {
  fundecl string getEnumName();

  fun getType {
    // get preliminary info
    string name = getEnumName();    // could be ""

    // construct the vessel to carry additional stuff
    EnumType *type = env->lookupEnum(name);
    if (type) {
      // TODO: wrong because this prevents local redeclaration
      throwError(stringc << "enum already declared: " << name);
    }
    if (!type) {
      type = env->makeEnumType(name);
      xassert(type);
    }

    // TODO: add the enum's elements to its definition

    return env->makeType(type);
  }

  -> "enum" "{" list:EnumeratorListOpt "}"
    { fun getEnumName = ""; }
  -> "enum" n:EnumName "{" list:EnumeratorListOpt "}"
    { fun getEnumName = n.getName(); }
}
                         

nonterm EnumeratorList -> EnumeratorDefinition |
                          EnumeratorList "," EnumeratorDefinition ;
nonterm EnumeratorListOpt -> empty | EnumeratorList |
                             EnumeratorList "," ;     // GNU extension (??)

nonterm EnumeratorDefinition -> EnumValueName |
                                EnumValueName "=" ConstantExpression ;

nonterm AsmDefinition -> "asm" "(" L2_STRING_LITERAL ")" ";" ;

nonterm LinkageSpecification : Checkable {
  // todo: actually record the linkage spec
  -> "extern" L2_STRING_LITERAL "{" d:DeclarationSeqOpt "}" |
     "extern" L2_STRING_LITERAL d:Declaration {
    fun typeCheck { d.callTypeCheck(env); }
  }
}

// ------ A.7 Declarators ------
// -- declarator --
// declarator: the "x" in a declaration like "int x"

nonterm HasDeclare {
  // this function is defined for declarators, etc.; for each declarator
  // in the subtree, combine 'type' with the additional type modifiers
  // associated with the declarator (if any), and add the completed
  // declaration, with 'flags', to 'env'
  fundecl void declare(Env *env, DeclFlags flags, Type const *type);
}

nonterm InitDeclaratorList : HasDeclare {
  -> d:InitDeclarator {
    fun declare { d.declare(env, flags, type); }
  }

  -> list:InitDeclaratorList "," d:InitDeclarator {
    fun declare {
      list.declare(env, flags, type);
      d.declare(env, flags, type);
    }
  }
}

nonterm InitDeclaratorListOpt : HasDeclare {
  -> empty                      { fun declare {} }
  -> list:InitDeclaratorList    { fun declare { list.declare(env, flags, type); } }
}

nonterm InitDeclarator : HasDeclare {
  fun declare {
    // get the full type from the declarator
    Type const *fullType = d.getDeclType(env, type);

    // get the declared name
    string name = d.getDeclName();

    // put that pair into the environment
    declareVariable(env, name, flags, fullType);
  }

  // don't know what to do with the initializer at this point..
  -> d:Declarator |                   // (int)  x
     d:Declarator Initializer ;       // (int)  x = 5
}

nonterm Initializer {
  -> "=" InitializerClause ;
  
  // this causes an ambiguity with
  //   int fileno(FILE *f);
  // because it could be multiplication.. handling it isn't that
  // hard, but for now let's just take out this rule
  //-> "(" ExpressionList ")" ;          // ctor args
}

nonterm InitializerClause {
  -> AssignmentExpression        ;   // scalar
  -> "{" InitializerList "}"     ;   // array initializer
  -> "{" InitializerList "," "}" ;   // useful syntactic quirk
  -> "{" "}"                     ;   // ?  does this mean the array is zeroed?
}

nonterm InitializerList -> InitializerClause |
                           InitializerList "," InitializerClause ;


nonterm HasDeclType {
  // retrieve the type associated with this declaration, where
  // 'type' is the type as built so far (inherited from the
  // specifier, or constructed by parsing type constructors)
  fundecl Type const *getDeclType(Env *env, Type const *type);
}

nonterm DeclaratorBase : HasTypeName, HasDeclType, HasDeclName {
  // get the node that has the function parameters, or NULL if this
  // isn't a function declaration
  fundecl ParameterDeclarationClause_Node *getFnParams();
  fun getFnParams = NULL;

  // return the type name string for the return type, if this is
  // a function declaration
  fundecl string retTypeName();
  fun retTypeName { internalError("not a function type"); }

  // name of variable or function being declared
  fun getDeclName = d.getDeclName();

  // attribute 'isFunction' of Declarator and DirectDeclarator: if the
  // type of the thing declared is a function (not a ptr to a
  // function, or an array of fns...), this is 1, otherwise 0; it is
  // used to do some disambiguation later on, where functions are
  // allowed to not have return types (DeclSpecifiers) to allow for
  // ctors and dtors, but other declarations must have types
  attr isFunction;
  
  // this attribute is needed to compute isFunction; it is 1 if the
  // declarator is simply a PQName, and 0 otherwise
  attr isName;
}

nonterm Declarator : DeclaratorBase {
  // (PtrOperator)* DirectDeclarator
  -> p:PtrOperator d:Declarator {
  
    // if d is a function, then this declares a function that
    // returns a pointer
    action isFunction := d.isFunction;
    action isName := 0;

    fun typeName = stringc << "*" << d.typeName();
    fun retTypeName = stringc << "*" << d.retTypeName();

    fun getFnParams {
      return d.getFnParams();
    }

    fun getDeclType {
      // grab info about the syntax
      CVFlags cv = p.getCVFlags();
      PtrOper op = p.getPtrOper();

      // make a new type that is, e.g., a pointer to the type
      // we were already given
      Type *newType = env->makePtrOperType(op, cv, type);

      // and declare the variable with that new, constructed type
      return d.getDeclType(env, newType);
    }
  }

  -> d:DirectDeclarator {
    action isFunction := d.isFunction;
    action isName := d.isName;

    fun getFnParams = d.getFnParams();
    fun typeName = d.typeName();
    fun retTypeName = d.retTypeName();
    fun getDeclType = d.getDeclType(env, type);
  }
}

nonterm DirectDeclarator : DeclaratorBase {
  // for arrays
  fundecl bool hasSize();             // true if a size is specified
  fun hasSize = false;
  fundecl int getSize(Env *env);      // get declared size
  fun getSize { internalError("can't call getSize"); }

  -> n:PQVarName GNUAttribute |       // GNU extension
     n:PQVarName {
    action isFunction := 0;
    action isName := 1;

    // declarator names can't be qualified with "::" (this resolves an
    // ambiguity with constructs like "Foo::Foo() {}")
    condition n.colonColon == 0;

    fun typeName = "";

    fun getDeclName = n.getDeclName();
    fun getDeclType {
      // having carried the type info along, we finally reach the
      // name of interest; return the final, collected type
      return type;
    }
  }

  // function type declarator; the return type comes from the type
  // specifier that preceeds this
  -> d:DirectDeclarator "(" args:ParameterDeclarationClause ")" q:CVQualifierSeqOpt  {
  // ^^^ name of fn ^^^     ^^^^^^^^^^ arguments ^^^^^^^^^^     ^^^^^ const? ^^^^^^
    action isFunction := d.isName? 1 : d.isFunction;
    action isName := 0;

    fun getFnParams = &args;
    fun typeName = "(function)";
    fun retTypeName = d.typeName();

    fun getDeclType {
      // build a container for the function type
      FunctionType *fnType =
        env->makeFunctionType(type /*return type*/, q.getCVFlags());

      // fill in the details about arguments
      args.getArgTypes(env, fnType);

      // continue on down
      return d.getDeclType(env, fnType);
    }
  }

  // arrays
  formGroup {
    // Q: is there such a thing as returning an array, and could
    // this syntax declare one?  looks like yes...
    action isFunction := 0;
    action isName := 0;

    fun getDeclType {
      Type *arrType;
      if (hasSize()) {
        arrType = env->makeArrayType(type, getSize(env));    // known size
      }
      else {
        arrType = env->makeArrayType(type);                  // unknown size
      }

      return d.getDeclType(env, arrType);
    }

    // array of specified size
    -> d:DirectDeclarator "[" sz:ConstantExpression "]" {
      fun hasSize = true;
      fun getSize = sz.intEval(env);
      fun typeName = stringc << d.typeName() << "[" << sz.unparseString() << "]";
    }

    // array of unspecified size
    -> d:DirectDeclarator "[" "]" {
      fun typeName = stringc << d.typeName() << "[]";
    }
  }

  // precedence grouping
  -> "(" d:Declarator ")"  {
    action isFunction := d.isFunction;
    action isName := d.isName;

    fun getFnParams = d.getFnParams();
    fun typeName = d.typeName();
    fun retTypeName = d.retTypeName();
    fun getDeclType = d.getDeclType(env, type);
  }
}


nonterm PtrOperator : HasCVFlags {
  // return which of the two "pointer" operators this is
  fundecl PtrOper getPtrOper();

  // c++ std mentions something with "::" as well, I don't know what that means
  -> "*" q:CVQualifierSeqOpt {
    fun getCVFlags = q.getCVFlags();
    fun getPtrOper = PO_POINTER;
  }

  -> "&" {
    fun getCVFlags = CV_NONE;
    fun getPtrOper = PO_REFERENCE;
  }
}


nonterm CVQualifierSeqOpt : HasCVFlags {
  -> empty              { fun getCVFlags = CV_NONE; }
  -> s:CVQualifierSeq   { fun getCVFlags = s.getCVFlags(); }
}

nonterm CVQualifierSeq : HasTypeName, HasCVFlags {
  -> q:CVQualifier                    { fun getCVFlags = q.getCVFlags(); }
  -> q:CVQualifier s:CVQualifierSeq   { fun getCVFlags = (CVFlags)(q.getCVFlags() | s.getCVFlags()); }
}

nonterm CVQualifier : HasTypeName, HasCVFlags {
  -> "const"            { fun getCVFlags = CV_CONST; }
  -> "volatile"         { fun getCVFlags = CV_VOLATILE; }
  -> "owner"            { fun getCVFlags = CV_OWNER; }
  -> GNUAttribute       { fun getCVFlags = CV_NONE; }     // GNU extension
}


// -- type-id --
// a type-id is like a declaration of one thing, but without the variable name;
// it is, for example, what appears inside the parens of a typecast
nonterm TypeId : HasType -> spec:TypeSpecifier decl:AbstractDeclarator {
  fun getType {
    Type const *specType = spec.getType(env);
    return decl.getDeclType(env, specType);
  }
}

// note: the semantic functions in AbstractDeclarator are
// essentially duplicated code from Declarator ...
nonterm AbstractDeclarator : HasTypeName, HasDeclType {
  -> p:PtrOperator d:AbstractDeclarator {
    fun typeName = stringc << "*" << d.typeName();
    
    fun getDeclType =
      d.getDeclType(env, env->makePtrOperType(
        p.getPtrOper(), p.getCVFlags(), type));
  }

  -> d:DirectAbstractDeclarator {
    fun typeName = d.typeName();
    fun getDeclType = d.getDeclType(env, type);
  }
}

nonterm DirectAbstractDeclarator : HasTypeName, HasDeclType {
  fun typeName = d.typeName();

  // this is where abstract declarators differ from regular declarators;
  // for a declarator, this rule is "-> PQVarName"
  -> empty {
    fun typeName = "";
    fun getDeclType = type;
  }

  // function
  -> d:DirectAbstractDeclarator "(" args:ParameterDeclarationClause ")" q:CVQualifierSeqOpt {
    fun getDeclType {
      FunctionType *fnType = 
        env->makeFunctionType(type /*return type*/, q.getCVFlags());
      args.getArgTypes(env, fnType);
      return d.getDeclType(env, fnType);
    }
  }

  -> d:DirectAbstractDeclarator "[" sz:ConstantExpression "]" {     // array of specified size
    fun getDeclType =
      d.getDeclType(env, env->makeArrayType(type, sz.intEval(env)));
  }

  -> d:DirectAbstractDeclarator "[" "]" {                        // array of unspecified size
    fun getDeclType =
      d.getDeclType(env, env->makeArrayType(type));
  }

  -> "(" d:AbstractDeclarator ")" {                              // precedence grouping
    fun getDeclType = d.getDeclType(env, type);
  }
}


nonterm HasPrintSig {
  // print to cout some part of the function signature
  fundecl void printSig();
}


// -- parameters in declarations --
nonterm HasArgTypes {
  // accumulate the types of the arguments and store them in 'fnType'
  fundecl void getArgTypes(Env *env, FunctionType *fnType);
}

nonterm ParameterDeclarationClause : HasPrintSig, HasArgTypes {
  -> p:ParameterDeclarationList {            // some args
    fun printSig { p.printSig(); }
    fun getArgTypes { p.getArgTypes(env, fnType); }
  }
  -> empty {                                 // no args
    fun printSig {}
    fun getArgTypes {}
  }
  -> "..." {                                 // all args are optional
    fun printSig { cout << "..."; }
    fun getArgTypes { fnType->acceptsVarargs = true; }
  }

  formGroup {
    fun printSig { p.printSig(); cout << ", ..."; }
    fun getArgTypes {
      p.getArgTypes(env, fnType);
      fnType->acceptsVarargs = true;
    }

    -> p:ParameterDeclarationList "..." ;      // args plus optionally more
    -> p:ParameterDeclarationList "," "..." ;  // same; alternative syntax
  }
}

nonterm ParameterDeclarationList : HasPrintSig, HasArgTypes {
  -> d:ParameterDeclaration {
    fun printSig { cout << d.typeName(); }
    fun getArgTypes { d.getArgTypes(env, fnType); }
  }

  -> list:ParameterDeclarationList "," d:ParameterDeclaration {
    fun printSig {
      list.printSig();
      cout << ", " << d.typeName();
    }
    fun getArgTypes {
      list.getArgTypes(env, fnType);
      d.getArgTypes(env, fnType);
    }
  }
}

nonterm ParameterDeclaration : HasTypeName, HasArgTypes {
  fundecl bool hasName();
  fundecl string getDeclName();

  fun typeName = stringc << s.typeName() << d.typeName();

  fun getArgTypes {
    // type
    Type const *specType = s.getType(env);
    Type const *fullType = d.getDeclType(env, specType);

    // check that there are no modifiers.. this could also be
    // done with attributes, and it's a toss-up in my mind now
    // which is the superior approach
    DeclFlags flags = s.getDeclFlags();
    if (flags != DF_NONE) {
      reportError(env, "modifiers not allowed in parameter declarations");
    }

    Parameter *param = new Parameter(fullType);
    if (hasName()) {
      param->name = getDeclName();
    }
    //if (hasDefaultArg()) {
    //  // these are nontrivial to handle, so for now I do nothing
    //}

    fnType->addParam(param);
  }

  formGroup {
    fun hasName = true;
    fun getDeclName = d.getDeclName();

    -> s:DeclSpecifier d:Declarator ;
    -> s:DeclSpecifier d:Declarator "=" AssignmentExpression ;
  }

  formGroup {
    fun hasName = false;
    fun getDeclName { internalError("can't call me"); }

    -> s:DeclSpecifier d:AbstractDeclarator ;
    -> s:DeclSpecifier d:AbstractDeclarator "=" AssignmentExpression ;
  }
}

// -- function definition --
nonterm FunctionDefinition : Checkable, HasPrintSig, ScopeNode {
  // I am wary of letting the declspecifier be optional, because it seems
  // to me that may introduce more ambiguities.. but it truly is missing
  // in ctors and dtors; so my idea now is to only permit it when the
  // declarator declares a function type (can't be more specific since there
  // aren't good syntactic clues for ctors)

  // all declarators must be of function type
  condition d.isFunction == 1;

  // this works for all the productions

  // return type      name/params   body
  -> r:DeclSpecifier  d:Declarator  b:FunctionBody {
    fun printSig {
      cout << d.getDeclName() << ": returns "
           << r.typeName() << d.retTypeName() << ", arg types: ";

      ParameterDeclarationClause_Node *pdc = d.getFnParams();
      xassert(pdc);    // otherwise isFunction had to be 0
      pdc->printSig();
      cout << endl;
    }

    fun typeCheck {
      // typecheck the signature
      Type const *type = d.getDeclType(env, (r.getType(env)));

      // must be a function type, otherwise the parser has
      // screwed up (in particular the 'isFunction' attribute)
      xassert(type->isFunctionType());
      FunctionType const *fnType = &type->asFunctionTypeC();

      // add the function decl to the original environment
      DeclFlags flags = r.getDeclFlags();   // inline, virtual, etc.
      string name = d.getDeclName();
      declareVariable(env, name, flags, fnType);

      // add the formals to the new environment we'll create for
      // the function body
      xassert(!localEnv);
      localEnv = new Env(env);     // scope
      FOREACH_OBJLIST(Parameter, fnType->params, iter) {
        Parameter const *param = iter.data();
        if (!param->name.isempty()) {
          // would really like to be doing this in the context
          // of the tree node that actually defined the name...
          declareVariable(localEnv, param->name, DF_NONE, param->type);
        }
      }

      // typecheck the body
      b.callTypeCheck(localEnv);
    }
  }

  // return type      name/params   body
  -> ExplicitOpt      d:Declarator  FunctionBody          // {c,d}tor
    { fun printSig { cout << d.getDeclName() << ": ctor or dtor\n"; } }

  // return type      name/params   body
  -> ExplicitOpt      d:Declarator  ":" MemInitializerList FunctionBody   // ctor
    { fun printSig { cout << d.getDeclName() << ": ctor with init list\n"; } }
}

nonterm FunctionBody : Checkable -> s:CompoundStatement {
  fun typeCheck { s.callTypeCheck(env); }
}

nonterm ExplicitOpt -> "explicit" | empty ;


// ------ A.8 Classes ------
// I'm going to use the "class" terminology throughout, even though
// C only has "struct" and "union"
nonterm ClassSpecifier : HasType ->
  k:ClassKeyword n:ClassNameOpt base:BaseClauseOpt "{" memb:MemberDeclarationSeqOpt "}"
{
  fun getType {
    // get preliminary info
    CompoundType::Keyword keyword = k.getKeyword();
    string name = n.getName();    // could be ""

    // TODO: the rules below are wrong since they don't allow
    // something to be redeclared inside a nested scope

    // construct the vessel to carry additional stuff
    CompoundType *compound = env->lookupCompound(name);
    if (compound && !compound->incomplete) {
      throwError(stringc << "already declared: " << name);
    }
    if (compound && compound->keyword != keyword) {
      throwError(stringc << "declared as different kind of compound: " << name);
    }
    if (!compound) {
      compound = env->lookupOrMakeCompound(name, keyword);
      xassert(compound);
    }
    compound->incomplete = false;

    // ignore 'base' for now

    // add info about the members
    memb.addMemberInfo(env, compound, 
                       keyword==CompoundType::K_CLASS? 
                         AM_PRIVATE : AM_PUBLIC);

    return env->makeType(compound);
  }
}

nonterm ClassNameOpt {
  fundecl string getName();
  -> empty         { fun getName = ""; }
  -> n:ClassName   { fun getName = n.getName(); }
}

nonterm ClassKeyword {
  fundecl CompoundType::Keyword getKeyword();
  -> "class"       { fun getKeyword = CompoundType::K_CLASS; }
  -> "struct"      { fun getKeyword = CompoundType::K_STRUCT; }
  -> "union"       { fun getKeyword = CompoundType::K_UNION; }
}


nonterm MemberDeclBase {
  // add info in this subtree to the compound we're building
  fundecl void addMemberInfo(Env *env, CompoundType *compound, AccessMode access);

  // for now, just eat it
  fun addMemberInfo {}
}

nonterm MemberDeclarationSeqOpt : MemberDeclBase {
  -> empty ;
  -> MemberDeclaration MemberDeclarationSeqOpt ;
  -> AccessSpecifier ":" MemberDeclarationSeqOpt ;
}

nonterm AccessSpecifier -> "public" | "private" | "protected" ;

nonterm MemberDeclaration : MemberDeclBase {
  -> DeclSpecifier MemberDeclaratorList ";" ;    // member fn or data
  -> FunctionDefinition ";" ;                    // inline fn
  -> FunctionDefinition ;                        // syntactic tweak
  -> ExplicitOpt VirtualOpt d:Declarator ";"     // ctor, dtor, conv op
       { condition d.isFunction == 1; }
  // note above that "explicit" and "virtual" can't be mixed because the former
  // is for ctors only and the latter can't be used with ctors (so a later stage
  // of processing will filter it out)
}

nonterm MemberDeclaratorList ->
  MemberDeclarator | MemberDeclaratorList "," MemberDeclarator ;

nonterm MemberDeclarator {
  -> Declarator ;
  -> Declarator "=" ConstantExpression ;   // pure; and member inits??
  -> L2_NAME ":" ConstantExpression ;      // named bitfield
  -> ":" ConstantExpression ;              // unnamed bitfield
}


// ------ A.9 Derived classes ------
nonterm BaseClauseOpt -> empty |
                         ":" BaseSpecifierList ;

nonterm BaseSpecifierList -> BaseSpecifier | BaseSpecifierList "," BaseSpecifier ;

nonterm BaseSpecifier -> VirtualOpt AccessSpecifierOpt PQClassName ;
nonterm VirtualOpt -> empty | "virtual" ;
nonterm AccessSpecifierOpt -> empty | AccessSpecifier ;

nonterm PQClassName -> ClassName | Qualifier PQClassName ;


// ------ A.10 Special member functions ------
nonterm ConversionFunctionId -> "operator" ConversionTypeId ;
nonterm ConversionTypeId -> TypeSpecifier ConversionDeclaratorOpt ;
nonterm ConversionDeclaratorOpt -> empty | PtrOperator ConversionDeclaratorOpt ;

nonterm MemInitializerList
  -> MemInitializer | MemInitializer "," MemInitializerList ;

// std has a separate rule for base class ctor call, but that's not
// a useful parsing distinction, so it just creates gratuitous
// ambiguities, and I've eliminated it
nonterm MemInitializer -> L2_NAME "(" ExpressionListOpt ")" ;     // member init


// ------ A.11 Overloading ------
nonterm OperatorFunctionId -> "operator" Operator ;

// the cpp standard is unclear on whether "()" is to be considered a token,
// or whether it is permissible to see it as "(" ")".. I'm using the latter
nonterm Operator {
  -> "new" | "delete" | "new" "[" "]" | "delete" "[" "]" ;
  -> BinaryOperator      /* filter out ".*" later */     ;
  -> AssignmentOperator                                  ;
  -> "!" | "~" | "," | "++" | "--" | "->"                ;
  -> "(" ")" | "[" "]"                                   ;
}


// ------ A.12 Templates ------
//TemplateParameterList -> TemplateParameter
//TemplateParameterList -> TemplateParameterList "," TemplateParameter

//TemplateParameter -> TypeParameter | ParameterDeclaration


nonterm TemplateId -> TemplateName "<" TemplateArgumentList ">" |
                      TemplateName "<" ">" ;

nonterm TemplateArgumentList -> TemplateArgument |
                                TemplateArgumentList "," TemplateArgument ;

nonterm TemplateArgument -> Literal | TypeId ;
// where I have Literal the std has AssignmentExpression...
// std also mentions IdExpression here, which is my PQVarName.....


// ------ A.13 Exception handling ------
nonterm TryBlock : Checkable, HasCFG 
  -> "try" s:CompoundStatement h:HandlerSeq {
  fun typeCheck {
    s.callTypeCheck(env);
    h.callTypeCheck(env);
  }
}

nonterm HandlerSeq : Checkable {
  -> h:Handler { fun typeCheck { h.callTypeCheck(env); } }
  -> h:Handler seq:HandlerSeq {
    fun typeCheck {
      h.callTypeCheck(env);
      seq.callTypeCheck(env);
    }
  }
}

nonterm Handler : Checkable, ScopeNode {
  -> "catch" "(" d:ExceptionDeclaration ")" s:CompoundStatement {
    fun typeCheck {                       
      xassert(!localEnv);
      localEnv = new Env(env);    // scope
      d.callTypeCheck(localEnv);
      s.callTypeCheck(localEnv);
    }
  }
}

nonterm ExceptionDeclaration : Checkable {
  -> s:TypeSpecifier d:Declarator {          // named exception object
    fun typeCheck {
      Type const *type = d.getDeclType(env, s.getType(env));
      string name = d.getDeclName();
      declareVariable(env, name, DF_NONE, type);
    }
  }

  -> TypeSpecifier AbstractDeclarator     ;  // unnamed exception object
  -> "..."                                ;  // anything
}

nonterm ThrowExpression : HasVarsDecld {
  -> "throw" ;
  -> "throw" e:AssignmentExpression 
    { fun varsDecld { e.varsDecld(env); } }
}


// ------------------- GNU extensions -------------------
// just enough to get past them ..

// all operators/punctuators except "(" and ")"
nonterm GNUExprOp ->
  "[" | "]" | "->" | "::" | "." | "!" | "~" | "+" | "-" | "++" | "--" |
  "&" | "*" | ".*" | "->*" | "/" | "%" | "<<" | ">>" | "<" | "<=" | ">" |
  ">=" | "==" | "!=" | "^" | "|" | "&&" | "||" | "?" | ":" | "=" | "*=" |
  "/=" | "%=" | "+=" | "-=" | "&=" | "^=" | "|=" | "<<=" | ">>=" | "," |
  "..." | ";" | "{" | "}" ;

// all of them, I guess..
nonterm GNUExprKeyword ->
  "asm" | "auto" | "break" | "bool" | "case" | "catch" | "cdecl" | "char" |
  "class" | "const" | "const_cast" | "continue" | "default" | "delete" |
  "do" | "double" | "dynamic_cast" | "else" | "enum" | "explicit" | "extern" |
  "float" | "for" | "friend" | "goto" | "if" | "inline" | "int" | "long" |
  "mutable" | "new" | "operator" | "pascal" | "private" | "protected" |
  "public" | "register" | "reinterpret_cast" | "return" | "short" |
  "signed" | "sizeof" | "static" | "static_cast" | "struct" | "switch" |
  "template" | "this" | "throw" | "try" | "typedef" | "typeid" | "union" |
  "unsigned" | "virtual" | "void" | "volatile" | "wchar_t" | "while" ;


nonterm GNUAttribute -> "__attribute__" "(" "(" GNUExprSeq ")" ")";

// recognize grouping only
nonterm GNUExprSeq -> empty | GNUExpr GNUExprSeq ;
nonterm GNUExpr -> "(" GNUExprSeq ")"
                 | L2_NAME | GNUExprOp | GNUExprKeyword
                 | L2_INT_LITERAL | L2_STRING_LITERAL ;

nonterm GNUAsmStatement -> "asm" "(" GNUExprSeq ")" ";"
                         | "asm" "volatile" "(" GNUExprSeq ")" ";" ;


// -------------------------------------------------------
epilogue {

#include "trace.h"    // traceAddSys
#include "glr.h"      // StackNode::printAllocStats


#if 0   // not used; old test code
bool processNode(TreeNode const *n, void*)
{
  if (n->getSymbolC()->name.equals("FunctionDefinition")) {
    FunctionDefinition_Node const *fn = (FunctionDefinition_Node*)n;
    fn->printSig();
  }
  return false;    // continue
}

// this code went with it, in main
  // simple test: print all function definition signatures
  cout << "------ all function def signatures ------\n";
  top->walkTree(processNode);
#endif // 0


int main(int argc, char *argv[])
{
  try {
    // this program's exception-handling structure is mature
    // enough that printing all thrown exceptions has crossed
    // the line from helpful to annoying
    xBase::logExceptions = false;

    // place to store the tree
    ParseTreeAndTokens tree;

    // toplevel environment, in which each toplevel form
    // will be evaluated, just before that form is thrown
    // away
    traceAddSys("env-declare");
    Env env;

    // carry this context in the tree, since it is an argument
    // to node constructors
    tree.extra = &env;

    // use another try to catch ambiguities so we can
    // report them before the tree is destroyed
    try {
      // this sets everything in motion, including analysis of
      // tree, etc; it returns when the entire tree has been
      // processed
      treeMain(tree, argc, argv);
    }
    catch (XAmbiguity &x) {
      cout << x << endl;
      return 4;
    }
  }
  catch (xBase &x) {
    cout << "died on exception: " << x << endl;
    return 6;
  }

  // since this is outside all the scopes that create interesting
  // nodes, the stat counts should be 0
  TreeNode::printAllocStats();
  StackNode::printAllocStats();

  return 0;
}


} // epilogue
