#!/bin/sh
# setup a parsgen dist to build on linux

# this script is a poor stand-in until I get my act together
# and make a real configure script


usage() {
cat <<EOF
usage: $0 [options]
options:
  -h:                print this message
  -debug,-nodebug:   enable/disable debugging options [disabled]
  -loc,-noloc:       enable/disable source location tracking [enabled]
  -fastest:          turn off all Elkhound features that are not present
                     in Bison, for the purpose of performance comparison
                     (note that the C++ parser will not work in this mode)
  <op>:              add a given option to the gcc command line,
                       including forms: -W*, -pg, -D*, -O*
EOF
}


# defaults
BASE_FLAGS="-g -Wall -Wno-deprecated -D__LINUX__ -D__UNIX__"
CCFLAGS=""
debug=false
loc=true

# process command-line arguments
while [ "$1" != "" ]; do
  case $1 in
    -h|-help|--help)
      usage
      exit 0
      ;;

    # things that look like options to gcc should just
    # be added to CCFLAGS
    -W*|-pg|-D*|-O*)
      CCFLAGS="$CCFLAGS $1"
      ;;

    -d|-debug)
      debug=true
      ;;

    -nodebug)
      debug=false
      ;;

    -loc)
      loc=true
      ;;

    -noloc)
      loc=false
      ;;

    -fastest)
      # the idea is I can say
      #   $ ./configure -fastest
      #   $ make clean; make
      #   $ ./perf -tests c -iters 5
      # to verify that I'm still within 3% of Bison (at least
      # when compiled with gcc-2.95.3)
      loc=false
      debug=false
      CCFLAGS="$CCFLAGS -DUSE_RECLASSIFY=0 -DUSE_KEEP=0 -DNDEBUG_NO_ASSERTIONS"
      CCFLAGS="$CCFLAGS -DDO_ACCOUNTING=0 -DENABLE_YIELD_COUNT=0"
      ;;
  esac

  shift
done

if $loc; then
  true
else
  CCFLAGS="$CCFLAGS -DGLR_SOURCELOC=0"
fi

if $debug; then
  CCFLAGS="$CCFLAGS -DACTION_TRACE=1"
else
  CCFLAGS="$CCFLAGS -O2 -DNDEBUG"
fi


# create a program to summarize the configuration
cat >config.summary <<EOF
#!/bin/sh
# config.summary

echo "Elkhound configuration summary:"
echo "  debug:       $debug"
echo "  loc:         $loc"
echo ""
echo "Compile flags:"
echo "  BASE_FLAGS:  $BASE_FLAGS"
echo "  CCFLAGS:    $CCFLAGS"
echo ""
EOF

chmod a+x config.summary


# from here on, combine BASE_FLAGS and CCFLAGS
CCFLAGS="$BASE_FLAGS$CCFLAGS"


# create a program which will create the Makefile
cat >config.status <<__OUTER_EOF__
#!/bin/sh
# config.status

# this file was created by ./configure

# report on configuration
./config.summary

echo "creating Makefile"

# overcome my chmod below
rm -f Makefile

cat >Makefile <<EOF
# Makefile for parsgen
# NOTE: generated by ./configure, do not edit

EOF



# add in the Linux cflags for now..
cat Makefile.in | sed "s/@CCFLAGS@/$CCFLAGS/g" >> Makefile

# discourage editing ..
chmod a-w Makefile


__OUTER_EOF__


# run the output file generator
chmod a+x config.status
./config.status
