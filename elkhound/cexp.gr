# cexp.gr
# subgrammar for C expressions

# ------ tokens -------
# this list generated automatically by the lexer
#      canonical name      code   alias
#      ------------------  ----   ----------
%token L2_EOF                 0
%token L2_NAME                1
%token L2_INT_LITERAL         2
%token L2_FLOAT_LITERAL       3
%token L2_STRING_LITERAL      4
%token L2_CHAR_LITERAL        5
%token L2_ASM                 6   "asm"
%token L2_AUTO                7   "auto"
%token L2_BREAK               8   "break"
%token L2_BOOL                9   "bool"
%token L2_CASE               10   "case"
%token L2_CATCH              11   "catch"
%token L2_CDECL              12   "cdecl"
%token L2_CHAR               13   "char"
%token L2_CLASS              14   "class"
%token L2_CONST              15   "const"
%token L2_CONST_CAST         16   "const_cast"
%token L2_CONTINUE           17   "continue"
%token L2_DEFAULT            18   "default"
%token L2_DELETE             19   "delete"
%token L2_DO                 20   "do"
%token L2_DOUBLE             21   "double"
%token L2_DYNAMIC_CAST       22   "dynamic_cast"
%token L2_ELSE               23   "else"
%token L2_ENUM               24   "enum"
%token L2_EXPLICIT           25   "explicit"
%token L2_EXTERN             26   "extern"
%token L2_FLOAT              27   "float"
%token L2_FOR                28   "for"
%token L2_FRIEND             29   "friend"
%token L2_GOTO               30   "goto"
%token L2_IF                 31   "if"
%token L2_INLINE             32   "inline"
%token L2_INT                33   "int"
%token L2_LONG               34   "long"
%token L2_MUTABLE            35   "mutable"
%token L2_NEW                36   "new"
%token L2_OPERATOR           37   "operator"
%token L2_PASCAL             38   "pascal"
%token L2_PRIVATE            39   "private"
%token L2_PROTECTED          40   "protected"
%token L2_PUBLIC             41   "public"
%token L2_REGISTER           42   "register"
%token L2_REINTERPRET_CAST   43   "reinterpret_cast"
%token L2_RETURN             44   "return"
%token L2_SHORT              45   "short"
%token L2_SIGNED             46   "signed"
%token L2_SIZEOF             47   "sizeof"
%token L2_STATIC             48   "static"
%token L2_STATIC_CAST        49   "static_cast"
%token L2_STRUCT             50   "struct"
%token L2_SWITCH             51   "switch"
%token L2_TEMPLATE           52   "template"
%token L2_THIS               53   "this"
%token L2_THROW              54   "throw"
%token L2_TRY                55   "try"
%token L2_TYPEDEF            56   "typedef"
%token L2_TYPEID             57   "typeid"
%token L2_UNION              58   "union"
%token L2_UNSIGNED           59   "unsigned"
%token L2_VIRTUAL            60   "virtual"
%token L2_VOID               61   "void"
%token L2_VOLATILE           62   "volatile"
%token L2_WCHAR_T            63   "wchar_t"
%token L2_WHILE              64   "while"
%token L2_LPAREN             65   "("
%token L2_RPAREN             66   ")"
%token L2_LBRACKET           67   "["
%token L2_RBRACKET           68   "]"
%token L2_ARROW              69   "->"
%token L2_COLONCOLON         70   "::"
%token L2_DOT                71   "."
%token L2_BANG               72   "!"
%token L2_TILDE              73   "~"
%token L2_PLUS               74   "+"
%token L2_MINUS              75   "-"
%token L2_PLUSPLUS           76   "++"
%token L2_MINUSMINUS         77   "--"
%token L2_AND                78   "&"
%token L2_STAR               79   "*"
%token L2_DOTSTAR            80   ".*"
%token L2_ARROWSTAR          81   "->*"
%token L2_SLASH              82   "/"
%token L2_PERCENT            83   "%"
%token L2_LEFTSHIFT          84   "<<"
%token L2_RIGHTSHIFT         85   ">>"
%token L2_LESSTHAN           86   "<"
%token L2_LESSEQ             87   "<="
%token L2_GREATERTHAN        88   ">"
%token L2_GREATEREQ          89   ">="
%token L2_EQUALEQUAL         90   "=="
%token L2_NOTEQUAL           91   "!="
%token L2_XOR                92   "^"
%token L2_OR                 93   "|"
%token L2_ANDAND             94   "&&"
%token L2_OROR               95   "||"
%token L2_QUESTION           96   "?"
%token L2_COLON              97   ":"
%token L2_EQUAL              98   "="
%token L2_STAREQUAL          99   "*="
%token L2_SLASHEQUAL        100   "/="
%token L2_PERCENTEQUAL      101   "%="
%token L2_PLUSEQUAL         102   "+="
%token L2_MINUSEQUAL        103   "-="
%token L2_ANDEQUAL          104   "&="
%token L2_XOREQUAL          105   "^="
%token L2_OREQUAL           106   "|="
%token L2_LEFTSHIFTEQUAL    107   "<<="
%token L2_RIGHTSHIFTEQUAL   108   ">>="
%token L2_COMMA             109   ","
%token L2_ELLIPSIS          110   "..."
%token L2_SEMICOLON         111   ";"
%token L2_LBRACE            112   "{"
%token L2_RBRACE            113   "}"
# ------ end of tokens ------


Input -> Expr L2_EOF

# primary expressions
e:Expr -> L2_NAME                             # identifier
  %action { e.prec := 100 }

# binary operator expression
result:Expr -> left:Expr op:Binop right:Expr
  %action { result.prec := op.prec }
  %condition { (<= result.prec left.prec) }         # precedence
  %condition { (<= result.prec right.prec) }        # more precedence
  %condition { (if (== op.leftAssoc 1) (< result.prec right.prec) (< result.prec left.prec)) }
    # associativity

op:Binop -> "*" | "/" | "%"
  %action { op.prec := 60 }
  %action { op.leftAssoc := 1 }

op:Binop -> "+" | "-"
  %action { op.prec := 56 }
  %action { op.leftAssoc := 1 }

op:Binop -> "<<" | ">>"
  %action { op.prec := 52 }
  %action { op.leftAssoc := 1 }

op:Binop -> "<" | ">" | "<=" | ">="
  %action { op.prec := 48 }
  %action { op.leftAssoc := 1 }

op:Binop -> "==" | "!="
  %action { op.prec := 44 }
  %action { op.leftAssoc := 1 }

op:Binop -> "&"
  %action { op.prec := 40 }
  %action { op.leftAssoc := 1 }

op:Binop -> "^"
  %action { op.prec := 36 }
  %action { op.leftAssoc := 1 }

op:Binop -> "|"
  %action { op.prec := 32 }
  %action { op.leftAssoc := 1 }

op:Binop -> "&&"
  %action { op.prec := 28 }
  %action { op.leftAssoc := 1 }

op:Binop -> "||"
  %action { op.prec := 24 }
  %action { op.leftAssoc := 1 }

