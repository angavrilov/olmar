; misc3.sx    -*- lisp -*-


bg_push (
;  (EQ (length (sel mem_1 addr_arr_0)) 5)
;  (FORALL (j_0 ) (IMPLIES (AND (<= 0 j_0) (< j_0 (length (sel mem_1 addr_arr_0)))) (EQ (sel (sel (sel mem_1 addr_arr_0) j_0) 1) 1)))
;  (okSel mem_1 addr_arr_0)
;  (EQ tmp_0 (sub tmp_index_0 tmp_rest_0))
;  (EQ (sel tmpOwner_0 0) (sub tmpOwner_index_0 tmpOwner_rest_0))
;  (DISTINCT addr_arr_8 0)
  (EQ (length (sel mem_12 addr_arr_8)) 5)
  (FORALL (j_28 ) 
    (IMPLIES 
      (AND (<= 0 j_28) (< j_28 (length (sel mem_12 addr_arr_8)))) 
      (EQ (sel (sel (sel mem_12 addr_arr_8) j_28) 1) 1)
    ))
;  (okSel mem_12 addr_arr_8)
  (>= i_8 0)
  (< i_8 5)
;  (FORALL (j_27 ) (IMPLIES (AND (<= 0 j_27) (< j_27 i_8)) (EQ (selOffset mem_12 (appendIndex (addOffset (sub addr_arr_8 (sub 0 whole)) j_27) 1)) 2)))
;  (FORALL (j_29 ) (IMPLIES (AND (<= 0 j_29) (< j_29 i_8)) (AND (NEQ (selOffset mem_12 (appendIndex (addOffset (sub addr_arr_8 (sub 0 whole)) j_29) 0)) (sub 0 whole)) (okSelOffset mem_12 (selOffset mem_12 (appendIndex (addOffset (sub addr_arr_8 (sub 0 whole)) j_29) 0))))))
  (FORALL (j_30 ) 
    (IMPLIES 
      (AND (<= i_8 j_30) (< j_30 5)) 
      (EQ (selOffset 
             mem_12
             (appendIndex (addOffset (sub addr_arr_8 (sub 0 whole)) j_30) 1)) 
          0)
    ))
;  (EQ mem_12 (sub pre_mem_index_0 pre_mem_rest_0))
;  (EXISTS (address_0 ) (AND (NEQ address_0 0) (EQ (selOffset result_0 (sub 0 whole)) (sub address_0 0)) (EQ (selOffset result_0 (sub 1 whole)) 2) (NOT (okSel mem_12 address_0)) (okSel mem_13 address_0) (EXISTS (initVal_0 ) (EQ mem_13 (upd mem_12 address_0 initVal_0)))))
  (EQ mem_14 (updOffset 
                mem_13
                (addOffset (sub addr_arr_8 (sub 0 whole)) i_8)
                result_0))
  (NOT (< (+ i_8 1) 5))
)
valid "implications" (
  (EQ i_8 4)
)
valid "goal" (
  FALSE
)
bg_pop
stop



bg_push (
  (EQ result_1 (sub (firstIndexOf result_1) 0))
  (NEQ (firstIndexOf result_1) 0)
  (okSel mem_12 (firstIndexOf result_1))
  (EQ address_1 (firstIndexOf result_1))
  (NOT (okSel mem_11 address_1))
  (okSelOffsetRange mem_12 (appendIndex result_1 0) 8)
  (EQ mem_12 (upd mem_11 address_1 initVal_1))
  (EQ (typeOf (firstIndexOf result_1)) 1)
  (EQ mem_13 (updOffset mem_12 (appendIndex result_1 0) x_3))
  (EQ mem_14 (updOffset mem_13 (appendIndex result_1 1) (- x_3 1)))
)
valid "implications" (
  (EQ mem_12 (upd mem_11 address_1 initVal_1))
  (EQ mem_13 (upd mem_12 address_1 
                  (upd (sel mem_12 address_1) 0 x_3)))
                  
  (IMPLIES
    (NEQ addr2 address_1)
    (EQ 
      (sel mem_13 addr2)
      (sel mem_11 addr2)
    ))
)
valid "goal" (
;  (equalMemory mem_13 (upd mem_11 address_1
;                           (sel mem_13 address_1)))
  (EQ mem_13 (upd mem_11 address_1
                  (sel mem_13 address_1)))
)
bg_pop
stop



bg_push (
  (EQ g1_17 (sub g1_index_17 g1_rest_17))
  (EQ g2_6 (sub g2_index_6 g2_rest_6))
  (EQ g3_11 (sub g3_index_11 g3_rest_11))
  (DISTINCT 0)
  (uncheckedAccess mem_29)
  (FORALL (addr_13 ) 
    (IMPLIES 
      (EQ (typeOf addr_13) 1) 
      (> (sel (sel mem_29 addr_13) 0) 
         (sel (sel mem_29 addr_13) 1)
    )))
  (EQ g1_18 (sub g1_index_18 g1_rest_18))
  (EQ g2_7 (sub g2_index_7 g2_rest_7))
  (EQ g3_12 (sub g3_index_12 g3_rest_12))
  (EQ mem_29 (sub pre_mem_index_2 pre_mem_rest_2))
  (uncheckedAccess mem_30)
  (EXISTS (address_2 initVal_3 )
    (AND
      (NEQ address_2 0)
      (EQ result_3 (sub address_2 0))
      (NOT (okSel mem_29 address_2))
      (okSel mem_30 address_2)
      (okSelOffsetRange mem_30 (appendIndex result_3 0) 8)
      (EQ mem_30 (upd mem_29 address_2 initVal_3))
    ))
  (EQ (typeOf (firstIndexOf result_3)) 1)
  (EQ mem_31 (updOffset mem_30 (appendIndex result_3 0) 5))
  (EQ mem_32 (updOffset mem_31 (appendIndex result_3 1) 4))
  (uncheckedAccess mem_33)
  (FORALL (addr_17 )
    (IMPLIES
      (EQ (typeOf addr_17) 1)
      (> (sel (sel mem_33 addr_17) 0)
         (sel (sel mem_33 addr_17) 1))
    ))
  (EQ result_4 (sub (firstIndexOf result_4) 0))
  (NOT (okSel mem_32 (firstIndexOf result_4)))
  (okSel mem_33 (firstIndexOf result_4))
  (okSelOffsetRange mem_33 (appendIndex result_4 0) 2)
  (EXISTS (initVal_4 )
    (EQ mem_33 (upd mem_32 (firstIndexOf result_4) initVal_4)))
  (EQ (selOffset mem_33 (appendIndex result_4 0)) 7)
  (EQ mem_34 (updOffset mem_33 (appendIndex result_4 1) 30))
  (EQ (typeOf (firstIndexOf result_4)) 2)
)
valid "goal" (
  (FORALL (addr_18 )
    (IMPLIES
      (EQ (typeOf addr_18) 1)
      (> (sel (sel mem_34 addr_18) 0)
         (sel (sel mem_34 addr_18) 1))))
)
bg_pop
stop



bg_push (
  (EQ g1_7 (sub g1_index_7 g1_rest_7))
  (EQ g2_1 (sub g2_index_1 g2_rest_1))
  (DISTINCT 0)
  (uncheckedAccess mem_14)
  (FORALL (addr_6 ) 
    (IMPLIES 
      (EQ (typeOf addr_6) 1) 
      (> (sel (sel mem_14 addr_6) 0) 
      (sel (sel mem_14 addr_6) 1))))
  (EQ g1_8 (sub g1_index_8 g1_rest_8))
  (EQ g2_2 (sub g2_index_2 g2_rest_2))
  (EQ mem_14 (sub pre_mem_index_1 pre_mem_rest_1))
  (uncheckedAccess mem_15)
;  (EXISTS (address_1 initVal_1 )
;    (AND
      (NEQ address_1 0)
      (EQ result_1 (sub address_1 0))
      (NOT (okSel mem_14 address_1))
      (okSel mem_15 address_1)
      (okSelOffsetRange mem_15 (appendIndex result_1 0) 8)
      (EQ mem_15 (upd mem_14 address_1 initVal_1))
;    ))
  (EQ (typeOf (firstIndexOf result_1)) 1)
  (EQ mem_16 (updOffset mem_15 (appendIndex result_1 0) 5))
  (EQ mem_17 (updOffset mem_16 (appendIndex result_1 1) 4))

  ; from goal..
  (EQ (typeOf addr_8) 1)

  (NEQ addr_8 address_1)
)
valid "implications" (
  (EQ mem_16 (upd mem_15 address_1 (upd (sel mem_15 address_1) 0 5)))
  (EQ mem_17 (upd mem_16 address_1 (upd (sel mem_16 address_1) 1 4)))
)
valid "goal" (
  (> (sel (sel mem_17 addr_8) 0)
     (sel (sel mem_17 addr_8) 1))
)
bg_pop
