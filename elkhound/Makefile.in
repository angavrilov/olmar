# Makefile.in
# source for Makefile for parser generator project

OCAMLINCL mode = --ocaml
NOCAMLINCL mode = --nocaml

temporary: check-makefiles grampar gramanl cexp3 cdecl

# main targets
all: check-makefiles ccgr

# this target ensures the Makefile is in synch with Makefile.in
check-makefiles:
	@if [ Makefile -ot Makefile.in ]; then             \
          echo "Makefile.in has changed; I will now do:" ; \
          echo "  % ./configure ${mode} --setupMakefile" ; \
          ./configure ${mode} --setupMakefile ;            \
          echo "" ;                                        \
          echo "Now try running make again" ;              \
          exit 2 ;                                         \
        fi

everything: gramanl glr lexer1 lexer2 grampar cexp2 ccgr

# directories; let's just assume it's a symlink, and
# ./configure will make that link
SMBASE = smbase
AST = ../ast

# dependencies
libraries = ${SMBASE}/libsmbase.a
includes = -I${SMBASE} -I$(AST)

# ocaml stuff -- ./configure will either leave these lines
# in (removing "OCAMLINCL" of course for --ocaml) or will
# take them out for --nocaml
OCAMLINCL libraries += /usr/lib/ocaml/libunix.a /usr/lib/ocaml/libcamlrun.a
OCAMLINCL includes += -I/usr/lib/ocaml
OCAMLINCL ccflags += -DWES_OCAML_LINKAGE
OCAMLINCL cflags += -DWES_OCAML_LINKAGE

# make warnings into errors so I always get a chance to fix them
ccflags = -Werror

# when uncommented, we get profiling info
#ccflags = -pg

# optimizer...
#ccflags = -O2

# pull in base stuff
include ${SMBASE}/Makefile.base.mk

# sets of related object files
# files needed to represent a grammar in memory
grammar-set = grammar.o locstr.o asockind.o

# in addition to grammar-set, files needed to parse a grammar description
grampar-set = grampar.tab.o gramlex.yy.o grampar.o gramlex.o \
              ast.o fileloc.o ccsstr.o ../ast/embedded.o \
              gramast.gen.o strtable.o ../ast/asthelp.o emitcode.o

# in addition to grammar-set, file needed to do GLR parsing of C/C++ code
glr-set = gramanl.o glr.o lexer1.o lexer1yy.o lexer2.o parssppt.o

# files involved in translating parsed C/C++ code
cc-set = cc_tree.o cc_type.o cc_env.o cc_err.o dataflow.o cil.o \
         stmt2bb.o cc_parse.o mlvalue.o cilxform.o newlval.o

# stuff needed everywhere
common = 

# how to compile a .o in an adjacent directory
$(AST)/%.o: $(AST)/%.cc
	make -C $(AST) $*.o

# some random dependencies
attrexpr.o: grampar.codes.h

# ------ targets -------
# reads the grammar and emits C++ code for semantic functions
gramanl-dep = gramanl.cc ${grammar-set} ${common} ${grampar-set} \
              lexer2stub.o
gramanl: ${gramanl-dep} grammar.h gramanl.h 
	${link} -o gramanl -DGRAMANL_MAIN ${gramanl-dep} ${linkend}

# GLR parser built on top of SLR(1) parser
glr-dep = glr.cc ${grammar-set} ${common} ${grampar-set} gramanl.o \
          glrtree.o lexer1.o lexer1yy.o lexer2.o parssppt.o \
          parsstub.o strtable.o
glr: ${glr-dep} glr.h ${SMBASE}/libsmbase.a
	${link} -o glr -DGLR_MAIN ${glr-dep} ${linkend}

lexer1yy.cc: lexer1.lex lexer1.h
	flex lexer1.lex

# first pass lexer
lexer1-dep = lexer1.cc ${common} lexer1yy.o fileloc.o
lexer1: ${lexer1-dep} ${SMBASE}/libsmbase.a
	${link} -o lexer1 -DTEST_LEXER1 ${lexer1-dep} ${linkend}

# second pass lexer
lexer2-dep = lexer2.cc ${common} lexer1.o lexer1yy.o fileloc.o \
             strtable.o
lexer2: ${lexer2-dep} lexer2.h
	${link} -o lexer2 -DTEST_LEXER2 ${lexer2-dep} ${linkend}

# grammar lexer
gramlex.yy.cc: gramlex.lex
	flex -ogramlex.yy.cc gramlex.lex                     

gramlex.yy.o: gramlex.h gramlex.cc grampar.codes.h

# grammar lexer test program
gramlex-dep = gramlex.yy.cc gramlex.cc fileloc.o ccsstr.o ${common} \
              $(AST)/embedded.o
gramlex: gramlex.h ${gramlex-dep}
	${link} -o gramlex -DTEST_GRAMLEX ${gramlex-dep} ${linkend}

# grammar syntax ast definition
gramast.gen.h gramast.gen.cc: gramast.ast ../ast/astgen
	../ast/astgen gramast.ast

# grammar parser
grampar.tab.cc grampar.tab.h grampar.codes.h: grampar.y gramast.gen.h
	bison -d -v grampar.y
	mv -f grampar.tab.c tmp
	sed 's/typedef union {/typedef union YYSTYPE {/' < tmp > grampar.tab.cc
	mv -f grampar.tab.h tmp
	sed 's/typedef union {/typedef union YYSTYPE {/' < tmp > grampar.tab.h
	rm tmp
	grep '#define' grampar.tab.h > grampar.codes.h

# grammar parser test program
grampar: grampar.cc ${grammar-set} ${common} gramlex.yy.o grampar.tab.o \
         gramlex.o ast.o fileloc.o gramast.gen.o ccsstr.o \
         lexer2stub.o ../ast/embedded.o strtable.o ../ast/asthelp.o \
         ${libraries}
	${link} -o grampar -DTEST_GRAMPAR $^

# token list for my grammar
cc.tok: lexer2
	./lexer2 myparser > cc.tok

# C expression (sort of) evaluator
cexp2-sem-dep = cexp2.sem.cc ${grammar-set} ${common} ${glr-set} \
		grampar.tab.o gramlex.yy.o \
		grampar.o gramlex.o ast.o fileloc.o gramast.o
cexp2.sem: ${cexp2-sem-dep}
	${link} -o cexp2.sem -DTEST_CEXP2_SEM ${cexp2-sem-dep} ${linkend}

# test code for ccsstr
ccsstr: ccsstr.cc ccsstr.h $(AST)/reporterr.o  $(AST)/embedded.o
	${link} -o ccsstr -DTEST_CCSSTR ccsstr.cc \
                $(AST)/reporterr.o $(AST)/embedded.o ${linkend}

# intermediate files for cexp2
# ('chmod a-w' is so I don't accidentally edit them)
cexp2.cc cexp2.h: cexp2.gr gramanl
	rm -f cexp2.{h,cc}
	./gramanl cexp2
	chmod a-w cexp2.cc cexp2.h

# parser and semantic analyzer for cexp2.gr
cexp2-dep = cexp2.o ${grammar-set} ${common} ${grampar-set} \
            ${glr-set}
cexp2: ${cexp2-dep} cexp2.h
	${link} -o cexp2 ${cexp2-dep} ${linkend}

# intermediate files for cexp3
# ('chmod a-w' is so I don't accidentally edit it)
cexp3.cc: cexp3.gr gramanl cexp3ast.gen.h
	rm -f cexp3.cc
	./gramanl cexp3
	chmod a-w cexp3.cc

# ast for cexp3
cexp3ast.gen.cc cexp3ast.gen.h: cexp3ast.ast ../ast/astgen
	../ast/astgen cexp3ast.ast

# parser and semantic analyzer for cexp3.gr
cexp3-dep = cexp3.o ${grammar-set} ${common} ${grampar-set} \
            ${glr-set} glrmain.o cexp3mrg.o cexp3ast.gen.o
cexp3: ${cexp3-dep} ${libraries}
	${link} -o cexp3 ${cexp3-dep} ${linkend}
	./cexp3 cexp3.bin cexp3.in1

# intermediate files for cdecl
cdecl.cc: cdecl.gr gramanl
	rm -f cdecl.cc
	./gramanl cdecl
	chmod a-w cdecl.cc

# ast for cdecl
#cdeclast.gen.cc cdeclast.gen.h: cdeclast.ast ../ast/astgen
#	../ast/astgen cdeclast.ast

# parser and semantic analyzer for cdecl.gr
cdecl-dep = cdecl.o ${grammar-set} ${common} ${grampar-set} \
            ${glr-set}
cdecl: ${cdecl-dep} ${libraries}
	${link} -o cdecl ${cdecl-dep} ${linkend}
	./cdecl cdecl.bin cdecl.in1

# intermediate files for ccgr (the chmod is to make it harder
# to accidentally start editing files that are automatically 
# generated)
cc.cc cc.h: cc.gr cc.tok gramanl
	rm -f cc.{h,cc}
	./gramanl -tr nolines cc
	chmod a-w cc.cc cc.h

# (called the target 'ccgr' instead of 'cc' to avoid name collision)
# tried moving cc.o to end so the most expensive part would get
# done last, but that breaks a dependency with cc_tree.cc and cc.h ..)
ccgr-dep = cc.o ${grammar-set} ${common} ${grampar-set} \
           ${glr-set} ${cc-set}

# parser and semantic analyzer for cc.gr, rolled up as a library for
# easier importing into ocaml
# turns out if you don't remove the library, there's a possibility
# of old object files staying in it .. !
libccgr.a: ${ccgr-dep} cc.h
	rm -f libccgr.a
	ar -r libccgr.a ${ccgr-dep}
	ranlib libccgr.a

# stand-alone executable
ccgr: libccgr.a
NOCAMLINCL	${link} -o ccgr libccgr.a ${linkend}
OCAMLINCL	@echo "we don't build ccgr in ocaml mode"

clean:
	rm -f gramanl glr lexer1 lexer1yy.cc gramlex.yy.cc gramlex *.o *~
	rm -f lexer2 grampar.tab.* grampar a.out
	rm -f cexp2.sem ccsstr cexp2.{h,cc} cexp2 cc.{h,cc} ccgr libccgr.a
	rm -f towner cc.gr.ps
	rm -f cdecl.{cc,bin} cdecl cexp3.{cc,bin} cexp3

# regression tests
check-cexp2: cexp2
	./cexp2 cexp2.bin cexp2.in2

check: check-cexp2 ccgr gramanl
	./gramanl --testRW ffollow
	./ccgr cc.bin c.in1
	@echo ./ccgr cc.bin c.in4 DOES NOT WORK
	./ccgr cc.bin qpmouse.cpp
	@echo ""
	@echo "Regression tests passed."

# --------------- random other stuff --------------------
# printable version of the C++ grammar; removes the '// C++' tags
# because they just wrap onto next line and mess things up
cc.gr.ps:
	sed 's#[ 	]*// C[+][+].*##' < cc.gr \
	  | enscript -2r --output=cc.gr.ps ; true

# test for owner
towner: owner.h towner.cc
	${link} -o towner towner.cc

# test for rcptr
trcptr: rcptr.h trcptr.cc
	${link} -o trcptr trcptr.cc
