# Makefile.in
# source for Makefile for parser generator project

temporary: ccgr bccgr

# main targets
all: ccgr

ifeq ($(ocaml), yes)
  mode := --ocaml
else
  mode := --nocaml
endif

# this target ensures the Makefile is in synch with Makefile.in
Makefile: Makefile.in
	./configure $(mode) --setupMakefile

everything: gramanl glr lexer1 lexer2 grampar cexp2 ccgr

# directories
SMBASE := smbase
AST    := ../ast

# translation process variables
libraries   := $(SMBASE)/libsmbase.a
includes    := -I$(SMBASE) -I$(AST) -I.
ccflags     := -g -Wall @CCFLAGS@
no-warnings := -w
makelib     := ar -r
ranlib      := ranlib

ifeq ($(ocaml), yes)
  libraries += /usr/lib/ocaml/libunix.a /usr/lib/ocaml/libcamlrun.a
  includes  += -I/usr/lib/ocaml
  ccflags   += -DWES_OCAML_LINKAGE
endif

# make warnings into errors so I always get a chance to fix them
ccflags += -Werror

# when uncommented, we get profiling info
#ccflags += -pg

# optimizer...
ccflags += -O2 -DNDEBUG

# flags on command line
ccflags+= $(EXTRA)

compile := g++ -c $(ccflags) $(includes)
depend  := g++ -MM $(ccflags) $(includes)
link    := g++ $(ccflags) $(includes)
linkend := $(libraries)

# compile .cc to .o; dependency manipulation involves:
#   sed:    strip the target (everything before colon)
#   sed:    remove any continuation backslashes
#   fmt -1: list words one per line
#   sed:    strip leading spaces
#   sed:    add trailing colons
%.o : %.cc
	$(compile) $< -o $@
	@$(depend) $< > $*.d
	@cp -f $*.d $*.d.tmp
	@sed -e 's/.*://' -e 's/\\$$//' < $*.d.tmp | fmt -1 | \
          sed -e 's/^ *//' -e 's/$$/:/' >> $*.d
	@rm -f $*.d.tmp

# sets of related object files
# files needed to represent a grammar in memory
grammar-set := grammar.o $(AST)/locstr.o asockind.o
-include $(filter-out $(AST)/%, $(grammar-set:.o=.d))

# in addition to grammar-set, files needed to parse a grammar description
grampar-set := grampar.tab.o gramlex.yy.o grampar.o $(AST)/gramlex.o \
               ast.o $(AST)/fileloc.o $(AST)/ccsstr.o $(AST)/embedded.o \
               gramast.ast.gen.o $(AST)/strtable.o $(AST)/asthelp.o emitcode.o
#-include $(filter-out $(AST)/% %.gen.d %.tab.d, $(grampar-set:.o=.d))
-include $(filter-out $(AST)/%, $(grampar-set:.o=.d))

# in addition to grammar-set, file needed to do GLR parsing of C/C++ code
glr-set := gramanl.o glr.o lexer1.o lexer1yy.o lexer2.o parssppt.o \
           useract.o
-include $(glr-set:.o=.d)

# files involved in translating parsed C/C++ code
#cc-set := cc_tree.o cc_type.o cc_env.o cc_err.o dataflow.o cil.o \
#          stmt2bb.o cc_parse.o mlvalue.o cilxform.o newlval.o
cc-set := cparse.o cc_type.o cc_env.o
-include $(cc-set:.o=.d)

# stuff needed everywhere
common := 
#-include $(common:.o=.d)

# how to compile a .o in an adjacent directory (looser dependency
# tracking across directories...)
$(AST)/%.o: $(AST)/%.cc
	make -C $(AST) $*.o

# some random dependencies
# update: should be unnecessary if .d stuff works
#attrexpr.o: grampar.codes.h

# a few random .o files which don't appear anyplace above, but I need
# to make sure their dependency info (if it exists) gets included
random-obj := lexer2stub.o glrtree.o parsstub.o cexp2.o cexp3.gen.o \
              glrmain.o cexp3mrg.o cexp3ast.gen.o cdecl.gen.o \
              ccgrmain.o
-include $(random-obj:.o=.d)

# ------ targets -------
# reads the grammar and emits C++ code for semantic functions
gramanl-dep := gramanl.cc gramexpl.o $(grammar-set) $(common) $(grampar-set) \
               lexer2stub.o $(libraries)
gramanl: $(gramanl-dep) grammar.h gramanl.h
	$(link) -o gramanl -DGRAMANL_MAIN $(gramanl-dep)

# GLR parser built on top of SLR(1) parser
glr-dep := glr.cc $(grammar-set) $(common) $(grampar-set) gramanl.o \
           glrtree.o lexer1.o lexer1yy.o lexer2.o parssppt.o \
           parsstub.o $(AST)/strtable.o $(libraries)
glr: $(glr-dep) glr.h
	$(link) -o glr -DGLR_MAIN $(glr-dep)

lexer1yy.cc: lexer1.lex lexer1.h
	flex lexer1.lex

# first pass lexer
lexer1-dep := lexer1.cc $(common) lexer1yy.o fileloc.o $(libraries)
lexer1: $(lexer1-dep)
	$(link) -o lexer1 -DTEST_LEXER1 $(lexer1-dep)

# second pass lexer
lexer2-dep := lexer2.cc $(common) lexer1.o lexer1yy.o $(AST)/fileloc.o \
              $(AST)/strtable.o $(libraries)
lexer2: $(lexer2-dep) lexer2.h
	$(link) -o lexer2 -DTEST_LEXER2 $(lexer2-dep)

# grammar lexer
gramlex.yy.cc: gramlex.lex
	flex -ogramlex.yy.cc gramlex.lex                     

# should be redundant with new dependency system
#gramlex.yy.o: $(AST)/gramlex.h $(AST)/gramlex.cc grampar.codes.h

# grammar lexer test program
gramlex-dep := gramlex.yy.cc gramlex.cc $(AST)/fileloc.o $(AST)/ccsstr.o $(common) \
               $(AST)/embedded.o $(libraries)
gramlex: gramlex.h $(gramlex-dep)
	$(link) -o gramlex -DTEST_GRAMLEX $(gramlex-dep)

# grammar parser
grampar.tab.cc grampar.tab.h grampar.codes.h: grampar.y gramast.ast.gen.h
	bison -d -v grampar.y
	mv -f grampar.tab.c tmp
	sed 's/typedef union {/typedef union YYSTYPE {/' < tmp > grampar.tab.cc
	mv -f grampar.tab.h tmp
	sed 's/typedef union {/typedef union YYSTYPE {/' < tmp > grampar.tab.h
	rm tmp
	grep '#define' grampar.tab.h > grampar.codes.h

# grammar parser test program
grampar: grampar.cc $(grammar-set) $(common) gramlex.yy.o grampar.tab.o \
         $(AST)/gramlex.o ast.o $(AST)/fileloc.o gramast.ast.gen.o $(AST)/ccsstr.o \
         lexer2stub.o $(AST)/embedded.o $(AST)/strtable.o $(AST)/asthelp.o \
         $(libraries)
	$(link) -o grampar -DTEST_GRAMPAR $^

# token list for my grammar
cc.tok: lexer2
	./lexer2 myparser > cc.tok

# C expression (sort of) evaluator
cexp2-sem-dep := cexp2.sem.cc $(grammar-set) $(common) $(glr-set) \
                 $(grampar-set) $(libraries)
cexp2.sem: $(cexp2-sem-dep)
	$(link) -o cexp2.sem -DTEST_CEXP2_SEM $(cexp2-sem-dep)

# intermediate files for cexp2
# ('chmod a-w' is so I don't accidentally edit them)
cexp2.cc cexp2.h: cexp2.gr gramanl
	rm -f cexp2.{h,cc}
	./gramanl cexp2
	chmod a-w cexp2.cc cexp2.h

# parser and semantic analyzer for cexp2.gr
cexp2-dep := cexp2.o $(grammar-set) $(common) $(grampar-set) \
             $(glr-set) $(libraries)
cexp2: $(cexp2-dep) cexp2.h
	$(link) -o cexp2 $(cexp2-dep)

# glr parsing engine
libglr-dep := $(grammar-set) $(common) $(grampar-set) $(glr-set)
libglr.a: $(libglr-dep)
	rm -f libglr.a
	ar -r libglr.a $(libglr-dep)
	ranlib libglr.a

# intermediate files for cexp3 (disambiguates using prec/assoc)
# ('chmod a-w' is so I don't accidentally edit it)
cexp3.gr.gen.cc cexp3.gr.gen.h: cexp3.gr cc.tok gramanl
	rm -f cexp3.gr.gen.*
	./gramanl cexp3
	chmod a-w cexp3.gr.gen.{h,cc}

cexp3ast.h cexp3ast.cc: cexp3ast.ast
	../../ast/astgen cexp3ast.ast

# AUXDEPEND
cexp3.gen.o: cexp3ast.h

# ast for cexp3
# (these rules should be superceded by pattern rule below)
#cexp3ast.gen.cc cexp3ast.gen.h: cexp3ast.ast $(AST)/astgen
#	$(AST)/astgen cexp3ast.ast

# parser and semantic analyzer for cexp3.gr
cexp3-dep := cexp3.gr.gen.o glrmain.o cexp3mrg.o cexp3ast.o \
             cc_lang.o libglr.a $(libraries)
cexp3: $(cexp3-dep)
	$(link) -o cexp3 $(cexp3-dep)
	./cexp3 cexp3.bin cexp3.in1

# intermediate files for a grammar
# ('chmod a-w' is so I don't accidentally edit it)
%.gr.gen.cc %.gr.gen.h: %.gr cc.tok gramanl
	rm -f $*.gr.gen.*
	./gramanl -tr conflict $*
	chmod a-w $*.gr.gen.{h,cc}

# intermediate files for an ast spec
%.ast.gen.cc %.ast.gen.h: %.ast $(AST)/astgen
	rm -f $*.ast.gen.*
	$(AST)/astgen -b$*.ast.gen $*.ast
	chmod a-w $*.ast.gen.{h,cc}

# without this these get deleted when errors occur, and I can't
# look at the offending source lines!
.PRECIOUS: c.ast.gen.cc c.ast.gen.h

# cexp3b: disambiguation using 'merge'
cexp3b.gr: cexp3.gr
	rm -f cexp3b.gr
	grep -v PREC cexp3.gr > cexp3b.gr
	chmod a-w cexp3b.gr

# parser and semantic analyzer for cexp3b.gr
cexp3b-dep := cexp3b.gen.o glrmain.o cexp3mrg.o cexp3ast.gen.o libglr.a $(libraries)
cexp3b: $(cexp3b-dep)
	$(link) -o cexp3b $(cexp3b-dep)
	./cexp3b cexp3b.bin cexp3.in1

# intermediate files for cdecl
# (superceded by pattern rule)
#cdecl.gen.cc cdecl.gen.h: cdecl.gr cc.tok gramanl
#	rm -f cdecl.gen.*
#	./gramanl cdecl
#	chmod a-w cdecl.gen.{h,cc}

# parser and semantic analyzer for cdecl.gr
cdecl-dep := cdecl.gen.o glrmain.o libglr.a $(libraries)
cdecl: $(cdecl-dep)
	$(link) -o cdecl $(cdecl-dep)
	./cdecl cdecl.bin cdecl.in1
	./cdecl -tr cdecl cdecl.bin cdecl.in1 | grep -v progress > tmp
	diff cdecl.out1 tmp

# intermediate files for cdecl2
# (superceded by pattern rule)
#cdecl2.gen.cc cdecl2.gen.h: cdecl2.gr cc.tok gramanl
#	rm -f cdecl2.gen.*
#	./gramanl cdecl2
#	chmod a-w cdecl2.gen.{h,cc}

# parser and semantic analyzer for cdecl2.gr
cdecl2-dep := cdecl2.gen.o glrmain.o libglr.a $(libraries)
cdecl2: $(cdecl2-dep)
	$(link) -o cdecl2 $(cdecl2-dep)
	./cdecl2 cdecl2.bin cdecl.in1
	./cdecl2 -tr cdecl cdecl2.bin cdecl.in1 | grep -v progress > tmp
	diff cdecl.out1 tmp

#.PRECIOUS: cdecl2

# intermediate files for ccgr (the chmod is to make it harder
# to accidentally start editing files that are automatically 
# generated)
# (superceded by pattern rule)
#cc.gr.gen.cc cc.gr.gen.h: cc.gr cc.tok gramanl
#	rm -f cc.gr.gen.*
#	./gramanl -tr conflict cc
#	chmod a-w cc.gr.gen.*

# AUXDEPEND (should be redundant)
cc.gr.gen.o: c.ast.gen.h

# (called the target 'ccgr' instead of 'cc' to avoid name collision)
# tried moving cc.o to end so the most expensive part would get
# done last, but that breaks a dependency with cc_tree.cc and cc.h ..)
ccgr-dep := cc.gr.gen.o c.ast.gen.o cc_flags.o tcheck.o variable.o \
            absval.ast.gen.o vcgen.o aenv.o prover.o \
            predicate.ast.gen.o paths.o $(cc-set) postorder.o \
            factflow.o exprvisit.o exprequal.o cc_lang.o
# don't generate dependencies for *.gen.o, since it makes 'make' think
# it needs to rebuild a bunch of stuff just to calculate dependencies
#-include $(filter-out %.gen.d, $(ccgr-dep:.o=.d))
-include $(ccgr-dep:.o=.d)

# this dependency is known once aenv.o is compiled, but it's required
# before then, because it says predicate.ast must be astgen'd before
# aenv.cc is compiled
aenv.o: predicate.ast.gen.h
vcgen.o: predicate.ast.gen.h

# don't delete these because error messages often point into them
.PRECIOUS: absval.ast.gen.cc absval.ast.gen.h predicate.ast.gen.h predicate.ast.gen.cc \
           cc.gr.gen.h cc.gr.gen.cc

# parser and semantic analyzer for cc.gr, rolled up as a library for
# easier importing into ocaml
# turns out if you don't remove the library, there's a possibility
# of old object files staying in it .. !
libccgr.a: $(ccgr-dep) libglr.a
	cp -f libglr.a libccgr.a
	ar -r libccgr.a $(ccgr-dep)
	ranlib libccgr.a

# stand-alone executable; sync is to prevent annoying interactive
# delay caused by sync few seconds later
ifeq ($(ocaml), no)
ccgr: libccgr.a ccgrmain.o $(SMBASE)/libsmbase.a
	$(link) -o ccgr ccgrmain.o libccgr.a $(linkend)
	./ccgr cc.bin c.in1
else
ccgr:
	@echo "we don't build ccgr in ocaml mode"
endif

.PRECIOUS: ccgr

# bison parser from the same grammar; the 'sed' is because Bison
# already interpretes 0 as EOF, and if my rule names it explicitly
# then it gets mad
bccgr.tab.o: cc.gr.gen.cc bccgr.h
	echo "%{" > bccgr.y
	echo "#include \"bccgr.h\"" >> bccgr.y
	echo "%}" >> bccgr.y
	cat cc.gr.gen.y | sed 's/File "L2_EOF"/File/' >> bccgr.y
	bison -d -v bccgr.y
	gcc -c -g -DYYDEBUG=1 -Wall bccgr.tab.c

bccgr: bccgr.o bccgr.tab.o lexer1.o lexer1yy.o lexer2.o $(AST)/fileloc.o \
       $(AST)/strtable.o $(SMBASE)/libsmbase.a
	g++ -o bccgr $^
	./bccgr c.in1

clean:
	rm -f gramanl glr lexer1 lexer1yy.cc gramlex.yy.cc gramlex *.o *~
	rm -f lexer2 grampar.tab.* grampar a.out
	rm -f cexp2.sem cexp2 cc.bin ccgr libccgr.a
	rm -f cc.gr.ps
	rm -f *.gen.*
	rm -f cdecl.bin cdecl cexp3.bin cexp3
	rm -f *.d

# regression tests
check-cexp2: cexp2
	./cexp2 cexp2.bin cexp2.in2

check: check-cexp2 ccgr gramanl
	./gramanl --testRW ffollow
	./ccgr cc.bin c.in1
	@echo ./ccgr cc.bin c.in4 DOES NOT WORK
	./ccgr cc.bin qpmouse.cpp
	@echo ""
	@echo "Regression tests passed."

# --------------- random other stuff --------------------
# printable version of the C++ grammar; removes the '// C++' tags
# because they just wrap onto next line and mess things up
cc.gr.ps:
	sed 's#[ 	]*// C[+][+].*##' < cc.gr \
	  | enscript -2r --output=cc.gr.ps ; true

# test for rcptr
trcptr: rcptr.h trcptr.cc
	$(link) -o trcptr trcptr.cc
