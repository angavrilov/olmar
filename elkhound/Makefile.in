# Makefile.in            see license.txt for copyright and terms of use
# source for Makefile for parser generator project

ifdef CC_QUAL
  CC_QUAL_EXE := cc/cc_qual/cc_qual
else
  CC_QUAL_EXE :=
endif

# the astgen-generated files need to come first because otherwise
# the build doesn't go through properly.. I investigated a better
# fix at one point but don't now remember what the problem was..
all: cc/cc.gr.gen.h cc/cc.ast.gen.h cc/c.ast.gen.h \
     workingFiles glrmain.o cc/cparse cc2/cc2.exe cc2/cc2t.exe cc/bccgr \
     cc/cc.ast.gen.h cc/ccparse cc/ccparset $(CC_QUAL_EXE)
	@echo BUILD FINISHED

# these are files I'm working on now, so I want them compiled first;
# it should be the case that setting this to the empty list of targets
# would not change *what* this Makefile creates, only the *order*
# in which things are made
.PHONY: workingFiles
ifdef CC_QUAL
  workingFiles: cc/cc_qual/cc_qual_walk.o
endif
workingFiles: cc/cc_tcheck.o cc/cc_print.o
#workingFiles: cc/cc_flatten.o

# some junk I was building a while ago..
temporary: all triv/aSEb.gr.exe triv/SSx.tree.gr.exe triv/ssx.in \
           triv/EEb.tree.gr.exe triv/eeb.in triv/SSSx.tree.gr.exe triv/sssx.in \
           triv/EFa.tree.gr.exe triv/efa.in \
	   triv/EFa.bison.exe triv/EFa.tree.bison.exe

# this target ensures the Makefile is in synch with Makefile.in
Makefile: Makefile.in
	./config.status $(mode)

# directories
SMBASE := ../smbase
AST    := ../ast

# turn off (some..) implicit rules
.SUFFIXES:

# translation process variables
libraries   := $(SMBASE)/libsmbase.a
includes    := -I$(SMBASE) -I$(AST) -Icc
ifdef CC_QUAL
# dsw: don't know why this doesn't work, but I have never actually
# tried this feature of make before.
#  cc/cc_qual/cc_qual_walk.o: includes += -I cc_qual/cqual/src -I cc_qual/cqual/src/libcompat
  includes += -I cc/cc_qual/cqual/src -I cc/cc_qual/cqual/src/libcompat
endif

# needed for gcc-2 when compiling things in cc2/
includes    += -I.

ccflags     := -g -Wall @CCFLAGS@
no-warnings := -w
makelib     := ar -r
ranlib      := ranlib

# make warnings into errors so I always get a chance to fix them
# (otherwise they scroll by and I might miss them)
#ccflags += -Werror

# when uncommented, we get profiling info
# sm: it makes no sense to profile while debugging is enabled, because
# you're measuring entirely the wrong configuration...
#ccflags += -pg

# dsw: When set, don't use the dummy cc_qual stuff, but use the real
# thing.
ifdef CC_QUAL
  ccflags += -DCC_QUAL
  ccflags += -DDISTINCT_CVATOMIC_TYPES
endif

# enable action trace in glr parser
#OPTIMIZATION_FLAGS += -DACTION_TRACE=1

# turn on the optimizer
#OPTIMIZATION_FLAGS += -O2
#OPTIMIZATION_FLAGS += -DNDEBUG

# uncomment to turn off source location info
#ccflags += -DGLR_SOURCELOC=0

# even fewer debugging checks
#ccflags += -DNDEBUG_NO_ASSERTIONS

# for gcc-3
#ccflags += -Wno-deprecated

# turn on to enable bison's debugging features
#YYDEBUG := -DYYDEBUG=1
#ccflags += $(YYDEBUG)

# generate debug table every time
TRGRAMANL := ,lrtable


# flags on command line
ccflags += $(EXTRA)

compile := g++ -c $(ccflags) $(includes)
depend  := g++ -MM $(ccflags) $(includes)
link    := g++ $(ccflags) $(includes)
linkend := $(libraries)

# compile .cc to .o; dependency manipulation involves:
#   sed:    replace gcc's target with $@; this is needed because
#           "gcc -M" strips any path component...
#   sed:    strip the target (everything before colon)
#   sed:    remove any continuation backslashes
#   fmt -1: list words one per line
#   sed:    strip leading spaces
#   sed:    add trailing colons
# see http://www.cs.berkeley.edu/~smcpeak/autodepend/autodepend.html
.PRECIOUS: %.o
%.o: %.cc
	$(compile) $< -o $@
	@echo "dependencies for $< > $*.d"
	@$(depend) $< > $*.d
	@mv -f $*.d $*.d.tmp
	@sed -e 's|.*:|$@:|' < $*.d.tmp > $*.d
	@sed -e 's/.*://' -e 's/\\$$//' < $*.d.tmp | fmt -1 | \
          sed -e 's/^ *//' -e 's/$$/:/' >> $*.d
	@rm -f $*.d.tmp

# sets of related object files
# files needed to represent a grammar in memory
grammar-set := \
  $(AST)/locstr.o \
  asockind.o \
  grammar.o
-include $(filter-out $(AST)/%, $(grammar-set:.o=.d))

# in addition to grammar-set, files needed to parse a grammar description
grampar-set := \
  $(AST)/asthelp.o \
  $(AST)/ccsstr.o \
  $(AST)/embedded.o \
  $(AST)/fileloc.o \
  $(AST)/gramlex.o \
  $(AST)/strtable.o \
  emitcode.o \
  emittables.o \
  gramast.ast.gen.o \
  gramlex.yy.o \
  grampar.o \
  grampar.tab.o
-include $(filter-out $(AST)/%, $(grampar-set:.o=.d))

# minimal runtime files needed to do GLR parsing; these get
# combined to form libelkhound.a, the Elkhound runtime library
glr-set := \
  $(AST)/fileloc.o \
  cyctimer.o \
  glr.o \
  parsetables.o \
  useract.o
-include $(filter-out $(AST)/%, $(glr-set:.o=.d))

# some (mostly) language-independent parsing support files which
# are shared by several of the test parsers (e.g. cexp3)
support-set := \
  $(AST)/asthelp.o \
  $(AST)/strtable.o \
  cc/cc_lang.o \
  cc/lexer1.o \
  cc/lexer1yy.o \
  cc/lexer2.o \
  cc/parssppt.o
-include $(filter-out $(AST)/%, $(support-set:.o=.d))

# files for parsing C code with the c.gr or cc2.gr grammars;
# since this set is used with both grammars, I don't include either
# grammar in the set itself
c-set := \
  $(support-set) \
  cc/c.ast.gen.o \
  cc/c_env.o \
  cc/cc_flags.o \
  cc/c_type.o \
  cc/cparse.o \
  cc/exprequal.o \
  cc/exprvisit.o \
  cc/paths.o \
  cc/postorder.o \
  cc/stubs.o \
  cc/tcheck.o \
  cc/treeout.o \
  cc/c_variable.o
-include $(filter-out $(AST)/%, $(c-set:.o=.d))

# files for parsing C++ code with the cc.gr or cc2.gr grammars
cc-set := \
  $(support-set) \
  cc/cc.ast.gen.o \
  cc/cc_env.o \
  cc/cc_scope.o \
  cc/cc_flags.o \
  cc/cc_type.o \
  cc/cc_tcheck.o \
  cc/cc_print.o \
  cc/cc_ast_aux.o \
  cc/treeout.o \
  cc/variable.o \
  cc/dswutil.o

ifdef CC_QUAL
  cc-set += cc/cc_qual/cc_qualifiers.o
  cc-set += cc/cc_qual/cc_qual_walk.o
  cc-set += cc/cc_qual/cqual_iface.o
else
  cc-set += cc/cc_qualifiers_dummy.o
  cc-set += cc/cc_qual_walk_dummy.o
endif

-include $(filter-out $(AST)/%, $(cc-set:.o=.d))

# dsw: to be included above when turned on
#  cc/cc_flatten.o

# how to compile a .o in an adjacent directory (looser dependency
# tracking across directories...)
.PRECIOUS: $(AST)/%.o
$(AST)/%.o: $(AST)/%.cc
	make -C $(AST) $*.o

# a few random .o files which don't appear anyplace above, but I need
# to make sure their dependency info (if it exists) gets included
random-obj := \
  parsstub.o \
  glrmain.o \
  cc/ccgrmain.o \
  cc/c.gr.gen.o \
  cc/cc.gr.gen.o \
  cc/ccparse.o \
  cc/ccparset.o
ifdef CC_QUAL
  random-obj += cc/cc_qual/cc_qual.o
endif
-include $(random-obj:.o=.d)

# extra dependencies
gramlex.yy.o: grampar.codes.h

# ------ targets -------
# reads the grammar and emits C++ code for semantic functions;
# this is the main parser generator binary
elkhound-dep := gramanl.cc gramexpl.o $(grammar-set) $(grampar-set) \
               parsetables.o $(libraries)
elkhound: $(elkhound-dep) grammar.h gramanl.h
	$(link) -o $@ -DGRAMANL_MAIN $(elkhound-dep)

cc/lexer1yy.cc: cc/lexer1.lex cc/lexer1.h
	cd cc; flex lexer1.lex

# first pass lexer
lexer1-dep := cc/lexer1.cc cc/lexer1yy.o cc/fileloc.o $(libraries)
cc/lexer1: $(lexer1-dep)
	$(link) -o $@ -DTEST_LEXER1 $(lexer1-dep)

# second pass lexer
lexer2-dep := cc/lexer2.cc cc/lexer1.o cc/lexer1yy.o $(AST)/fileloc.o \
              $(AST)/strtable.o cc/cc_lang.o $(libraries)
cc/lexer2: $(lexer2-dep) cc/lexer2.h
	$(link) -o $@ -DTEST_LEXER2 $(lexer2-dep)

# grammar lexer
# like in ast/, need to replace forward decl with proper #include
gramlex.yy.cc: gramlex.lex
	flex -o$@ gramlex.lex
	mv $@ gramlex.tmp
	sed 's/class istream;/#include <iostream.h>/' <gramlex.tmp >$@
	rm gramlex.tmp

# grammar lexer test program
gramlex-dep := gramlex.yy.cc gramlex.cc $(AST)/fileloc.o $(AST)/ccsstr.o \
               $(AST)/embedded.o $(libraries)
gramlex: gramlex.h $(gramlex-dep)
	$(link) -o gramlex -DTEST_GRAMLEX $(gramlex-dep)

# grammar parser
grampar.tab.cc grampar.tab.h grampar.codes.h: grampar.y gramast.ast.gen.h
	bison -d -v grampar.y
	mv -f grampar.tab.c tmp
	sed 's/typedef union {/typedef union YYSTYPE {/' < tmp > grampar.tab.cc
	mv -f grampar.tab.h tmp
	sed 's/typedef union {/typedef union YYSTYPE {/' < tmp > grampar.tab.h
	rm tmp
	grep '# *define' grampar.tab.h > grampar.codes.h

# (unmaintained) grammar parser test program
# grampar: grampar.cc $(grammar-set) gramlex.yy.o grampar.tab.o \
#          $(AST)/gramlex.o ast.o $(AST)/fileloc.o gramast.ast.gen.o $(AST)/ccsstr.o \
#          $(AST)/embedded.o $(AST)/strtable.o $(AST)/asthelp.o \
#          $(libraries)
# 	$(link) -o grampar -DTEST_GRAMPAR $^

# cycle timer test
cyctimer: cyctimer.cc cyctimer.h
	g++ -o $@ $(ccflags) $(includes) -DTEST_CYCTIMER cyctimer.cc $(linkend)

# token list for my grammar
cc/cc.tok: cc/lexer2
	cc/lexer2 myparser >$@

# glr parsing engine
libelkhound.a: $(glr-set)
	rm -f libelkhound.a
	ar -r libelkhound.a $(glr-set)
	ranlib libelkhound.a

# intermediate files for a grammar
# TRGRAMANL: extra trace flags specified by user; starts with "," if defined
# ('chmod a-w' is so I don't accidentally edit it)
.PRECIOUS: %.gr.gen.cc %.gr.gen.h
%.gr.gen.cc %.gr.gen.h %.gr.gen.y: %.gr cc/cc.tok elkhound
	rm -f $*.gr.gen.*
	./elkhound -tr bison,NOconflict$(TRGRAMANL) $*
	chmod a-w $*.gr.gen.h $*.gr.gen.cc

# intermediate files for an ast spec
.PRECIOUS: %.ast.gen.cc %.ast.gen.h
%.ast.gen.cc %.ast.gen.h: %.ast $(AST)/astgen
	rm -f $*.ast.gen.*
	$(AST)/astgen -o$*.ast.gen $*.ast
	chmod a-w $*.ast.gen.h $*.ast.gen.cc

# specific instructions for cc.ast, so I can add extension modules
CC_AST_MODS := cc/cc_tcheck.ast cc/cc_print.ast cc/cc_qual.ast
cc/cc.ast.gen.cc cc/cc.ast.gen.h: cc/cc.ast $(CC_AST_MODS) $(AST)/astgen
	rm -f cc/cc.ast.gen.cc cc/cc.ast.gen.h
	$(AST)/astgen -occ/cc.ast.gen cc/cc.ast $(CC_AST_MODS)
	chmod a-w cc/cc.ast.gen.cc cc/cc.ast.gen.h

# don't delete these because error messages often point into them
.PRECIOUS: cc.gr.gen.h cc.gr.gen.cc

# stand-alone executable for parsing C
cc/cparse: cc/ccgrmain.o cc/c.gr.gen.o $(c-set) libelkhound.a $(SMBASE)/libsmbase.a
	$(link) -o $@ $^
	./$@ -tr yieldVariableName c.in/c.in1

.PRECIOUS: cc/ccgr

# stand-alone executable for parsing C++
CQUAL_DEPS :=
ifdef CC_QUAL
  CQUAL_DEPS += cc/cc_qual/cqual.a
  CQUAL_DEPS += cc/cc_qual/libregions.a
cc/cc_qual/cc_qual: cc/cc_qual/cc_qual.o cc/cc.gr.gen.o $(cc-set) libelkhound.a $(SMBASE)/libsmbase.a $(CQUAL_DEPS)
	$(link) -o $@ $^
endif
cc/ccparse: cc/ccparse.o cc/cc.gr.gen.o $(cc-set) libelkhound.a $(SMBASE)/libsmbase.a $(CQUAL_DEPS)
	$(link) -o $@ $^
ifndef CC_QUAL
	./$@ c.in/c.in1
endif
# dsw: Note on the above: I need to be able to build it without
# running it, due to the directory where I have to build it.  This
# will be fixed when I can pass in the lattice configuration file on
# the command-line.

# same grammar, but building entire parse tree instead
cc/cct.gr.gen.cc cc/cct.gr.gen.h cc/cct.gr.gen.y: cc/cc.gr cc/cc.tok elkhound
	rm -f cc/cct.gr*
	sed 's/cc\.gr\.gen\.h/cct.gr.gen.h/' <cc/cc.gr >cc/cct.gr
	./elkhound -tr treebuild$(TRGRAMANL) cc/cct
	chmod a-w cc/cct.gr*

cc/ccparset: cc/ccparset.o cc/cct.gr.gen.o $(cc-set) ptreenode.o \
             libelkhound.a $(SMBASE)/libsmbase.a $(CQUAL_DEPS)
	g++ -o $@ $(ccflags) $^

# bison parser from the same grammar; the 'sed' is because Bison
# already interpretes 0 as EOF, and if my rule names it explicitly
# then it gets mad
cc/bccgr.y: cc/c.gr.gen.y
	echo '%{' >$@
	echo '#include "bccgr.h"' >>$@
	echo '%}' >>$@
	sed 's/File L2_EOF/File/' <cc/c.gr.gen.y >>$@

# bison parser from the a given grammar; the 'sed' is because Bison
# already interpretes 0 as EOF, and if my rule names it explicitly
# then it gets mad
%.y: %.gr.gen.y
	echo '%{' >$@
	echo '#include "trivbison.h"' >>$@
	echo '%}' >>$@
	sed 's/"EOF" {/{/' <$*.gr.gen.y >>$@

# run Bison; the 'sed' command is to silence a spurious warning about
# 'yyval' being used uninitialized; I also compile here (instead of
# relying on another pattern rule) because I want to control exactly
# how the compilation happens (to ensure the Bison-parser is compiled
# with flags to make it a fair performance test with my own stuff)
#
# TODO: apparently bison-1.75 chooses its output files differently
# than prior versions.. may have to detect that with ./configure
%.tab.c %.tab.o %.tab.h: %.y
	bison -d -v $*.y
	mv $*.tab.c $*.tab.c.orig
	sed 's/YYSTYPE yyval;/YYSTYPE yyval = 0;/' <$*.tab.c.orig >$*.tab.c
	rm $*.tab.c.orig
	g++ -c -g -o $*.tab.o -O2 -DNDEBUG -Wall $(YYDEBUG) $*.tab.c


cc/bccgr.tab.o: cc/bccgr.h

cc/bccgr: cc/bccgr.cc cc/bccgr.tab.o cc/lexer1.o cc/lexer1yy.o cc/lexer2.o \
       $(AST)/fileloc.o $(AST)/strtable.o cc/cc_lang.o cyctimer.o \
       $(SMBASE)/libsmbase.a
	g++ -o $@ $(ccflags) $(includes) $(YYDEBUG) $^
	cc/bccgr c.in/c.in1

# run the trivial-grammar helper
.PRECIOUS: %.gr %.tree.gr
%.gr: %.gr.in make-trivparser.pl
	rm -f $@
	./make-trivparser.pl $(notdir $*) <$*.gr.in >$@
	chmod a-w $@

%.tree.gr: %.gr.in make-trivparser.pl
	rm -f $@
	./make-trivparser.pl -ptree $(notdir $*) <$*.gr.in >$@
	chmod a-w $@

# make a parser for testing some grammar, using trivial lexer
trivparse-deps := trivmain.cc ptreenode.o trivlex.o $(support-set) \
                  libelkhound.a
%.gr.exe: %.gr.gen.o $(trivparse-deps)
	g++ -o $@ $(ccflags) $(includes) -DGRAMMAR_NAME=\"$*.bin\" \
	  $^ $(linkend)


# similar, for Bison as the parser-generator
%.bison.exe: %.tab.o trivbison.o trivlex.o lexer2.o ptreenode.o \
             libelkhound.a
	g++ -o $@ $(ccflags) $(includes) $^ $(linkend)

# new C++ parser
cc2/cc2.exe: cc2/cc2main.o $(cc-set) cc2/cc2.gr.gen.o ptreenode.o libelkhound.a $(SMBASE)/libsmbase.a $(CQUAL_DEPS)
	g++ -o $@ $(ccflags) $^

# new C++ grammar with treebuilding actions
cc2/cc2t.gr.gen.cc cc2/cc2t.gr.gen.h cc2/cc2t.gr.gen.y: cc2/cc2.gr cc/cc.tok elkhound $(CQUAL_DEPS)
	rm -f cc2/cc2t*
	sed 's/cc2\.gr\.gen\.h/cc2t.gr.gen.h/' <cc2/cc2.gr >cc2/cc2t.gr
	./elkhound -tr treebuild$(TRGRAMANL) cc2/cc2t
	chmod a-w cc2/cc2t.gr*

# new C++ parser with treebuilding
cc2/cc2t.exe: cc2/cc2main.o $(cc-set) cc2/cc2t.gr.gen.o ptreenode.o libelkhound.a $(SMBASE)/libsmbase.a $(CQUAL_DEPS)
	g++ -o $@ $(ccflags) $^


# stuff in examples directory
.PHONY: examples
examples: all
	cd examples/arith; make
	cd examples/cexp; make
	cd examples/cdecl; make


# ----------------------------- EFa -----------------------
# input for EFa
triv/efa.in:
	mkdir $@
	perl -e 'foreach $$n (500, 1000, 1500, 2000, 2500, 5000, 10000, 20000, 50000, 100000, 200000, 500000, 1000000) {  \
	           $$name = sprintf("%07d", $$n);            \
	           open(OUT, ">$@/$$name.in") or die $!; \
	           print OUT "A";                            \
	           for($$i=0; $$i < $$n; $$i++) {            \
	             print OUT ("PA");                       \
	           }                                         \
	           close(OUT);                               \
	         }'

EFA_TESTS := triv/efa.perf.txt triv/efa.notree.perf.txt triv/efa.bison.tree.perf.txt triv/efa.bison.notree.perf.txt

#.PHONY: $(EFA_TESTS) all-efa

# run all the EFa tests; the whole batch runs in less than a minute
# (well, they did before I put in the loop from 1 to 5 ...)
all-efa: $(EFA_TESTS)

# performance test for EFa
triv/efa.perf.txt:
	rm -f $@
	for fn in triv/efa.in/*; do \
	  for count in 1 2 3 4 5; do \
	    triv/EFa.tree.gr.exe -tr progress -count $$fn 2>&1 | \
	      sed "s,^,$$fn: ," >> $@ ; \
	  done; \
	done

triv/efa.notree.perf.txt:
	rm -f $@
	for fn in triv/efa.in/*; do \
	  for count in 1 2 3 4 5; do \
	    triv/EFa.tree.gr.exe -tr progress,trivialActions $$fn 2>&1 | \
	      sed "s,^,$$fn: ," >> $@ ; \
	  done; \
	done

triv/efa.bison.tree.perf.txt:
	rm -f $@
	for fn in triv/efa.in/*; do \
	  for count in 1 2 3 4 5; do \
	    triv/EFa.tree.bison.exe $$fn 2>&1 | \
	      sed "s,^,$$fn: ," >> $@ ; \
	  done; \
	done

triv/efa.bison.notree.perf.txt:
	rm -f $@
	for fn in triv/efa.in/*; do \
	  for count in 1 2 3 4 5; do \
	    triv/EFa.bison.exe $$fn 2>&1 | \
	      sed "s,^,$$fn: ," >> $@ ; \
	  done; \
	done

%.csv: %.txt
	cat $^ | grep cycles | \
	  perl -p -e 's/^[^:]*\D(\d+)\D.*:.*\D(\d+)_(\d+) cycles.*$$/$$1, $$2$$3/' >$@

all-efa-csv: $(EFA_TESTS:.txt=.csv)


# --------------------------- EEb -----------------------
# input for EEb
triv/eeb.in:
	mkdir $@
	perl -e 'foreach $$n (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 20, 50, 100, 200, 300, 400, 500) {  \
	           open(OUT, ">$@/$$n.in") or die $!;    \
	           print OUT "B";                            \
	           for($$i=0; $$i < $$n; $$i++) {            \
	             print OUT ("PB");                       \
	           }                                         \
	           close(OUT);                               \
	         }'

# performance test for EEb
triv/eeb.perf.txt:
	rm -f $@
	for n in 10 20 50 100 200 300 400 500; do \
	  triv/EEb.tree.gr.exe -tr progress -count triv/eeb.in/$$n.in 2>&1 | \
	    sed "s/^/$$n: /" >> $@ ; \
	done

triv/eeb.notree.perf.txt:
	rm -f $@
	for n in 10 20 50 100 200 300 400 500; do \
	  triv/EEb.tree.gr.exe -tr progress,trivialActions triv/eeb.in/$$n.in 2>&1 | \
	    sed "s/^/$$n: /" >> $@ ; \
	done


# --------------------------- SSx ----------------------
# input for SSx
triv/ssx.in:
	mkdir $@
	perl -e 'for($$n=1; $$n <= 99; $$n += 2) {           \
	           open(OUT, ">$@/$$n.in") or die $!;        \
	           for($$i=0; $$i < $$n; $$i++) {            \
	             print OUT ("X");                        \
	           }                                         \
	           close(OUT);                               \
	         }'

# performance test for SSx
triv/ssx.perf.txt:
	rm -f $@
	for n in 15 25 35 45 55 65 75 85 99; do \
	  triv/SSx.tree.gr.exe -tr progress -count triv/ssx.in/$$n.in 2>&1 | \
	    sed "s/^/$$n: /" >> $@ ; \
	done

triv/ssx.notree.perf.txt:
	rm -f $@
	for n in 15 25 35 45 55 65 75 85 99; do \
	  triv/SSx.tree.gr.exe -tr progress,trivialActions triv/ssx.in/$$n.in 2>&1 | \
	    sed "s/^/$$n: /" >> $@ ; \
	done



# --------------------------- SSSx ----------------------
# input for SSSx
triv/sssx.in:
	mkdir $@
	perl -e 'for($$n=1; $$n <= 99; $$n += 1) {           \
	           open(OUT, ">$@/$$n.in") or die $!;        \
	           for($$i=0; $$i < $$n; $$i++) {            \
	             print OUT ("X");                        \
	           }                                         \
	           close(OUT);                               \
	         }'

triv/sssx.perf.txt:
	rm -f $@
	for n in 5 10 15 20 25 30 35 40 45 50; do \
	  triv/SSSx.tree.gr.exe -tr progress -count triv/sssx.in/$$n.in 2>&1 | \
	    sed "s/^/$$n: /" >> $@ ; \
	done

triv/sssx.notree.perf.txt:
	rm -f $@
	for n in 5 10 15 20 25 30 35 40 45 50; do \
	  triv/SSSx.tree.gr.exe -tr progress,trivialActions triv/sssx.in/$$n.in 2>&1 | \
	    sed "s/^/$$n: /" >> $@ ; \
	done


# ------------------------ DeclExpr ----------------------
triv/DeclExpr.perf.txt:
	rm -f $@
	for n in 1 10 100 1000 10000; do \
	  triv/DeclExpr.gr.exe -tr progress,trivialActions triv/DeclExpr.in$$n 2>&1 | \
	    sed "s/^/$$n: /" >> $@ ; \
	done


# ------------------------ documentation -----------------------
# dependencies for 'elkhound', the parser generator executable
doc/elkhound.dot:
	$(SMBASE)/scan-depends.pl -r -I$(AST) gramanl.cc >$@

# dependencies for 'glr.h', the entry point to the runtime library
doc/glr.dot:
	$(SMBASE)/scan-depends.pl -r -I$(AST) glr.h >$@

# dependencies for 'ccgr', the prototype C parser and typechecker
doc/cc.dot:
	$(SMBASE)/scan-depends.pl -r -I$(AST) -Icc -Sglr.h -Xfileloc.h ccgrmain.h >$@

# dependencies for 'trivmain.cc', the trivial grammar driver
doc/triv.dot:
	$(SMBASE)/scan-depends.pl -r -I$(AST) -Sglr.h trivmain.cc >$@

# use 'dot' to lay out the graph
# http://www.research.att.com/sw/tools/graphviz/
doc/%.ps: doc/%.dot
	dot -Tps <$^ >$@

# use 'convert' to make a PNG image with resolution not to exceed
# 1000 in X or 700 in Y ('convert' will preserve aspect ratio); this
# also antialiases, so it looks very nice (it's hard to reproduce
# this using 'gs' alone)
doc/%.png: doc/%.ps
	convert -geometry 1000x700 $^ $@

# "make doc" should build whatever we have that needs building
.PHONY: doc
doc: doc/elkhound.png doc/glr.png doc/cc.png doc/triv.png

doc-clean:
	cd doc; rm -f {elkhound,glr}.{ps,dot,png}

# some other random phony targets (I hate this clutter..)
.PHONY: doc-clean clean distclean check


# -------------------- clean, check, etc. ------------------
# things to remove from all directories
CLEAN_PATTERNS := \
  *.o  \
  *~ \
  *.d \
  *.exe \
  *.gen.* \
  *.bin \
  *.tab.* \
  *.output \
  a.out \
  core

clean:
	rm -f $(CLEAN_PATTERNS)
	rm -f elkhound glr cc/lexer1 cc/lexer1yy.cc gramlex.yy.cc gramlex cyctimer
	rm -f cc/lexer2 grampar.tab.* grampar
	rm -f cc/cc.bin cc/ccgr cc/cparse cc/ccparse cc/ccparset $(CC_QUAL_EXE)
	rm -f cc/libccgr.a libelkhound.a
	rm -f cc/bccgr
	rm -f cc/bccgr.y cc/cc.tok grampar.codes.h
	rm -f gdb.log gprof.out gmon.out test-bad-tmp.c
	cd cc; rm -f $(CLEAN_PATTERNS)
	cd cc2; rm -f $(CLEAN_PATTERNS)
	cd triv; rm -f $(CLEAN_PATTERNS) *.y *.gr
	for dir in arith cdecl cexp; do \
	  (cd examples/$$dir; make clean); \
	done

distclean:
	rm -f Makefile config.status
	cd triv; rm -rf sssx.in ssx.in eeb.in

check: all
	./regrtest
	@echo ""
	@echo "Regression tests passed."

# sm: removed 'idem/%' and 'checkall' since I prefer that
# functionality to be in ./regrtest

# --------------- random other stuff --------------------
# test for rcptr
trcptr: rcptr.h trcptr.cc
	$(link) -o $@ trcptr.cc
