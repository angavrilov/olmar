#!/usr/bin/perl
# -*-perl-*-
use strict;

# Test the idempotency of the C++ parser.

# Daniel S. Wilkerson dsw@cs.berkeley.edu

my $parser = "./ccparse";
die "No executable file: $parser\n" unless -x $parser;
my @names = ();

my @outfiles = ();
my %outfile2command = ();

for(@ARGV) {
    s/\s*\#.*$//;               # delete comments
    s/^\s*//;                   # delete leading whitespace
    s/\s*$//;                   # delete trailing whitespace
    next if /^\s*$/;            # skip blank lines
    if (/^(\S+)$/) {
        push @names, $1;
    } else {
        die "Malformed line: $_";
    }
}

sub run_only ($$) {
    my ($command, $outfile) = @_;
    my $realcommand = "$command >> $outfile";
#    print "RUN: $realcommand\n";
    unlink $outfile;
    die if -f $outfile;
    my $res = system "$realcommand";
    if ($res!=0) {
        my $exit_value  = $res >> 8;
        my $signal_num  = $res & 127;
        my $dumped_core = $res & 128;
        system "echo >> $outfile '**** abnormal exit: exit_value $exit_value, " .
            "signal_num $signal_num, dumped_core $dumped_core'\n";
        die "Command fails: $realcommand\n";
    }
}

sub run_command ($$) {
    my ($command, $outfile) = @_;
    my $realcommand = "$command >> $outfile";
    $outfile2command{$outfile} = $realcommand;
    push @outfiles, $outfile;
    run_only $command, $outfile;
}

sub dump_outfiles {
    for my $outfile(@outfiles) {
        print "STAGE ****************\n";
        print "$outfile2command{$outfile}\n";
        system "cat $outfile";
    }
}

#  my %idempotent = ();
my $numinputs = 0;
my $numpass = 0;
my @failingFiles = ();
for my $name(@names) {
    print "$name\n";
    die "No such file $name\n" unless -f "$name";
    ++$numinputs;

    @outfiles = ();
    push @outfiles, $name;
    $outfile2command{$name} = "ORIGINAL: $name";
    eval {
        # sm: added "-tr prettyPrint" to print the tree, since
        # I made that printing conditional upon the tracing flag
        my $flags = "-tr prettyPrint";
#          my $cppflags = "-lang-c++";      # FIX: put include lines here.
        my $cppflags = "";      # FIX: put include lines here.
        run_command "cpp $cppflags $name", "$name.out_cpp";
        run_command "$parser $flags $name.out_cpp", "$name.out_raw";
        run_only "./chop_out < $name.out_raw", "$name.out";
        run_command "$parser $flags $name.out", "$name.out2_raw";
        run_only "./chop_out < $name.out2_raw", "$name.out2";
    };
    if ($@) {
        dump_outfiles();
        @failingFiles = (@failingFiles, $name);
        print "ERROR: $@\n";
        next;
    }

    my $diff_command = "diff -u $name.out $name.out2 > $name.diff";
    $outfile2command{"$name.diff"} = $diff_command;
    push @outfiles, "$name.diff";
#    print "$diff_command\n";
    my $diff_res = system $diff_command;
    if ($diff_res == 0) {
#          $idempotent{$outputfile}++;
        ++$numpass;
    } else {
        dump_outfiles();
        @failingFiles = (@failingFiles, $name);
    }
}

#  for my $name(keys $idempotent) {
#  }

print "";
print "Num inputs $numinputs\n";
print "Num pass   $numpass\n";
if (@failingFiles) {
    print ("Failing files: ", join(' ', @failingFiles), "\n");
}

if ($numinputs==$numpass) {
    print "PASS\n";
    exit 0;
} else {
    print "FAIL\n";
    exit 1;
}
