// gramast.ast
// grammar AST, in a new experimental format

verbatim {
  #include "locstr.h"       // LocString
}

// the entire grammar spec
class GrammarAST (LocString verbatimCode,
                  Terminals terms,
                  ASTList<NontermDecl> nonterms);


// definition of tokens: first the ids and aliases, then types
class Terminals (ASTList<TermDecl> decls, ASTList<TermType> types);

// token with lexer code 'code' and grammar name 'name', with grammar
// alias 'alias'
class TermDecl (int code, LocString name, LocString alias);

// declaration that token with grammar name 'name' has semantic
// values with C type 'type'
class TermType (LocString name, LocString type, ASTList<SpecFunc> funcs);


// specification function: formals + code
class SpecFunc (LocString name, ASTList<LocString> formals, LocString code);


// a nonterminal, with its name and semantic value type, and list
// of productions (right-hand side alternatives)
class NontermDecl (LocString name, LocString type, ASTList<SpecFunc> funcs,
                   ASTList<ProdDecl> productions);

// production: rhs description, and code to execute upon recognition
class ProdDecl (ASTList<RHSElt> rhs, LocString actionCode);

// one of the things that appears after the '->', i.e. the
// right-hand-side elements
class RHSElt {
  -> RH_name(LocString name);                        // untagged terminal or nonterminal reference
  -> RH_taggedName(LocString tag, LocString name);   // tagged terminal or nonterminal reference
  -> RH_string(LocString str);                       // untagged terminal reference by string alias
  -> RH_taggedString(LocString tag, LocString str);  // tagged terminal reference by string alias
}

