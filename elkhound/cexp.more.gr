# cexp.gr
# subgrammar for C expressions

Input -> Expr "$" .          # "." can mean an empty action block

rule: Expr -> "x"            # ground exp
  action: Expr.prec = 100

rule: Expr.result -> Expr.left Op Expr.right  {
  action: Expr.result.prec = Op.prec
  condition: Expr.result.prec <= Expr.left.prec         # precedence
  condition: Expr.result.prec <= Expr.right.prec        # more precedence

  # associativity
  condition: if (== Op.leftAssoc 1)
               Expr.result.prec < Expr.right.prec
             else
               Expr.result.prec < Expr.left.prec
}

Expr.result -> Expr.left Op Expr.right
  %action { Expr.result.prec = Op.prec }
  %condition { (<= Expr.result.prec Expr.left.prec) }         # precedence
  %condition { (<= Expr.result.prec Expr.right.prec) }        # more precedence
  %condition { (if (== Op.leftAssoc 1) (< Expr.result.prec Expr.right.prec) (< Expr.result.prec Expr.left.prec)) }
    # associativity

group: Op
{
  action: Op.prec = decreasing_from(60)
  



Op -> "*" | "/" | "%"
  %action { Op.prec = 60 }
  %action { Op.leftAssoc = 1 }

Op -> "+" | "-"
  %action { Op.prec = 56 }
  %action { Op.leftAssoc = 1 }

Op -> "<<" | ">>"
  %action { Op.prec = 52 }
  %action { Op.leftAssoc = 1 }

Op -> "<" | ">" | "<=" | ">="
  %action { Op.prec = 48 }
  %action { Op.leftAssoc = 1 }

Op -> "==" | "!="
  %action { Op.prec = 44 }
  %action { Op.leftAssoc = 1 }

Op -> "&"
  %action { Op.prec = 40 }
  %action { Op.leftAssoc = 1 }

Op -> "^"
  %action { Op.prec = 36 }
  %action { Op.leftAssoc = 1 }

Op -> "|"
  %action { Op.prec = 32 }
  %action { Op.leftAssoc = 1 }

Op -> "&&"
  %action { Op.prec = 28 }
  %action { Op.leftAssoc = 1 }

Op -> "||"
  %action { Op.prec = 24 }
  %action { Op.leftAssoc = 1 }

