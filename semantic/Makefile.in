# Makefile.in
# this is the Makefile for the semantic actions on ocaml ast's

OCAML_OBJ_EXT := @OCAML_OBJ_EXT@

#all: ast_graph
#all: hashloc
#all: test_ast
#all: path_to_node.cmo
all: ast_graph astiter.$(OCAML_OBJ_EXT) \
	astiternodes.$(OCAML_OBJ_EXT) astmap.$(OCAML_OBJ_EXT) \
	dumpast hashloc


# directories of other software; 
SMBASE   := @SMBASE@
AST      := @AST@
ELSA     := @ELSA@

# external tools
OCAMLC   := @OCAMLC@
OCAMLOPT := @OCAMLOPT@
OCAMLCC  := @OCAMLCC@

OCAML_OBJ_EXT := @OCAML_OBJ_EXT@
OCAML_LIB_EXT := @OCAML_LIB_EXT@


# list of files to clean in 'clean' (etc.) targets
# (these get added to below)
TOCLEAN =
TODISTCLEAN =

# re-create the Makefile if Makefile.in has changed
TODISTCLEAN += Makefile
Makefile: Makefile.in config.status
	./config.status

# reconfigure if the configure script has changed
config.status: configure.pl $(SMBASE)/sm_config.pm
	./config.status -reconfigure



ASTGRAPH_ML=\
	dense_set.ml \
	$(ELSA)/elsa_util.ml \
	$(ELSA)/cc_ml_types.ml \
	$(ELSA)/ml_ctype.ml \
	$(ELSA)/ast_annotation.ml \
	ast_util.ml \
	ast_graph.ml

TOCLEAN += ast_graph
ast_graph: $(ASTGRAPH_ML:.ml=.$(OCAML_OBJ_EXT))
	$(OCAMLCC) -o $@ $^


TOCLEAN += dumpast
dumpast: dumpast.ml
	$(OCAMLCC) -o $@ -I $(ELSA) unix.$(OCAML_LIB_EXT) $^

# hashloc is not working currently
HASHLOC_ML=\
	dense_set.ml \
	$(ELSA)/ast_annotation.ml \
	ast_util.ml \
	hashloc.ml

TOCLEAN += hashloc
hashloc: $(HASHLOC_ML:.ml=.$(OCAML_OBJ_EXT))
	$(OCAMLCC) -o $@ $^

# check-oast depends the safeUnmarshal library, 
# see http://www.pps.jussieu.fr/~henry/marshal/
CHECKOAST_ML=\
	$(ELSA)/ast_annotation.ml \
	$(ELSA)/elsa_util.ml \
	$(ELSA)/cc_ml_types.ml \
	$(ELSA)/ml_ctype.ml \
	$(ELSA)/cc_ast_gen_type.ml \
	check-oast.ml

TOCLEAN += check-oast
check-oast: $(CHECKOAST_ML:.ml=.$(OCAML_OBJ_EXT))
	$(OCAMLCC) -o $@ -I $(ELSA) safeUnmarshal.$(OCAML_LIB_EXT) $^


# a test target
TOCLEAN += nodes.dot nodes.ps
.PHONY: test_ast
# -skip 840
test_ast: ast_graph
	./ast_graph $(ELSA)/in/gnu/g0010.cc.oast
	dot -Tps nodes.dot > nodes.ps


$(ELSA)/%.cmo: $(ELSA)/%.ml
	$(MAKE) -C $(ELSA) elsa_ml_objects

$(ELSA)/%.cmx: $(ELSA)/%.ml
	$(MAKE) -C $(ELSA) elsa_ml_objects


.PHONY: clean
clean:
	rm -f $(TOCLEAN)

.PHONY: tyclean
tyclean:
	(cd $(ELSA); rm -f *.cmi *.cmo *.cmx)
	(cd $(AST); rm -f *.cmi *.cmo *.cmx)

TOCLEAN += *.cmo
%.cmo: %.ml
	$(OCAMLC) -I $(ELSA) -c $<

TOCLEAN += *.cmx *.o
%.cmx: %.ml
	$(OCAMLOPT) -I $(ELSA) -c $<

TOCLEAN += *.cmi
%.cmi: %.mli
	$(OCAMLC) -I $(ELSA) -c $<


-include mldeps.mk

.PHONY: mldeps
depend: mldeps
mldeps:
	ocamldep -I $(ELSA) *ml *mli > mldeps.mk
