// (*** set this in -*- mode: tuareg;-*-  ****)


// astgen treats the first verbatim in a file special
// and adds it add the beginning.
// However, I want this material added at the end, so 
// put a dummy class her.

class DummyWithNoUse ();

ocaml_type_verbatim {

(***************************** Variable *******************************)

(* this will be inserted in the middle in the ast type defintion *)
and 'a variable = {
  poly_var : 'a;
  loc : sourceLoc;
  (* might be None for abstract declarators (?) *)
  var_name : string option;

  (* var_type is circular for compound types that have an implicit 
   * typedef variable
   *)
  var_type : 'a cType option ref;
  flags : declFlags;
  value : 'a expression_type option;
  defaultParam : 'a cType option;
  (* funcDefn is circular at least for destructor calls (in/t0009.cc)
   * then it points back to a member in the class
   * the original pointer might be NULL, so this might be None even
   * after resolving circularities
   *)
  funcDefn : 'a function_type option ref;
  (* overload : overloadSet *)
  (* scope : Scope; *)
}

(***************************** CType **********************************)

and 'a baseClass = {
  poly_base : 'a;
  compound : 'a compound_info;		(* the base class itself *)
  bc_access : accessKeyword;		(* public, protected ... *)
  is_virtual : bool;
}

and 'a compound_info = {
  compound_info_poly : 'a;
  (* fields stored in the super class NamedAtomicType *)
  compound_name : string;			(* user assigned name ?? *)
  typedef_var : 'a variable;		(* implicit typdef variable ???? *)
  ci_access : accessKeyword;		(* accessibility in wider context *)

  (* fields of CompoundType itself:
   *     the stuff in comments is currently ommitted
   *)
  is_forward_decl : bool;
  keyword : compoundType_Keyword; 	(* keyword used for this compound *)
  data_members : 'a variable list;		(* nonstatic data members *)
  bases : 'a baseClass list;		(* base classes *)

  (* subobj : ?? root of the subobject hierarchy *)

  conversion_operators : 'a variable list;
  friends : 'a variable list;
  inst_name : string;			(* name for debugging purposes *)

  (* mutable syntax : typeSpecifier_type = TS_classSpec list;  * ast node *)
  (* scope : Scope *)

  (* self_type is circular for compounds like in t0009.cc 
   * might stay None after resolving circularities because the 
   * C++ pointer might be NULL
   *)
  self_type : 'a cType option ref;	(* type of the compound *)
}

and 'a atomicType = 
    (* the subtype NamedAtomicType contains the following constructors:
     * CompoundType, PseudoInstantiation, EnumType, TypeVariable
     * (i.e, everything apart from SimpleType)
     *)

  | SimpleType of 'a * simpleTypeId

      (* IMPORTANT: if one adds more fields to CompoundType one has also to 
       * change PseudoInstantiation and its serialization
       *)
      (* CompoundType( compound info) *)
      (* 'a annotation is in compound_info *)
  | CompoundType of 'a compound_info

      (* PseudoInstantiation( user given name, ?, public/protected, 
       *           original class template info record, template arguments)
       * variable might be void (regtest 568 , in/t0566.cc)
       *)
  | PseudoInstantiation of 'a * string * 'a variable option * accessKeyword * 
      'a compound_info * 'a sTemplateArgument list

      (* EnumType( user given name, ?, public/protected, constants)
       *    ignore the next valye field 
       *)
  | EnumType of 'a * string * 'a variable * accessKeyword * (string * int) list

      (* TypeVariable( user given name, ?, public/protected)  *)
  | TypeVariable of 'a * string * 'a variable * accessKeyword


and 'a cType = 
  | CVAtomicType of 'a * cVFlags * 'a atomicType
      (* PointerType( volatile, pointed type) *)
  | PointerType of 'a * cVFlags * 'a cType
      (* ReferenceType( referenced type ) *)
  | ReferenceType of 'a * 'a cType
      (* FunctionType(flags, return type, parameter list, exception spec)
       * where exceptions spec is either
       *   | None       no exception spec
       *   | Some list  list of specified exceptions (which can be empty)
       *)
  | FunctionType of 'a * function_flags * 'a cType * 'a variable list * 
      'a cType list option
      (* ArrayType( element type, size )*)
  | ArrayType of 'a * 'a cType * array_size
      (* PointerToMemberType( ?, volatile, type of pointed member ) *)
  | PointerToMemberType of 'a * 'a atomicType (* = NamedAtomicType *) * 
      cVFlags * 'a cType


(***************************** TemplateArgument ******************************)

and 'a sTemplateArgument =
                          (* not yet resolved into a valid template argument *)
  | STA_NONE of 'a
                          (* type argument *)
  | STA_TYPE of 'a * 'a cType 
                          (* int argument *)
  | STA_INT of 'a * int   
                          (* enum argument *)
  | STA_ENUMERATOR of 'a * 'a variable 
                          (* reference to global object *)
  | STA_REFERENCE of 'a * 'a variable
                          (* pointer to global object *)
  | STA_POINTER of 'a * 'a variable
                          (* pointer to class member *)
  | STA_MEMBER of 'a * 'a variable
                          (* value-dependent expression *)
  | STA_DEPEXPR of 'a * 'a expression_type
                          (* template argument (not implemented) *)
  | STA_TEMPLATE of 'a
                          (* private to mtype: bind var to AtomicType *)
  | STA_ATOMIC of 'a * 'a atomicType




}
