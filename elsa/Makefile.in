# Makefile.in
# this is the Makefile for Elsa, the Elkhound-based C++ Parser

#tmp: lexer.o lexer.yy.o

# main target: a C++ parser
all: tlexer ccparse quicktest

# directories of other software
SMBASE   := @SMBASE@
AST      := @AST@
ELKHOUND := @ELKHOUND@

# stuff inside those other directories
LIBSMBASE   := $(SMBASE)/libsmbase.a
LIBAST      := $(AST)/libast.a
LIBELKHOUND := $(ELKHOUND)/libelkhound.a


# re-create the Makefile if Makefile.in has changed
Makefile: Makefile.in
	./config.status

# dependencies upon automatically-generated files
extradep.mk:
	$(ELKHOUND)/find-extra-deps *.d >$@

-include extradep.mk


# ----------------------- compiler configuration -------------------
# C++ preprocessor, compiler and linker
CXX := g++

# flags for the C++ compiler (and preprocessor)
CCFLAGS := @CCFLAGS@ -I$(SMBASE) -I$(AST) -I$(ELKHOUND)

# flags for the linker
libraries := $(LIBELKHOUND) $(LIBAST) $(LIBSMBASE)
LDFLAGS := -g -Wall $(libraries)


# compile .cc in this directory to a .o
%.o: %.cc
	$(CXX) -c -o $@ $< $(CCFLAGS)
	@$(SMBASE)/depend.pl -o $@ $< $(CCFLAGS) >$*.d


# ------------------------ tlexer -------------------
LEXER_OBJS := \
  cc_lang.o \
  lexer.o \
  lexer.yy.o \
  cc_tokens.o
-include $(LEXER_OBJS:.o=.d)

# program to test the lexer alone
tlexer: tlexer.o $(LEXER_OBJS)
	$(CXX) -o $@ tlexer.o $(LEXER_OBJS) $(LDFLAGS)


# ------------------------- ccparse ---------------------
# run flex on the lexer description
lexer.yy.cc: lexer.lex lexer.h
	flex lexer.lex

# generate token lists
TOK_FILES := cc_tokens.h cc_tokens.cc cc_tokens.ids
$(TOK_FILES): cc_tokens.tok $(ELKHOUND)/make-token-files
	rm -f $(TOK_FILES)
	$(ELKHOUND)/make-token-files cc_tokens.tok
	chmod a-w $(TOK_FILES)


# run astgen to generate the AST implementation
CC_AST_MODS := cc.ast cc_tcheck.ast cc_print.ast
cc.ast.gen.h cc.ast.gen.cc: $(CC_AST_MODS) $(AST)/astgen
	$(AST)/astgen -occ.ast.gen $(CC_AST_MODS)


# run elkhound to generate the parser
cc.gr.gen.h cc.gr.gen.cc: cc.gr cc_tokens.ids $(ELKHOUND)/elkhound
	$(ELKHOUND)/elkhound -v -o cc.gr.gen cc.gr


# list of modules needed for the parser
CCPARSE_OBJS := \
  $(LEXER_OBJS) \
  cc.ast.gen.o \
  cc.gr.gen.o \
  parssppt.o \
  cc_env.o \
  cc_scope.o \
  cc_flags.o \
  cc_type.o \
  cc_tcheck.o \
  cc_print.o \
  cc_ast_aux.o \
  treeout.o \
  variable.o \
  ccparse.o \
  main.o
-include $(CCPARSE_OBJS:.o=.d)

# parser binary
ccparse: $(CCPARSE_OBJS)
	$(CXX) -o $@ $(CCPARSE_OBJS) $(LDFLAGS)


# run the binary; the 'quicktest' file is so we don't run it if
# 'ccparse' hasn't recently changed
quicktest: ccparse
	./ccparse in/t0001.cc
	@touch quicktest
	@echo BUILD FINISHED


# ---------------------- misc ---------------------
# rule to decompress one of the big examples
in/big/%.i: in/big/gz/%.i.gz
	gunzip -c <$^ >$@

# decompress all of them which haven't already been decompressed
.PHONY: in/big
in/big: $(patsubst in/big/gz/%.i.gz,in/big/%.i,$(wildcard in/big/gz/*.gz))
	@echo made $@


# -------------------- clean, etc. -------------------
clean:
	rm -f *.o *.d *.gen.* *.tab.* *.output a.out core
	rm -f lexer.yy.cc cc_tokens.{h,cc,ids}
	rm -f outdir/[a-z]*
	rm -f ccparse

distclean: clean
	rm -f Makefile config.status config.summary
	rm -f in/big/*.i

check: all
	./regrtest
	@echo ""
	@echo "Regression tests passed."
